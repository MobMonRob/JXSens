/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class XsPortInfoClass {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected XsPortInfoClass(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(XsPortInfoClass obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        minimalJNI.delete_XsPortInfoClass(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public XsPortInfoClass() {
    this(minimalJNI.new_XsPortInfoClass__SWIG_0(), true);
  }

  public XsPortInfoClass(XsStringClass portname, XsBaudRate baudRate, XsPortLinesOptions linesOptions) {
    this(minimalJNI.new_XsPortInfoClass__SWIG_1(XsStringClass.getCPtr(portname), portname, baudRate.swigValue(), linesOptions.swigValue()), true);
  }

  public XsPortInfoClass(XsStringClass portname, XsBaudRate baudRate) {
    this(minimalJNI.new_XsPortInfoClass__SWIG_2(XsStringClass.getCPtr(portname), portname, baudRate.swigValue()), true);
  }

  public XsPortInfoClass(XsStringClass portname) {
    this(minimalJNI.new_XsPortInfoClass__SWIG_3(XsStringClass.getCPtr(portname), portname), true);
  }

  public XsPortInfoClass(int portNr, XsBaudRate baudRate, XsPortLinesOptions linesOptions) {
    this(minimalJNI.new_XsPortInfoClass__SWIG_4(portNr, baudRate.swigValue(), linesOptions.swigValue()), true);
  }

  public XsPortInfoClass(int portNr, XsBaudRate baudRate) {
    this(minimalJNI.new_XsPortInfoClass__SWIG_5(portNr, baudRate.swigValue()), true);
  }

  public XsPortInfoClass(int portNr) {
    this(minimalJNI.new_XsPortInfoClass__SWIG_6(portNr), true);
  }

  public void clear() {
    minimalJNI.XsPortInfoClass_clear(swigCPtr, this);
  }

  public boolean empty() {
    return minimalJNI.XsPortInfoClass_empty(swigCPtr, this);
  }

  public boolean opGreaterThen(XsPortInfoClass p) {
    return minimalJNI.XsPortInfoClass_opGreaterThen(swigCPtr, this, XsPortInfoClass.getCPtr(p), p);
  }

  public boolean opLessThen(XsPortInfoClass p) {
    return minimalJNI.XsPortInfoClass_opLessThen(swigCPtr, this, XsPortInfoClass.getCPtr(p), p);
  }

  public boolean opEquals(XsPortInfoClass p) {
    return minimalJNI.XsPortInfoClass_opEquals__SWIG_0(swigCPtr, this, XsPortInfoClass.getCPtr(p), p);
  }

  public boolean opEquals(String port) {
    return minimalJNI.XsPortInfoClass_opEquals__SWIG_1(swigCPtr, this, port);
  }

  public int portNumber() {
    return minimalJNI.XsPortInfoClass_portNumber(swigCPtr, this);
  }

  public XsStringClass portName() {
    return new XsStringClass(minimalJNI.XsPortInfoClass_portName(swigCPtr, this), true);
  }

  public String portName_c_str() {
    return minimalJNI.XsPortInfoClass_portName_c_str(swigCPtr, this);
  }

  public void setPortName(XsStringClass portName_) {
    minimalJNI.XsPortInfoClass_setPortName(swigCPtr, this, XsStringClass.getCPtr(portName_), portName_);
  }

  public boolean isUsb() {
    return minimalJNI.XsPortInfoClass_isUsb(swigCPtr, this);
  }

  public boolean isBluetooth() {
    return minimalJNI.XsPortInfoClass_isBluetooth(swigCPtr, this);
  }

  public boolean isNetwork() {
    return minimalJNI.XsPortInfoClass_isNetwork(swigCPtr, this);
  }

  public XsStringClass networkServiceName() {
    return new XsStringClass(minimalJNI.XsPortInfoClass_networkServiceName(swigCPtr, this), true);
  }

  public XsStringClass bluetoothAddress() {
    return new XsStringClass(minimalJNI.XsPortInfoClass_bluetoothAddress(swigCPtr, this), true);
  }

  public int usbBus() {
    return minimalJNI.XsPortInfoClass_usbBus(swigCPtr, this);
  }

  public int usbAddress() {
    return minimalJNI.XsPortInfoClass_usbAddress(swigCPtr, this);
  }

  public XsBaudRate baudrate() {
    return XsBaudRate.swigToEnum(minimalJNI.XsPortInfoClass_baudrate(swigCPtr, this));
  }

  public void setBaudrate(XsBaudRate baudrate_) {
    minimalJNI.XsPortInfoClass_setBaudrate(swigCPtr, this, baudrate_.swigValue());
  }

  public XsDeviceIdClass deviceId() {
    return new XsDeviceIdClass(minimalJNI.XsPortInfoClass_deviceId(swigCPtr, this), true);
  }

  public void setDeviceId(XsDeviceIdClass deviceId_) {
    minimalJNI.XsPortInfoClass_setDeviceId(swigCPtr, this, XsDeviceIdClass.getCPtr(deviceId_), deviceId_);
  }

  public XsPortLinesOptions linesOptions() {
    return XsPortLinesOptions.swigToEnum(minimalJNI.XsPortInfoClass_linesOptions(swigCPtr, this));
  }

  public void setLinesOptions(XsPortLinesOptions linesOptions) {
    minimalJNI.XsPortInfoClass_setLinesOptions(swigCPtr, this, linesOptions.swigValue());
  }

  public void getVidPid(SWIGTYPE_p_unsigned_short vid, SWIGTYPE_p_unsigned_short pid) {
    minimalJNI.XsPortInfoClass_getVidPid(swigCPtr, this, SWIGTYPE_p_unsigned_short.getCPtr(vid), SWIGTYPE_p_unsigned_short.getCPtr(pid));
  }

  public void setVidPid(int vid, int pid) {
    minimalJNI.XsPortInfoClass_setVidPid(swigCPtr, this, vid, pid);
  }

}
