/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class XsControl extends CallbackManagerXda {
  private transient long swigCPtr;

  protected XsControl(long cPtr, boolean cMemoryOwn) {
    super(minimalJNI.XsControl_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(XsControl obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        minimalJNI.delete_XsControl(swigCPtr);
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public XsControl() {
    this(minimalJNI.new_XsControl(), true);
  }

  public void flushInputBuffers() {
    minimalJNI.XsControl_flushInputBuffers(swigCPtr, this);
  }

  public static XsStringClass resultText(XsResultValue resultCode) {
    return new XsStringClass(minimalJNI.XsControl_resultText(resultCode.swigValue()), true);
  }

  public void clearHardwareError() {
    minimalJNI.XsControl_clearHardwareError(swigCPtr, this);
  }

  public void close() {
    minimalJNI.XsControl_close(swigCPtr, this);
  }

  public boolean openPort(XsStringClass portname, XsBaudRate baudrate, long timeout, boolean detectRs485) {
    return minimalJNI.XsControl_openPort__SWIG_0(swigCPtr, this, XsStringClass.getCPtr(portname), portname, baudrate.swigValue(), timeout, detectRs485);
  }

  public boolean openPort(XsStringClass portname, XsBaudRate baudrate, long timeout) {
    return minimalJNI.XsControl_openPort__SWIG_1(swigCPtr, this, XsStringClass.getCPtr(portname), portname, baudrate.swigValue(), timeout);
  }

  public boolean openPort(XsStringClass portname, XsBaudRate baudrate) {
    return minimalJNI.XsControl_openPort__SWIG_2(swigCPtr, this, XsStringClass.getCPtr(portname), portname, baudrate.swigValue());
  }

  public boolean openPort(XsPortInfoClass portinfo, long timeout, boolean detectRs485) {
    return minimalJNI.XsControl_openPort__SWIG_3(swigCPtr, this, XsPortInfoClass.getCPtr(portinfo), portinfo, timeout, detectRs485);
  }

  public boolean openPort(XsPortInfoClass portinfo, long timeout) {
    return minimalJNI.XsControl_openPort__SWIG_4(swigCPtr, this, XsPortInfoClass.getCPtr(portinfo), portinfo, timeout);
  }

  public boolean openPort(XsPortInfoClass portinfo) {
    return minimalJNI.XsControl_openPort__SWIG_5(swigCPtr, this, XsPortInfoClass.getCPtr(portinfo), portinfo);
  }

  public boolean openPortWithCredentials(XsPortInfoClass portinfo, XsStringClass id, XsStringClass key, long timeout) {
    return minimalJNI.XsControl_openPortWithCredentials__SWIG_0(swigCPtr, this, XsPortInfoClass.getCPtr(portinfo), portinfo, XsStringClass.getCPtr(id), id, XsStringClass.getCPtr(key), key, timeout);
  }

  public boolean openPortWithCredentials(XsPortInfoClass portinfo, XsStringClass id, XsStringClass key) {
    return minimalJNI.XsControl_openPortWithCredentials__SWIG_1(swigCPtr, this, XsPortInfoClass.getCPtr(portinfo), portinfo, XsStringClass.getCPtr(id), id, XsStringClass.getCPtr(key), key);
  }

  public boolean openCustomPort(int channelId, long channelLatency, boolean detectRs485) {
    return minimalJNI.XsControl_openCustomPort__SWIG_0(swigCPtr, this, channelId, channelLatency, detectRs485);
  }

  public boolean openCustomPort(int channelId, long channelLatency) {
    return minimalJNI.XsControl_openCustomPort__SWIG_1(swigCPtr, this, channelId, channelLatency);
  }

  public boolean openImarPort_internal(XsStringClass portname, XsBaudRate baudrate, int imarType, long timeout) {
    return minimalJNI.XsControl_openImarPort_internal__SWIG_0(swigCPtr, this, XsStringClass.getCPtr(portname), portname, baudrate.swigValue(), imarType, timeout);
  }

  public boolean openImarPort_internal(XsStringClass portname, XsBaudRate baudrate, int imarType) {
    return minimalJNI.XsControl_openImarPort_internal__SWIG_1(swigCPtr, this, XsStringClass.getCPtr(portname), portname, baudrate.swigValue(), imarType);
  }

  public void closePort(XsStringClass portname) {
    minimalJNI.XsControl_closePort__SWIG_0(swigCPtr, this, XsStringClass.getCPtr(portname), portname);
  }

  public void closePort(XsDeviceIdClass deviceId) {
    minimalJNI.XsControl_closePort__SWIG_1(swigCPtr, this, XsDeviceIdClass.getCPtr(deviceId), deviceId);
  }

  public void closePort(XsPortInfoClass portinfo) {
    minimalJNI.XsControl_closePort__SWIG_2(swigCPtr, this, XsPortInfoClass.getCPtr(portinfo), portinfo);
  }

  public void closeCustomPort(int channelId) {
    minimalJNI.XsControl_closeCustomPort(swigCPtr, this, channelId);
  }

  public void closePort(XsDevice device) {
    minimalJNI.XsControl_closePort__SWIG_3(swigCPtr, this, XsDevice.getCPtr(device), device);
  }

  public XsPortInfoClass customPortInfo(int channelId) {
    return new XsPortInfoClass(minimalJNI.XsControl_customPortInfo(swigCPtr, this, channelId), true);
  }

  public boolean openLogFile(XsStringClass filename) {
    return minimalJNI.XsControl_openLogFile(swigCPtr, this, XsStringClass.getCPtr(filename), filename);
  }

  public XsResultValue lastResult() {
    return XsResultValue.swigToEnum(minimalJNI.XsControl_lastResult(swigCPtr, this));
  }

  public XsStringClass lastResultText() {
    return new XsStringClass(minimalJNI.XsControl_lastResultText(swigCPtr, this), true);
  }

  public XsResultValue lastHardwareError() {
    return XsResultValue.swigToEnum(minimalJNI.XsControl_lastHardwareError(swigCPtr, this));
  }

  public XsDeviceIdClass lastHardwareErrorDeviceId() {
    return new XsDeviceIdClass(minimalJNI.XsControl_lastHardwareErrorDeviceId(swigCPtr, this), true);
  }

  public int deviceCount() {
    return minimalJNI.XsControl_deviceCount(swigCPtr, this);
  }

  public int mainDeviceCount() {
    return minimalJNI.XsControl_mainDeviceCount(swigCPtr, this);
  }

  public SWIGTYPE_p_std__vectorT_XsDeviceId_t mainDeviceIds() {
    return new SWIGTYPE_p_std__vectorT_XsDeviceId_t(minimalJNI.XsControl_mainDeviceIds(swigCPtr, this), true);
  }

  public int mtCount() {
    return minimalJNI.XsControl_mtCount(swigCPtr, this);
  }

  public SWIGTYPE_p_std__vectorT_XsDeviceId_t mtDeviceIds() {
    return new SWIGTYPE_p_std__vectorT_XsDeviceId_t(minimalJNI.XsControl_mtDeviceIds(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__vectorT_XsDeviceId_t deviceIds() {
    return new SWIGTYPE_p_std__vectorT_XsDeviceId_t(minimalJNI.XsControl_deviceIds(swigCPtr, this), true);
  }

  public XsDevice getDeviceFromLocationId(int locationId) {
    long cPtr = minimalJNI.XsControl_getDeviceFromLocationId(swigCPtr, this, locationId);
    return (cPtr == 0) ? null : new XsDevice(cPtr, false);
  }

  public XsDeviceIdClass dockDeviceId(XsDeviceIdClass deviceId) {
    return new XsDeviceIdClass(minimalJNI.XsControl_dockDeviceId(swigCPtr, this, XsDeviceIdClass.getCPtr(deviceId), deviceId), true);
  }

  public boolean isDeviceWireless(XsDeviceIdClass deviceId) {
    return minimalJNI.XsControl_isDeviceWireless(swigCPtr, this, XsDeviceIdClass.getCPtr(deviceId), deviceId);
  }

  public boolean isDeviceDocked(XsDeviceIdClass deviceId) {
    return minimalJNI.XsControl_isDeviceDocked(swigCPtr, this, XsDeviceIdClass.getCPtr(deviceId), deviceId);
  }

  public boolean loadFilterProfiles(XsStringClass filename) {
    return minimalJNI.XsControl_loadFilterProfiles(swigCPtr, this, XsStringClass.getCPtr(filename), filename);
  }

  public XsOption enabledOptions() {
    return XsOption.swigToEnum(minimalJNI.XsControl_enabledOptions(swigCPtr, this));
  }

  public XsOption disabledOptions() {
    return XsOption.swigToEnum(minimalJNI.XsControl_disabledOptions(swigCPtr, this));
  }

  public void setOptions(XsOption enable, XsOption disable) {
    minimalJNI.XsControl_setOptions(swigCPtr, this, enable.swigValue(), disable.swigValue());
  }

  public void setOptionsForce(XsOption enabled) {
    minimalJNI.XsControl_setOptionsForce(swigCPtr, this, enabled.swigValue());
  }

  public boolean setInitialPositionLLA(XsVectorClass lla) {
    return minimalJNI.XsControl_setInitialPositionLLA(swigCPtr, this, XsVectorClass.getCPtr(lla), lla);
  }

  public XsDevice device(XsDeviceIdClass deviceId) {
    long cPtr = minimalJNI.XsControl_device(swigCPtr, this, XsDeviceIdClass.getCPtr(deviceId), deviceId);
    return (cPtr == 0) ? null : new XsDevice(cPtr, false);
  }

  public SWIGTYPE_p_XsDevicePtrArray mainDevices() {
    return new SWIGTYPE_p_XsDevicePtrArray(minimalJNI.XsControl_mainDevices(swigCPtr, this), true);
  }

  public XsDevice broadcast() {
    long cPtr = minimalJNI.XsControl_broadcast(swigCPtr, this);
    return (cPtr == 0) ? null : new XsDevice(cPtr, false);
  }

  public void transmissionReceived(int channelId, SWIGTYPE_p_XsByteArray data) {
    minimalJNI.XsControl_transmissionReceived(swigCPtr, this, channelId, SWIGTYPE_p_XsByteArray.getCPtr(data));
  }

  public static XsControl construct() {
    long cPtr = minimalJNI.XsControl_construct();
    return (cPtr == 0) ? null : new XsControl(cPtr, false);
  }

  public void destruct() {
    minimalJNI.XsControl_destruct(swigCPtr, this);
  }

  public boolean finalizeOpenPort(Communicator communicator, XsPortInfoClass portinfo, long timeout, boolean detectRs485) {
    return minimalJNI.XsControl_finalizeOpenPort(swigCPtr, this, Communicator.getCPtr(communicator), communicator, XsPortInfoClass.getCPtr(portinfo), portinfo, timeout, detectRs485);
  }

  public void gotoConfig() {
    minimalJNI.XsControl_gotoConfig(swigCPtr, this);
  }

  public void gotoMeasurement() {
    minimalJNI.XsControl_gotoMeasurement(swigCPtr, this);
  }

  public XsResultValue startRestoreCommunication(XsStringClass portName) {
    return XsResultValue.swigToEnum(minimalJNI.XsControl_startRestoreCommunication(swigCPtr, this, XsStringClass.getCPtr(portName), portName));
  }

  public void stopRestoreCommunication() {
    minimalJNI.XsControl_stopRestoreCommunication(swigCPtr, this);
  }

}
