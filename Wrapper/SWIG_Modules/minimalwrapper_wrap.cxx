/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <memory>


#include <stdint.h>		// Use the C99 official header


    #include  "../xsens/examples/mtsdk/xda_public_cpp/stub.cpp"
    #include "../xsens/xsens_ros_mti_driver/lib/xspublic/xstypes/xsdatapacket.h"
    #include "xsens/xsens_ros_mti_driver/lib/xspublic/xstypes/xsportinfo.h"
    #include "xsens/xsens_ros_mti_driver/lib/xspublic/xscontroller/xsdevice_def.h"




#include "../xsens/public/xspublic/xscontroller/xsscanner.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsArrayDescriptor(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsArrayDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsArrayDescriptor *)new XsArrayDescriptor();
  *(XsArrayDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsArrayDescriptor(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsArrayDescriptor *arg1 = (XsArrayDescriptor *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsArrayDescriptor **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  void *arg1 = (void *) 0 ;
  XsArrayDescriptor *arg2 = (XsArrayDescriptor *) (XsArrayDescriptor *)0 ;
  XsSize arg3 ;
  void *arg4 = (void *) 0 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(void **)&jarg1; 
  arg2 = *(XsArrayDescriptor **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(void **)&jarg4; 
  XsArray_construct(arg1,(XsArrayDescriptor const *)arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1copyConstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  XsArray_copyConstruct(arg1,(void const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  XsArray_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  void *arg1 = (void *) 0 ;
  XsSize arg2 ;
  void *arg3 = (void *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(void **)&jarg3; 
  XsArray_assign(arg1,arg2,(void const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  XsArray_resize(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  XsArray_reserve(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  XsArray_copy(arg1,(void const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  XsArray_append(arg1,(void const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  void *arg1 = (void *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  void *arg4 = (void *) 0 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  arg4 = *(void **)&jarg4; 
  XsArray_insert(arg1,arg2,arg3,(void const *)arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  void *arg1 = (void *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsArray_erase(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  XsArray_swap(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsArray_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (int)XsArray_compare((void const *)arg1,(void const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsArray_1compareSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = (int)XsArray_compareSet((void const *)arg1,(void const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsArray_1comparePredicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  XsArrayItemCompareFunc arg3 = (XsArrayItemCompareFunc) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(XsArrayItemCompareFunc *)&jarg3; 
  result = (int)XsArray_comparePredicate((void const *)arg1,(void const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  result = XsArray_find((void const *)arg1,(void const *)arg2);
  *(ptrdiff_t **)&jresult = new ptrdiff_t((const ptrdiff_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1findPredicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  XsArrayItemCompareFunc arg3 = (XsArrayItemCompareFunc) 0 ;
  ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  arg3 = *(XsArrayItemCompareFunc *)&jarg3; 
  result = XsArray_findPredicate((void const *)arg1,(void const *)arg2,arg3);
  *(ptrdiff_t **)&jresult = new ptrdiff_t((const ptrdiff_t &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsArray_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  result = (int)XsArray_empty((void const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (void *)XsArray_at((void const *)arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1atIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  void *arg1 = (void *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (void *)XsArray_atIndex(arg1,arg2);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1removeDuplicates(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  XsArray_removeDuplicates(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1removeDuplicatesPredicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  void *arg1 = (void *) 0 ;
  XsArrayItemCompareFunc arg2 = (XsArrayItemCompareFunc) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(XsArrayItemCompareFunc *)&jarg2; 
  XsArray_removeDuplicatesPredicate(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1rawCopy(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  void *arg1 = (void *) 0 ;
  void *arg2 = (void *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  XsArray_rawCopy(arg1,(void const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  XsArray_sort(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsArray_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1; 
  XsArray_reverse(arg1);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArray *arg1 = (XsArray *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArray **)&jarg1; 
  result = (void *)(void *) ((arg1)->m_data);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1m_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArray *arg1 = (XsArray *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArray **)&jarg1; 
  result = (XsSize) ((arg1)->m_size);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1m_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArray *arg1 = (XsArray *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArray **)&jarg1; 
  result = (XsSize) ((arg1)->m_reserved);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArray *arg1 = (XsArray *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArray **)&jarg1; 
  result = (XsSize) ((arg1)->m_flags);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1m_1descriptor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArray *arg1 = (XsArray *) 0 ;
  XsArrayDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArray **)&jarg1; 
  result = (XsArrayDescriptor *)(XsArrayDescriptor *) ((arg1)->m_descriptor);
  *(XsArrayDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsArrayDescriptor *arg1 = (XsArrayDescriptor *) 0 ;
  XsSize arg2 = (XsSize) 0 ;
  void *arg3 = (void *) 0 ;
  XsSize *argp2 ;
  XsArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayDescriptor **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(void **)&jarg3; 
  result = (XsArray *)new XsArray((XsArrayDescriptor const *)arg1,arg2,(void const *)arg3);
  *(XsArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArray *arg1 = 0 ;
  XsArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArray **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArray const & reference is null");
    return 0;
  } 
  result = (XsArray *)new XsArray((XsArray const &)*arg1);
  *(XsArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XsArrayDescriptor *arg1 = (XsArrayDescriptor *) 0 ;
  void *arg2 = (void *) 0 ;
  XsSize arg3 ;
  XsDataFlags arg4 ;
  XsSize *argp3 ;
  XsDataFlags *argp4 ;
  XsArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayDescriptor **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(XsDataFlags **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg4 = *argp4; 
  result = (XsArray *)new XsArray((XsArrayDescriptor const *)arg1,arg2,arg3,arg4);
  *(XsArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsArray *arg1 = (XsArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsArray_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsArray *arg1 = (XsArray *) 0 ;
  XsArray *arg2 = 0 ;
  XsArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArray **)&jarg1; 
  arg2 = *(XsArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArray const & reference is null");
    return 0;
  } 
  result = (XsArray *) &(arg1)->operator =((XsArray const &)*arg2);
  *(XsArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternion_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  XsQuaternion_destruct(arg1);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsQuaternion_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = (int)XsQuaternion_empty((XsQuaternion const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternion_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  XsQuaternion_inverse((XsQuaternion const *)arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternion_1normalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  result = XsQuaternion_normalized((XsQuaternion const *)arg1,arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternion_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = XsQuaternion_normalize(arg1);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternion_1fromEulerAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsEuler *arg2 = (XsEuler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2; 
  XsQuaternion_fromEulerAngles(arg1,(XsEuler const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternion_1fromRotationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsMatrix *arg2 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2; 
  XsQuaternion_fromRotationMatrix(arg1,(XsMatrix const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternion_1identity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsQuaternion *)XsQuaternion_identity();
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternion_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  XsQuaternion *arg3 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  arg3 = *(XsQuaternion **)&jarg3; 
  XsQuaternion_multiply((XsQuaternion const *)arg1,(XsQuaternion const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternion_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  XsQuaternion_swap(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternion_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  XsQuaternion_copy(arg1,(XsQuaternion const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsQuaternion_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  result = (int)XsQuaternion_equal((XsQuaternion const *)arg1,(XsQuaternion const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsQuaternion_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  XsReal arg3 ;
  XsReal *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)XsQuaternion_compare((XsQuaternion const *)arg1,(XsQuaternion const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternion_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  result = XsQuaternion_dotProduct((XsQuaternion const *)arg1,(XsQuaternion const *)arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1m_1w_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_w = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1m_1w_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result =  ((arg1)->m_w);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1m_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_x = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1m_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result =  ((arg1)->m_x);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1m_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_y = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1m_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result =  ((arg1)->m_y);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1m_1z_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->m_z = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1m_1z_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result =  ((arg1)->m_z);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1m_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsReal **)&jarg2; 
  {
    size_t ii;
    XsReal *b = (XsReal *) arg1->m_data;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((XsReal *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = (XsReal *)(XsReal *) ((arg1)->m_data);
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsReal arg2 ;
  XsReal arg3 ;
  XsReal arg4 ;
  XsReal *argp1 ;
  XsReal *argp2 ;
  XsReal *argp3 ;
  XsReal *argp4 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(XsReal **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg4 = *argp4; 
  result = (XsQuaternion *)new XsQuaternion(arg1,arg2,arg3,arg4);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsReal arg2 ;
  XsReal arg3 ;
  XsReal *argp1 ;
  XsReal *argp2 ;
  XsReal *argp3 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsQuaternion *)new XsQuaternion(arg1,arg2,arg3);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsReal arg2 ;
  XsReal *argp1 ;
  XsReal *argp2 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsQuaternion *)new XsQuaternion(arg1,arg2);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsReal *argp1 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  result = (XsQuaternion *)new XsQuaternion(arg1);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsQuaternion *)new XsQuaternion();
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsReal arg2 ;
  XsReal arg3 ;
  XsReal arg4 ;
  bool arg5 ;
  XsReal *argp1 ;
  XsReal *argp2 ;
  XsReal *argp3 ;
  XsReal *argp4 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(XsReal **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  result = (XsQuaternion *)new XsQuaternion(arg1,arg2,arg3,arg4,arg5);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (XsQuaternion *)new XsQuaternion((XsQuaternion const &)*arg1);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return 0;
  } 
  result = (XsQuaternion *)new XsQuaternion((XsEuler const &)*arg1);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsQuaternionClass_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = (XsQuaternion *)new XsQuaternion((XsMatrix const &)*arg1);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsQuaternionClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsQuaternion **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (XsQuaternion *) &(arg1)->operator =((XsQuaternion const &)*arg2);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1assign_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal arg2 ;
  XsReal arg3 ;
  XsReal arg4 ;
  XsReal arg5 ;
  XsReal *argp2 ;
  XsReal *argp3 ;
  XsReal *argp4 ;
  XsReal *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsReal **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(XsReal **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->assign(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsReal **)&jarg2; 
  (arg1)->assign((XsReal const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1opSquareBracket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsQuaternion const *)arg1)->operator [](arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = (XsReal *)((XsQuaternion const *)arg1)->data();
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1inverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = ((XsQuaternion const *)arg1)->inverse();
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1conjugate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = ((XsQuaternion const *)arg1)->conjugate();
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1normalized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = ((XsQuaternion const *)arg1)->normalized();
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = (arg1)->normalize();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsQuaternionClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = (bool)((XsQuaternion const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1fromEulerAngles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsEuler *arg2 = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return 0;
  } 
  result = (XsQuaternion *) &(arg1)->fromEulerAngles((XsEuler const &)*arg2);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1fromRotationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsMatrix *arg2 = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = (XsQuaternion *) &(arg1)->fromRotationMatrix((XsMatrix const &)*arg2);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1identity(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsQuaternion *) &XsQuaternion::identity();
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1opSelfMultiplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return ;
  } 
  (arg1)->operator *=((XsQuaternion const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1multiply(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsQuaternion *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return ;
  } 
  arg3 = *(XsQuaternion **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return ;
  } 
  (arg1)->multiply((XsQuaternion const &)*arg2,(XsQuaternion const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1w(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = ((XsQuaternion const *)arg1)->w();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = ((XsQuaternion const *)arg1)->x();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = ((XsQuaternion const *)arg1)->y();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1; 
  result = ((XsQuaternion const *)arg1)->z();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsQuaternionClass_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_swap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsQuaternion *arg1 = 0 ;
  XsQuaternion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion & reference is null");
    return ;
  } 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion & reference is null");
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsQuaternionClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (bool)((XsQuaternion const *)arg1)->operator ==((XsQuaternion const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsQuaternionClass_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsReal arg3 ;
  XsReal *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((XsQuaternion const *)arg1)->isEqual((XsQuaternion const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsQuaternionClass_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = (XsQuaternion *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = ((XsQuaternion const *)arg1)->dotProduct((XsQuaternion const &)*arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_opSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = operator -((XsQuaternion const &)*arg1);
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_opMult_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsQuaternion *arg2 = 0 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = operator *((XsQuaternion const &)*arg1,(XsQuaternion const &)*arg2);
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsAnalogInDataClass_1m_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsAnalogInData *arg1 = (XsAnalogInData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsAnalogInData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_data = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsAnalogInDataClass_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsAnalogInData *arg1 = (XsAnalogInData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsAnalogInData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_data);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsAnalogInDataClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsAnalogInData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsAnalogInData *)new XsAnalogInData();
  *(XsAnalogInData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsAnalogInDataClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  XsAnalogInData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  result = (XsAnalogInData *)new XsAnalogInData(arg1);
  *(XsAnalogInData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsAnalogInDataClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsAnalogInData *arg1 = (XsAnalogInData *) 0 ;
  XsAnalogInData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsAnalogInData **)&jarg1; 
  arg2 = *(XsAnalogInData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsAnalogInData const & reference is null");
    return 0;
  } 
  result = (bool)((XsAnalogInData const *)arg1)->operator ==((XsAnalogInData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsAnalogInDataClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsAnalogInData *arg1 = (XsAnalogInData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsAnalogInData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  XsDataPacket_construct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1copyConstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2; 
  XsDataPacket_copyConstruct(arg1,(XsDataPacket const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  XsDataPacket_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  XsDataPacket_clear(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2; 
  XsDataPacket_copy(arg1,(XsDataPacket const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2; 
  XsDataPacket_swap(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_empty((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1itemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_itemCount((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMessage *arg2 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2; 
  XsDataPacket_setMessage(arg1,(XsMessage const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1dataFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (XsDataIdentifier)XsDataPacket_dataFormat((XsDataPacket const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  result = (XsUShortVector *)XsDataPacket_rawAcceleration((XsDataPacket const *)arg1,arg2);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawAccelerationConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_rawAccelerationConverted((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawAcceleration((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  XsDataPacket_setRawAcceleration(arg1,(XsUShortVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  result = (XsUShortVector *)XsDataPacket_rawGyroscopeData((XsDataPacket const *)arg1,arg2);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawGyroscopeDataConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_rawGyroscopeDataConverted((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawGyroscopeData((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  XsDataPacket_setRawGyroscopeData(arg1,(XsUShortVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawGyroscopeTemperatureData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  result = (XsUShortVector *)XsDataPacket_rawGyroscopeTemperatureData((XsDataPacket const *)arg1,arg2);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawGyroscopeTemperatureDataConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_rawGyroscopeTemperatureDataConverted((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawGyroscopeTemperatureData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawGyroscopeTemperatureData((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawGyroscopeTemperatureData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  XsDataPacket_setRawGyroscopeTemperatureData(arg1,(XsUShortVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  result = (XsUShortVector *)XsDataPacket_rawMagneticField((XsDataPacket const *)arg1,arg2);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawMagneticFieldConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_rawMagneticFieldConverted((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawMagneticField((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  XsDataPacket_setRawMagneticField(arg1,(XsUShortVector const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1rawTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint16_t)XsDataPacket_rawTemperature((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawTemperature((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  XsDataPacket_setRawTemperature(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsScrData *arg2 = (XsScrData *) 0 ;
  XsScrData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsScrData **)&jarg2; 
  result = (XsScrData *)XsDataPacket_rawData((XsDataPacket const *)arg1,arg2);
  *(XsScrData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawData((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsScrData *arg2 = (XsScrData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsScrData **)&jarg2; 
  XsDataPacket_setRawData(arg1,(XsScrData const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1velocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_velocityIncrement((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsVelocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsVelocityIncrement((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setVelocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setVelocityIncrement(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1calibratedAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_calibratedAcceleration((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsCalibratedAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsCalibratedAcceleration((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setCalibratedAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setCalibratedAcceleration(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1orientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  result = (XsQuaternion *)XsDataPacket_orientationIncrement((XsDataPacket const *)arg1,arg2);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsOrientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsOrientationIncrement((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setOrientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  XsDataPacket_setOrientationIncrement(arg1,(XsQuaternion const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1calibratedGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_calibratedGyroscopeData((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsCalibratedGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsCalibratedGyroscopeData((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setCalibratedGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setCalibratedGyroscopeData(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1calibratedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_calibratedMagneticField((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsCalibratedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsCalibratedMagneticField((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setCalibratedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setCalibratedMagneticField(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1correctedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_correctedMagneticField((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsCorrectedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsCorrectedMagneticField((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setCorrectedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setCorrectedMagneticField(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1calibratedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsCalibratedData *arg2 = (XsCalibratedData *) 0 ;
  XsCalibratedData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsCalibratedData **)&jarg2; 
  result = (XsCalibratedData *)XsDataPacket_calibratedData((XsDataPacket const *)arg1,arg2);
  *(XsCalibratedData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsCalibratedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsCalibratedData((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setCalibratedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsCalibratedData *arg2 = (XsCalibratedData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsCalibratedData **)&jarg2; 
  XsDataPacket_setCalibratedData(arg1,(XsCalibratedData const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1orientationQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  XsDataIdentifier arg3 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  result = (XsQuaternion *)XsDataPacket_orientationQuaternion((XsDataPacket const *)arg1,arg2,arg3);
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setOrientationQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  XsDataPacket_setOrientationQuaternion(arg1,(XsQuaternion const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1orientationEuler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsEuler *arg2 = (XsEuler *) 0 ;
  XsDataIdentifier arg3 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  result = (XsEuler *)XsDataPacket_orientationEuler((XsDataPacket const *)arg1,arg2,arg3);
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setOrientationEuler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsEuler *arg2 = (XsEuler *) 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  XsDataPacket_setOrientationEuler(arg1,(XsEuler const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1orientationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMatrix *arg2 = (XsMatrix *) 0 ;
  XsDataIdentifier arg3 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  result = (XsMatrix *)XsDataPacket_orientationMatrix((XsDataPacket const *)arg1,arg2,arg3);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setOrientationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMatrix *arg2 = (XsMatrix *) 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  XsDataPacket_setOrientationMatrix(arg1,(XsMatrix const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsOrientation((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1orientationIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)XsDataPacket_orientationIdentifier((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1coordinateSystemOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)XsDataPacket_coordinateSystemOrientation((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1sdiData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSdiData *arg2 = (XsSdiData *) 0 ;
  XsSdiData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSdiData **)&jarg2; 
  result = (XsSdiData *)XsDataPacket_sdiData((XsDataPacket const *)arg1,arg2);
  *(XsSdiData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsSdiData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsSdiData((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setSdiData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSdiData *arg2 = (XsSdiData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSdiData **)&jarg2; 
  XsDataPacket_setSdiData(arg1,(XsSdiData const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1gloveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsGloveData *arg2 = (XsGloveData *) 0 ;
  XsHandId arg3 ;
  XsGloveData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2; 
  arg3 = (XsHandId)jarg3; 
  result = (XsGloveData *)XsDataPacket_gloveData((XsDataPacket const *)arg1,arg2,arg3);
  *(XsGloveData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsGloveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsHandId arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsHandId)jarg2; 
  result = (int)XsDataPacket_containsGloveData((XsDataPacket const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setGloveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsGloveData *arg2 = (XsGloveData *) 0 ;
  XsHandId arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2; 
  arg3 = (XsHandId)jarg3; 
  XsDataPacket_setGloveData(arg1,(XsGloveData const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1storedDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  result = (XsDeviceId *)XsDataPacket_storedDeviceId((XsDataPacket const *)arg1,arg2);
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsStoredDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsStoredDeviceId((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setStoredDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  XsDataPacket_setStoredDeviceId(arg1,(XsDeviceId const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1storedLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint16_t)XsDataPacket_storedLocationId((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsStoredLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsStoredLocationId((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setStoredLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  XsDataPacket_setStoredLocationId(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)XsDataPacket_status((XsDataPacket const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsStatus((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsDetailedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsDetailedStatus((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  XsDataPacket_setStatus(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setStatusByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  XsDataPacket_setStatusByte(arg1,arg2);
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsDataPacket_1packetCounter8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint8_t)XsDataPacket_packetCounter8((XsDataPacket const *)arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsPacketCounter8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsPacketCounter8((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setPacketCounter8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  XsDataPacket_setPacketCounter8(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1packetCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint16_t)XsDataPacket_packetCounter((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsPacketCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsPacketCounter((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setPacketCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  XsDataPacket_setPacketCounter(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1sampleTimeFine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)XsDataPacket_sampleTimeFine((XsDataPacket const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsSampleTimeFine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsSampleTimeFine((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setSampleTimeFine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  XsDataPacket_setSampleTimeFine(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1sampleTimeCoarse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)XsDataPacket_sampleTimeCoarse((XsDataPacket const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsSampleTimeCoarse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsSampleTimeCoarse((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setSampleTimeCoarse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  XsDataPacket_setSampleTimeCoarse(arg1,arg2);
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsDataPacket_1sampleTime64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint64_t)XsDataPacket_sampleTime64((XsDataPacket const *)arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsSampleTime64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsSampleTime64((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setSampleTime64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  XsDataPacket_setSampleTime64(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1freeAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_freeAcceleration((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsFreeAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsFreeAcceleration((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setFreeAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setFreeAcceleration(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDataPacket_1temperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (double)XsDataPacket_temperature((XsDataPacket const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsTemperature((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (double)jarg2; 
  XsDataPacket_setTemperature(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsPressure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsPressure((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1pressure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsPressure *arg2 = (XsPressure *) 0 ;
  XsPressure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsPressure **)&jarg2; 
  result = (XsPressure *)XsDataPacket_pressure((XsDataPacket const *)arg1,arg2);
  *(XsPressure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsPressureAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsPressureAge((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setPressure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsPressure *arg2 = (XsPressure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsPressure **)&jarg2; 
  XsDataPacket_setPressure(arg1,(XsPressure const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1analogIn1Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData *arg2 = (XsAnalogInData *) 0 ;
  XsAnalogInData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsAnalogInData **)&jarg2; 
  result = (XsAnalogInData *)XsDataPacket_analogIn1Data((XsDataPacket const *)arg1,arg2);
  *(XsAnalogInData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsAnalogIn1Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsAnalogIn1Data((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setAnalogIn1Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData *arg2 = (XsAnalogInData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsAnalogInData **)&jarg2; 
  XsDataPacket_setAnalogIn1Data(arg1,(XsAnalogInData const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1analogIn2Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData *arg2 = (XsAnalogInData *) 0 ;
  XsAnalogInData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsAnalogInData **)&jarg2; 
  result = (XsAnalogInData *)XsDataPacket_analogIn2Data((XsDataPacket const *)arg1,arg2);
  *(XsAnalogInData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsAnalogIn2Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsAnalogIn2Data((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setAnalogIn2Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData *arg2 = (XsAnalogInData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsAnalogInData **)&jarg2; 
  XsDataPacket_setAnalogIn2Data(arg1,(XsAnalogInData const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1positionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_positionLLA((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsPositionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsPositionLLA((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setPositionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setPositionLLA(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1latitudeLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_latitudeLongitude((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsLatitudeLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsLatitudeLongitude((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setLatitudeLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setLatitudeLongitude(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDataPacket_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (double)XsDataPacket_altitude((XsDataPacket const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsAltitude((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (double)jarg2; 
  XsDataPacket_setAltitude(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDataPacket_1altitudeMsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (double)XsDataPacket_altitudeMsl((XsDataPacket const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsAltitudeMsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsAltitudeMsl((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setAltitudeMsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (double)jarg2; 
  XsDataPacket_setAltitudeMsl(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1velocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsDataIdentifier arg3 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  result = (XsVector *)XsDataPacket_velocity((XsDataPacket const *)arg1,arg2,arg3);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsVelocity((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  arg3 = (XsDataIdentifier)jarg3; 
  XsDataPacket_setVelocity(arg1,(XsVector const *)arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1velocityIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)XsDataPacket_velocityIdentifier((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1coordinateSystemVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)XsDataPacket_coordinateSystemVelocity((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1utcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeInfo *arg2 = (XsTimeInfo *) 0 ;
  XsTimeInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2; 
  result = (XsTimeInfo *)XsDataPacket_utcTime((XsDataPacket const *)arg1,arg2);
  *(XsTimeInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsUtcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsUtcTime((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setUtcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeInfo *arg2 = (XsTimeInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2; 
  XsDataPacket_setUtcTime(arg1,(XsTimeInfo const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1frameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRange *arg2 = (XsRange *) 0 ;
  XsRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRange **)&jarg2; 
  result = (XsRange *)XsDataPacket_frameRange((XsDataPacket const *)arg1,arg2);
  *(XsRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsFrameRange((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRange *arg2 = (XsRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRange **)&jarg2; 
  XsDataPacket_setFrameRange(arg1,(XsRange const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1rssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_rssi((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRssi((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  XsDataPacket_setRssi(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawGnssPvtData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssPvtData *arg2 = (XsRawGnssPvtData *) 0 ;
  XsRawGnssPvtData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRawGnssPvtData **)&jarg2; 
  result = (XsRawGnssPvtData *)XsDataPacket_rawGnssPvtData((XsDataPacket const *)arg1,arg2);
  *(XsRawGnssPvtData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawGnssPvtData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawGnssPvtData((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawGnssPvtData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssPvtData *arg2 = (XsRawGnssPvtData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRawGnssPvtData **)&jarg2; 
  XsDataPacket_setRawGnssPvtData(arg1,(XsRawGnssPvtData const *)arg2);
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsDataPacket_1gnssAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint8_t)XsDataPacket_gnssAge((XsDataPacket const *)arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsGnssAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsGnssAge((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setGnssAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  XsDataPacket_setGnssAge(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawGnssSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssSatInfo *arg2 = (XsRawGnssSatInfo *) 0 ;
  XsRawGnssSatInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRawGnssSatInfo **)&jarg2; 
  result = (XsRawGnssSatInfo *)XsDataPacket_rawGnssSatInfo((XsDataPacket const *)arg1,arg2);
  *(XsRawGnssSatInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawGnssSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawGnssSatInfo((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawGnssSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssSatInfo *arg2 = (XsRawGnssSatInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRawGnssSatInfo **)&jarg2; 
  XsDataPacket_setRawGnssSatInfo(arg1,(XsRawGnssSatInfo const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1gnssPvtPulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)XsDataPacket_gnssPvtPulse((XsDataPacket const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsGnssPvtPulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsGnssPvtPulse((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setGnssPvtPulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  XsDataPacket_setGnssPvtPulse(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1merge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = (XsDataPacket *) 0 ;
  int arg3 ;
  XsDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (XsDataPacket *)XsDataPacket_merge(arg1,(XsDataPacket const *)arg2,arg3);
  *(XsDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setTriggerIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsTriggerIndicationData *arg3 = (XsTriggerIndicationData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(XsTriggerIndicationData **)&jarg3; 
  XsDataPacket_setTriggerIndication(arg1,arg2,(XsTriggerIndicationData const *)arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1triggerIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsTriggerIndicationData *arg3 = (XsTriggerIndicationData *) 0 ;
  XsTriggerIndicationData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(XsTriggerIndicationData **)&jarg3; 
  result = (XsTriggerIndicationData *)XsDataPacket_triggerIndication((XsDataPacket const *)arg1,arg2,arg3);
  *(XsTriggerIndicationData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsTriggerIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (int)XsDataPacket_containsTriggerIndication((XsDataPacket const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1toMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMessage *arg2 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2; 
  XsDataPacket_toMessage((XsDataPacket const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setAwindaSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot *arg2 = (XsSnapshot *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSnapshot **)&jarg2; 
  arg3 = (int)jarg3; 
  XsDataPacket_setAwindaSnapshot(arg1,(XsSnapshot const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1awindaSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot *arg2 = (XsSnapshot *) 0 ;
  XsSnapshot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSnapshot **)&jarg2; 
  result = (XsSnapshot *)XsDataPacket_awindaSnapshot((XsDataPacket const *)arg1,arg2);
  *(XsSnapshot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsAwindaSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsAwindaSnapshot((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1isAwindaSnapshotARetransmission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_isAwindaSnapshotARetransmission((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setFullSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot *arg2 = (XsSnapshot *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSnapshot **)&jarg2; 
  arg3 = (int)jarg3; 
  XsDataPacket_setFullSnapshot(arg1,(XsSnapshot const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1fullSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot *arg2 = (XsSnapshot *) 0 ;
  XsSnapshot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSnapshot **)&jarg2; 
  result = (XsSnapshot *)XsDataPacket_fullSnapshot((XsDataPacket const *)arg1,arg2);
  *(XsSnapshot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsFullSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsFullSnapshot((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setGloveSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsGloveSnapshot *arg2 = (XsGloveSnapshot *) 0 ;
  int arg3 ;
  XsHandId arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsGloveSnapshot **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (XsHandId)jarg4; 
  XsDataPacket_setGloveSnapshot(arg1,(XsGloveSnapshot const *)arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1gloveSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsGloveSnapshot *arg2 = (XsGloveSnapshot *) 0 ;
  XsHandId arg3 ;
  XsGloveSnapshot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsGloveSnapshot **)&jarg2; 
  arg3 = (XsHandId)jarg3; 
  result = (XsGloveSnapshot *)XsDataPacket_gloveSnapshot((XsDataPacket const *)arg1,arg2,arg3);
  *(XsGloveSnapshot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsGloveSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsHandId arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsHandId)jarg2; 
  result = (int)XsDataPacket_containsGloveSnapshot((XsDataPacket const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRawBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsByteArray *arg2 = (XsByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsByteArray **)&jarg2; 
  XsDataPacket_setRawBlob(arg1,(XsByteArray const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rawBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsByteArray *arg2 = (XsByteArray *) 0 ;
  XsByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsByteArray **)&jarg2; 
  result = (XsByteArray *)XsDataPacket_rawBlob((XsDataPacket const *)arg1,arg2);
  *(XsByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRawBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRawBlob((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1accelerationHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_accelerationHR((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsAccelerationHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsAccelerationHR((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setAccelerationHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setAccelerationHR(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacket_1rateOfTurnHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (XsVector *)XsDataPacket_rateOfTurnHR((XsDataPacket const *)arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1containsRateOfTurnHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)XsDataPacket_containsRateOfTurnHR((XsDataPacket const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacket_1setRateOfTurnHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsDataPacket_setRateOfTurnHR(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacket_1privateCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)XsDataPacket_privateCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDataPacketClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (XsDataPacket *)new XsDataPacket((XsMessage const *)arg1);
  *(XsDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDataPacketClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataPacket *)new XsDataPacket();
  *(XsDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDataPacketClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = 0 ;
  XsDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDataPacket const & reference is null");
    return 0;
  } 
  result = (XsDataPacket *)new XsDataPacket((XsDataPacket const &)*arg1);
  *(XsDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsDataPacketClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsDataPacket **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = 0 ;
  XsDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDataPacket const & reference is null");
    return 0;
  } 
  result = (XsDataPacket *) &(arg1)->operator =((XsDataPacket const &)*arg2);
  *(XsDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDataPacket & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1clear_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  (arg1)->clear(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1clear_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1deviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->deviceId();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1itemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint16_t)((XsDataPacket const *)arg1)->itemCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->setMessage((XsMessage const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1toMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMessage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->toMessage();
  *(XsMessage **)&jresult = new XsMessage((const XsMessage &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId arg2 ;
  XsDeviceId const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  argp2 = *(XsDeviceId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDeviceId const");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDeviceId(arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1dataFormat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (XsDataIdentifier)((XsDataPacket const *)arg1)->dataFormat(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawAcceleration();
  *(XsUShortVector **)&jresult = new XsUShortVector((const XsUShortVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawAccelerationConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawAccelerationConverted();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawAcceleration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsUShortVector const & reference is null");
    return ;
  } 
  (arg1)->setRawAcceleration((XsUShortVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawGyroscopeData();
  *(XsUShortVector **)&jresult = new XsUShortVector((const XsUShortVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawGyroscopeDataConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawGyroscopeDataConverted();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawGyroscopeData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsUShortVector const & reference is null");
    return ;
  } 
  (arg1)->setRawGyroscopeData((XsUShortVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawGyroscopeTemperatureData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawGyroscopeTemperatureData();
  *(XsUShortVector **)&jresult = new XsUShortVector((const XsUShortVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawGyroscopeTemperatureDataConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawGyroscopeTemperatureDataConverted();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawGyroscopeTemperatureData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawGyroscopeTemperatureData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawGyroscopeTemperatureData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsUShortVector const & reference is null");
    return ;
  } 
  (arg1)->setRawGyroscopeTemperatureData((XsUShortVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawMagneticField();
  *(XsUShortVector **)&jresult = new XsUShortVector((const XsUShortVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawMagneticFieldConverted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawMagneticFieldConverted();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawMagneticField();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsUShortVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsUShortVector const & reference is null");
    return ;
  } 
  (arg1)->setRawMagneticField((XsUShortVector const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1rawTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint16_t)((XsDataPacket const *)arg1)->rawTemperature();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawTemperature();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setRawTemperature(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsScrData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawData();
  *(XsScrData **)&jresult = new XsScrData((const XsScrData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsScrData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsScrData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsScrData const & reference is null");
    return ;
  } 
  (arg1)->setRawData((XsScrData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1velocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->velocityIncrement();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsVelocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsVelocityIncrement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setVelocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setVelocityIncrement((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1calibratedAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->calibratedAcceleration();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsCalibratedAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsCalibratedAcceleration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setCalibratedAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setCalibratedAcceleration((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1orientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->orientationIncrement();
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsOrientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsOrientationIncrement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setOrientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return ;
  } 
  (arg1)->setOrientationIncrement((XsQuaternion const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1calibratedGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->calibratedGyroscopeData();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsCalibratedGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsCalibratedGyroscopeData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setCalibratedGyroscopeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setCalibratedGyroscopeData((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1calibratedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->calibratedMagneticField();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsCalibratedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsCalibratedMagneticField();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setCalibratedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setCalibratedMagneticField((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1correctedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->correctedMagneticField();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsCorrectedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsCorrectedMagneticField();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setCorrectedMagneticField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setCorrectedMagneticField((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1calibratedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsCalibratedData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->calibratedData();
  *(XsCalibratedData **)&jresult = new XsCalibratedData((const XsCalibratedData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsCalibratedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsCalibratedData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setCalibratedData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsCalibratedData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsCalibratedData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsCalibratedData const & reference is null");
    return ;
  } 
  (arg1)->setCalibratedData((XsCalibratedData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1orientationQuaternion_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = ((XsDataPacket const *)arg1)->orientationQuaternion(arg2);
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1orientationQuaternion_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->orientationQuaternion();
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setOrientationQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return ;
  } 
  arg3 = (XsDataIdentifier)jarg3; 
  (arg1)->setOrientationQuaternion((XsQuaternion const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1orientationEuler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsEuler result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = ((XsDataPacket const *)arg1)->orientationEuler(arg2);
  *(XsEuler **)&jresult = new XsEuler((const XsEuler &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1orientationEuler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsEuler result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->orientationEuler();
  *(XsEuler **)&jresult = new XsEuler((const XsEuler &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setOrientationEuler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsEuler *arg2 = 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return ;
  } 
  arg3 = (XsDataIdentifier)jarg3; 
  (arg1)->setOrientationEuler((XsEuler const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1orientationMatrix_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = ((XsDataPacket const *)arg1)->orientationMatrix(arg2);
  *(XsMatrix **)&jresult = new XsMatrix((const XsMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1orientationMatrix_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->orientationMatrix();
  *(XsMatrix **)&jresult = new XsMatrix((const XsMatrix &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setOrientationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsMatrix *arg2 = 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return ;
  } 
  arg3 = (XsDataIdentifier)jarg3; 
  (arg1)->setOrientationMatrix((XsMatrix const &)*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsOrientation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1orientationIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)((XsDataPacket const *)arg1)->orientationIdentifier();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1coordinateSystemOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)((XsDataPacket const *)arg1)->coordinateSystemOrientation();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1sdiData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSdiData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->sdiData();
  *(XsSdiData **)&jresult = new XsSdiData((const XsSdiData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsSdiData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsSdiData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setSdiData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSdiData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSdiData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSdiData const & reference is null");
    return ;
  } 
  (arg1)->setSdiData((XsSdiData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1gloveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsHandId arg2 ;
  XsGloveData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsHandId)jarg2; 
  result = ((XsDataPacket const *)arg1)->gloveData(arg2);
  *(XsGloveData **)&jresult = new XsGloveData((const XsGloveData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsGloveData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsHandId arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsHandId)jarg2; 
  result = (bool)((XsDataPacket const *)arg1)->containsGloveData(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsGloveData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsGloveData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setGloveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsGloveData *arg2 = 0 ;
  XsHandId arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData const & reference is null");
    return ;
  } 
  arg3 = (XsHandId)jarg3; 
  (arg1)->setGloveData((XsGloveData const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1storedDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->storedDeviceId();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsStoredDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsStoredDeviceId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setStoredDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return ;
  } 
  (arg1)->setStoredDeviceId((XsDeviceId const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1storedLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint16_t)((XsDataPacket const *)arg1)->storedLocationId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsStoredLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsStoredLocationId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setStoredLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setStoredLocationId(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)((XsDataPacket const *)arg1)->status();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsStatus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsDetailedStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsDetailedStatus();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setStatus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setStatus(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setStatusByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setStatusByte(arg2);
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsDataPacketClass_1packetCounter8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint8_t)((XsDataPacket const *)arg1)->packetCounter8();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsPacketCounter8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsPacketCounter8();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setPacketCounter8(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setPacketCounter8(arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1packetCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint16_t)((XsDataPacket const *)arg1)->packetCounter();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsPacketCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsPacketCounter();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setPacketCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setPacketCounter(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1sampleTimeFine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)((XsDataPacket const *)arg1)->sampleTimeFine();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsSampleTimeFine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsSampleTimeFine();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setSampleTimeFine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setSampleTimeFine(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1sampleTimeCoarse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)((XsDataPacket const *)arg1)->sampleTimeCoarse();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsSampleTimeCoarse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsSampleTimeCoarse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setSampleTimeCoarse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setSampleTimeCoarse(arg2);
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsDataPacketClass_1sampleTime64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint64_t)((XsDataPacket const *)arg1)->sampleTime64();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsSampleTime64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsSampleTime64();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setSampleTime64(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setSampleTime64(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1freeAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->freeAcceleration();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsFreeAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsFreeAcceleration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setFreeAcceleration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setFreeAcceleration((XsVector const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDataPacketClass_1temperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (double)((XsDataPacket const *)arg1)->temperature();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsTemperature();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setTemperature(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setTemperature(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1pressure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsPressure result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->pressure();
  *(XsPressure **)&jresult = new XsPressure((const XsPressure &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsPressure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsPressure();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsPressureAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsPressureAge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setPressure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsPressure *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsPressure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPressure const & reference is null");
    return ;
  } 
  (arg1)->setPressure((XsPressure const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1analogIn1Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->analogIn1Data();
  *(XsAnalogInData **)&jresult = new XsAnalogInData((const XsAnalogInData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsAnalogIn1Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsAnalogIn1Data();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setAnalogIn1Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsAnalogInData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsAnalogInData const & reference is null");
    return ;
  } 
  (arg1)->setAnalogIn1Data((XsAnalogInData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1analogIn2Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->analogIn2Data();
  *(XsAnalogInData **)&jresult = new XsAnalogInData((const XsAnalogInData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsAnalogIn2Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsAnalogIn2Data();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setAnalogIn2Data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsAnalogInData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsAnalogInData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsAnalogInData const & reference is null");
    return ;
  } 
  (arg1)->setAnalogIn2Data((XsAnalogInData const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1positionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->positionLLA();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsPositionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsPositionLLA();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setPositionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setPositionLLA((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1latitudeLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->latitudeLongitude();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsLatitudeLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsLatitudeLongitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setLatitudeLongitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setLatitudeLongitude((XsVector const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDataPacketClass_1altitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (double)((XsDataPacket const *)arg1)->altitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsAltitude();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setAltitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAltitude(arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDataPacketClass_1altitudeMsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (double)((XsDataPacket const *)arg1)->altitudeMsl();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsAltitudeMsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsAltitudeMsl();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setAltitudeMsl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAltitudeMsl(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1velocity_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = ((XsDataPacket const *)arg1)->velocity(arg2);
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1velocity_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->velocity();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsVelocity();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  XsDataIdentifier arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  arg3 = (XsDataIdentifier)jarg3; 
  (arg1)->setVelocity((XsVector const &)*arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1velocityIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)((XsDataPacket const *)arg1)->velocityIdentifier();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1coordinateSystemVelocity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDataIdentifier)((XsDataPacket const *)arg1)->coordinateSystemVelocity();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1utcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->utcTime();
  *(XsTimeInfo **)&jresult = new XsTimeInfo((const XsTimeInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsUtcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsUtcTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setUtcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeInfo const & reference is null");
    return ;
  } 
  (arg1)->setUtcTime((XsTimeInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1frameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRange result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->frameRange();
  *(XsRange **)&jresult = new XsRange((const XsRange &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsFrameRange();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setFrameRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRange *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRange **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRange const & reference is null");
    return ;
  } 
  (arg1)->setFrameRange((XsRange const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDataPacketClass_1rssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int)((XsDataPacket const *)arg1)->rssi();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRssi();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setRssi(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawGnssPvtData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssPvtData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawGnssPvtData();
  *(XsRawGnssPvtData **)&jresult = new XsRawGnssPvtData((const XsRawGnssPvtData &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawGnssPvtData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawGnssPvtData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawGnssPvtData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssPvtData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRawGnssPvtData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRawGnssPvtData const & reference is null");
    return ;
  } 
  (arg1)->setRawGnssPvtData((XsRawGnssPvtData const &)*arg2);
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsDataPacketClass_1gnssAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint8_t)((XsDataPacket const *)arg1)->gnssAge();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsGnssAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsGnssAge();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setGnssAge(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setGnssAge(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawGnssSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssSatInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawGnssSatInfo();
  *(XsRawGnssSatInfo **)&jresult = new XsRawGnssSatInfo((const XsRawGnssSatInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawGnssSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawGnssSatInfo();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawGnssSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsRawGnssSatInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsRawGnssSatInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRawGnssSatInfo const & reference is null");
    return ;
  } 
  (arg1)->setRawGnssSatInfo((XsRawGnssSatInfo const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1gnssPvtPulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (uint32_t)((XsDataPacket const *)arg1)->gnssPvtPulse();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsGnssPvtPulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsGnssPvtPulse();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setGnssPvtPulse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setGnssPvtPulse(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1fullSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->fullSnapshot();
  *(XsSnapshot **)&jresult = new XsSnapshot((const XsSnapshot &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsFullSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsFullSnapshot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setFullSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSnapshot **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSnapshot const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setFullSnapshot((XsSnapshot const &)*arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1awindaSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->awindaSnapshot();
  *(XsSnapshot **)&jresult = new XsSnapshot((const XsSnapshot &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsAwindaSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsAwindaSnapshot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setAwindaSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsSnapshot *arg2 = 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsSnapshot **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSnapshot const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  (arg1)->setAwindaSnapshot((XsSnapshot const &)*arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1isAwindaSnapshotARetransmission(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->isAwindaSnapshotARetransmission();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1gloveSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsHandId arg2 ;
  XsGloveSnapshot result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsHandId)jarg2; 
  result = ((XsDataPacket const *)arg1)->gloveSnapshot(arg2);
  *(XsGloveSnapshot **)&jresult = new XsGloveSnapshot((const XsGloveSnapshot &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsGloveSnapshot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsHandId arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsHandId)jarg2; 
  result = (bool)((XsDataPacket const *)arg1)->containsGloveSnapshot(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsGloveSnapshot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsGloveSnapshot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setGloveSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsGloveSnapshot *arg2 = 0 ;
  bool arg3 ;
  XsHandId arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsGloveSnapshot **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveSnapshot const & reference is null");
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (XsHandId)jarg4; 
  (arg1)->setGloveSnapshot((XsGloveSnapshot const &)*arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1merge_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = 0 ;
  bool arg3 ;
  XsDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDataPacket const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (XsDataPacket *) &(arg1)->merge((XsDataPacket const &)*arg2,arg3);
  *(XsDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1merge_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataPacket *arg2 = 0 ;
  XsDataPacket *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDataPacket const & reference is null");
    return 0;
  } 
  result = (XsDataPacket *) &(arg1)->merge((XsDataPacket const &)*arg2);
  *(XsDataPacket **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setTimeOfArrival(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return ;
  } 
  (arg1)->setTimeOfArrival((XsTimeStamp const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1timeOfArrival(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->timeOfArrival();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setEstimatedTimeOfSampling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return ;
  } 
  (arg1)->setEstimatedTimeOfSampling((XsTimeStamp const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1estimatedTimeOfSampling(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->estimatedTimeOfSampling();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setPacketId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->setPacketId(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1packetId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int64_t)((XsDataPacket const *)arg1)->packetId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setTriggerIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsTriggerIndicationData *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(XsTriggerIndicationData **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTriggerIndicationData const & reference is null");
    return ;
  } 
  (arg1)->setTriggerIndication(arg2,(XsTriggerIndicationData const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsTriggerIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (bool)((XsDataPacket const *)arg1)->containsTriggerIndication(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1triggerIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDataIdentifier arg2 ;
  XsTriggerIndicationData result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (arg1)->triggerIndication(arg2);
  *(XsTriggerIndicationData **)&jresult = new XsTriggerIndicationData((const XsTriggerIndicationData &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rawBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsByteArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rawBlob();
  *(XsByteArray **)&jresult = new XsByteArray((const XsByteArray &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRawBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRawBlob();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRawBlob(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsByteArray *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsByteArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsByteArray const & reference is null");
    return ;
  } 
  (arg1)->setRawBlob((XsByteArray const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1accelerationHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->accelerationHR();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsAccelerationHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsAccelerationHR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setAccelerationHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setAccelerationHR((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1rateOfTurnHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->rateOfTurnHR();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDataPacketClass_1containsRateOfTurnHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (bool)((XsDataPacket const *)arg1)->containsRateOfTurnHR();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1setRateOfTurnHR(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setRateOfTurnHR((XsVector const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1simplifiedContents(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  std::map< XsDataIdentifier,void * > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = ((XsDataPacket const *)arg1)->simplifiedContents();
  *(std::map< XsDataIdentifier,void * > **)&jresult = new std::map< XsDataIdentifier,void * >((const std::map< XsDataIdentifier,void * > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1d_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  DataPacketPrivate *arg2 = (DataPacketPrivate *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(DataPacketPrivate **)&jarg2; 
  if (arg1) (arg1)->d = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1d_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  DataPacketPrivate *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (DataPacketPrivate *) ((arg1)->d);
  *(DataPacketPrivate **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1m_1deviceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  if (arg1) (arg1)->m_deviceId = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1m_1deviceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsDeviceId *)& ((arg1)->m_deviceId);
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1m_1toa_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  if (arg1) (arg1)->m_toa = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1m_1toa_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsTimeStamp *)& ((arg1)->m_toa);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1m_1packetId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  if (arg1) (arg1)->m_packetId = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1m_1packetId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (int64_t) ((arg1)->m_packetId);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDataPacketClass_1m_1etos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDataPacket **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  if (arg1) (arg1)->m_etos = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDataPacketClass_1m_1etos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDataPacket *arg1 = (XsDataPacket *) 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDataPacket **)&jarg1; 
  result = (XsTimeStamp *)& ((arg1)->m_etos);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_B230400_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0010003);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_B460800_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0010004);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_B921600_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0010007);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_1Invalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_Invalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_14800_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_4800;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_19600_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_9600;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_119k2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_19k2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_138k4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_38k4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_157k6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_57k6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_1115k2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_115k2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_1230k4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_230k4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_1460k8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_460k8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_1921k6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_921k6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_12000k_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_2000k;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_13500k_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_3500k;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XBR_14000k_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  result = (XsBaudRate)XBR_4000k;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCalibratedData_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsReal *arg4 = (XsReal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  arg2 = *(XsReal **)&jarg2; 
  arg3 = *(XsReal **)&jarg3; 
  arg4 = *(XsReal **)&jarg4; 
  XsCalibratedData_construct(arg1,(XsReal const *)arg2,(XsReal const *)arg3,(XsReal const *)arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCalibratedData_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  XsCalibratedData_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCalibratedData_1m_1acc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsVector3 *arg2 = (XsVector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  arg2 = *(XsVector3 **)&jarg2; 
  if (arg1) (arg1)->m_acc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsCalibratedData_1m_1acc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  result = (XsVector3 *)& ((arg1)->m_acc);
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCalibratedData_1m_1gyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsVector3 *arg2 = (XsVector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  arg2 = *(XsVector3 **)&jarg2; 
  if (arg1) (arg1)->m_gyr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsCalibratedData_1m_1gyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  result = (XsVector3 *)& ((arg1)->m_gyr);
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCalibratedData_1m_1mag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsVector3 *arg2 = (XsVector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  arg2 = *(XsVector3 **)&jarg2; 
  if (arg1) (arg1)->m_mag = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsCalibratedData_1m_1mag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  result = (XsVector3 *)& ((arg1)->m_mag);
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsCalibratedData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsCalibratedData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsCalibratedData *)new XsCalibratedData();
  *(XsCalibratedData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsCalibratedData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsCalibratedData *arg1 = 0 ;
  XsCalibratedData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCalibratedData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsCalibratedData const & reference is null");
    return 0;
  } 
  result = (XsCalibratedData *)new XsCalibratedData((XsCalibratedData const &)*arg1);
  *(XsCalibratedData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsCalibratedData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsCalibratedData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsCalibratedData_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsCalibratedData *arg1 = (XsCalibratedData *) 0 ;
  XsCalibratedData *arg2 = 0 ;
  XsCalibratedData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsCalibratedData **)&jarg1; 
  arg2 = *(XsCalibratedData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsCalibratedData const & reference is null");
    return 0;
  } 
  result = (XsCalibratedData *) &(arg1)->operator =((XsCalibratedData const &)*arg2);
  *(XsCalibratedData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1TypeMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_TypeMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1FullTypeMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_FullTypeMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1FullMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_FullMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1FormatMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_FormatMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1DataFormatMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_DataFormatMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SubFormatMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SubFormatMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SubFormatFloat_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SubFormatFloat;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SubFormatFp1220_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SubFormatFp1220;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SubFormatFp1632_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SubFormatFp1632;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SubFormatDouble_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SubFormatDouble;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SubFormatLeft_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SubFormatLeft;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SubFormatRight_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SubFormatRight;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1TemperatureGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_TemperatureGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1Temperature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_Temperature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1TimestampGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_TimestampGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1UtcTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_UtcTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1PacketCounter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_PacketCounter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1Itow_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_Itow;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GnssAge_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GnssAge;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1PressureAge_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_PressureAge;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SampleTimeFine_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SampleTimeFine;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SampleTimeCoarse_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SampleTimeCoarse;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1FrameRange_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_FrameRange;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1PacketCounter8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_PacketCounter8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SampleTime64_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SampleTime64;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1OrientationGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_OrientationGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1CoordSysMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_CoordSysMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1CoordSysEnu_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_CoordSysEnu;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1CoordSysNed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_CoordSysNed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1CoordSysNwu_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_CoordSysNwu;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1Quaternion_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_Quaternion;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RotationMatrix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RotationMatrix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1EulerAngles_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_EulerAngles;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1PressureGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_PressureGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1BaroPressure_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_BaroPressure;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AccelerationGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AccelerationGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1DeltaV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_DeltaV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1Acceleration_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_Acceleration;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1FreeAcceleration_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_FreeAcceleration;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AccelerationHR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AccelerationHR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1IndicationGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_IndicationGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1TriggerIn1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_TriggerIn1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1TriggerIn2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_TriggerIn2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1TriggerIn3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_TriggerIn3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1PositionGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_PositionGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AltitudeMsl_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AltitudeMsl;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AltitudeEllipsoid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AltitudeEllipsoid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1PositionEcef_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_PositionEcef;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1LatLon_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_LatLon;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GnssGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GnssGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GnssPvtData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GnssPvtData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GnssSatInfo_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GnssSatInfo;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GnssPvtPulse_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GnssPvtPulse;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AngularVelocityGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AngularVelocityGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RateOfTurn_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RateOfTurn;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1DeltaQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_DeltaQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RateOfTurnHR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RateOfTurnHR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawSensorGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawSensorGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawUnsigned_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawUnsigned;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawSigned_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawSigned;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawAccGyrMagTemp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawAccGyrMagTemp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawGyroTemp_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawGyroTemp;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawAcc_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawAcc;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawGyr_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawGyr;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawMag_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawMag;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawDeltaQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawDeltaQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawDeltaV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawDeltaV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RawBlob_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RawBlob;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AnalogInGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AnalogInGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AnalogIn1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AnalogIn1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AnalogIn2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AnalogIn2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1MagneticGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_MagneticGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1MagneticField_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_MagneticField;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1MagneticFieldCorrected_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_MagneticFieldCorrected;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1SnapshotGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_SnapshotGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RetransmissionMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RetransmissionMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1RetransmissionFlag_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_RetransmissionFlag;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1AwindaSnapshot_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_AwindaSnapshot;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1FullSnapshot_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_FullSnapshot;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GloveSnapshotLeft_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GloveSnapshotLeft;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GloveSnapshotRight_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GloveSnapshotRight;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GloveDataGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GloveDataGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GloveDataLeft_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GloveDataLeft;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1GloveDataRight_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_GloveDataRight;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1VelocityGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_VelocityGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1VelocityXYZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_VelocityXYZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1StatusGroup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_StatusGroup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1StatusByte_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_StatusByte;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1StatusWord_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_StatusWord;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1Rssi_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_Rssi;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1DeviceId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_DeviceId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDI_1LocationId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDataIdentifier)XDI_LocationId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opOr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsDataIdentifier arg1 ;
  XsDataIdentifier arg2 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDataIdentifier)jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (XsDataIdentifier)operator |(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opAnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsDataIdentifier arg1 ;
  XsDataIdentifier arg2 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDataIdentifier)jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (XsDataIdentifier)operator &(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opNot_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  XsDataIdentifier arg1 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDataIdentifier)jarg1; 
  result = (XsDataIdentifier)operator ~(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsEuler_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsEuler *arg1 = (XsEuler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  XsEuler_destruct(arg1);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsEuler_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = (int)XsEuler_empty((XsEuler const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsEuler_1fromQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsEuler **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  XsEuler_fromQuaternion(arg1,(XsQuaternion const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsEulerClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsEuler *)new XsEuler();
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsEulerClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsReal arg2 ;
  XsReal arg3 ;
  XsReal *argp1 ;
  XsReal *argp2 ;
  XsReal *argp3 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsEuler *)new XsEuler(arg1,arg2,arg3);
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsEulerClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = 0 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return 0;
  } 
  result = (XsEuler *)new XsEuler((XsEuler const &)*arg1);
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsEulerClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = 0 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (XsEuler *)new XsEuler((XsVector const &)*arg1);
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsEulerClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (XsEuler *)new XsEuler((XsQuaternion const &)*arg1);
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsEuler *arg2 = 0 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsEuler **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return 0;
  } 
  result = (XsEuler *) &(arg1)->operator =((XsEuler const &)*arg2);
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1opSquareBracket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsEuler const *)arg1)->operator [](arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsEulerClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = (bool)((XsEuler const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = (XsReal *)((XsEuler const *)arg1)->data();
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1fromQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsEuler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsEuler **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (XsEuler *) &(arg1)->fromQuaternion((XsQuaternion const &)*arg2);
  *(XsEuler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsEulerClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsEuler *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsEuler **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return 0;
  } 
  result = (bool)((XsEuler const *)arg1)->operator ==((XsEuler const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsEulerClass_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsEuler *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsEuler **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return 0;
  } 
  result = (bool)((XsEuler const *)arg1)->operator !=((XsEuler const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1roll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = ((XsEuler const *)arg1)->roll();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1pitch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = ((XsEuler const *)arg1)->pitch();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1yaw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = ((XsEuler const *)arg1)->yaw();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1x(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = ((XsEuler const *)arg1)->x();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1y(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = ((XsEuler const *)arg1)->y();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsEulerClass_1z(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsEuler **)&jarg1; 
  result = ((XsEuler const *)arg1)->z();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsEulerClass_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  XsEuler *arg1 = (XsEuler *) 0 ;
  XsEuler *arg2 = 0 ;
  XsReal arg3 ;
  XsReal *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsEuler **)&jarg1; 
  arg2 = *(XsEuler **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsEuler const & reference is null");
    return 0;
  } 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((XsEuler const *)arg1)->isEqual((XsEuler const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsEulerClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsEuler *arg1 = (XsEuler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsEuler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsReal *arg5 = (XsReal *) 0 ;
  XsDataFlags arg6 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  XsDataFlags *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  arg5 = *(XsReal **)&jarg5; 
  argp6 = *(XsDataFlags **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return ;
  }
  arg6 = *argp6; 
  XsMatrix_ref(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsReal *arg5 = (XsReal *) 0 ;
  XsSize arg6 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  XsSize *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  arg5 = *(XsReal **)&jarg5; 
  argp6 = *(XsSize **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg6 = *argp6; 
  XsMatrix_construct(arg1,arg2,arg3,arg4,(XsReal const *)arg5,arg6);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsReal *arg5 = (XsReal *) 0 ;
  XsSize arg6 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  XsSize *argp6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  arg5 = *(XsReal **)&jarg5; 
  argp6 = *(XsSize **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg6 = *argp6; 
  XsMatrix_assign(arg1,arg2,arg3,arg4,(XsReal const *)arg5,arg6);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  XsMatrix_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsMatrix *arg2 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2; 
  XsMatrix_copy(arg1,(XsMatrix const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1setZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  XsMatrix_setZero(arg1);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMatrix_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (int)XsMatrix_empty((XsMatrix const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1multiplyScalar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsReal arg2 ;
  XsMatrix *arg3 = (XsMatrix *) 0 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsMatrix **)&jarg3; 
  XsMatrix_multiplyScalar((XsMatrix const *)arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrix_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = XsMatrix_offset((XsMatrix const *)arg1,arg2,arg3);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrix_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = XsMatrix_value((XsMatrix const *)arg1,arg2,arg3);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsReal arg4 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsReal *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsReal **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg4 = *argp4; 
  XsMatrix_setValue(arg1,arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMatrix_1dimensionsMatch(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jint jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)XsMatrix_dimensionsMatch((XsMatrix const *)arg1,arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1fromQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsQuaternion *arg2 = (XsQuaternion *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2; 
  XsMatrix_fromQuaternion(arg1,(XsQuaternion const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrix_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsMatrix *arg2 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2; 
  XsMatrix_swap(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (XsReal *)(XsReal *) ((arg1)->m_data);
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1m_1rows_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (XsSize) ((arg1)->m_rows);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1m_1cols_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (XsSize) ((arg1)->m_cols);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1m_1stride_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (XsSize) ((arg1)->m_stride);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (XsSize) ((arg1)->m_flags);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = ((XsMatrix const *)arg1)->flags();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsReal *arg4 = (XsReal *) 0 ;
  XsSize *argp1 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(XsReal **)&jarg4; 
  result = (XsMatrix *)new XsMatrix(arg1,arg2,arg3,(XsReal const *)arg4);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp1 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsMatrix *)new XsMatrix(arg1,arg2,arg3);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize arg2 ;
  XsSize *argp1 ;
  XsSize *argp2 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsMatrix *)new XsMatrix(arg1,arg2);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize *argp1 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  result = (XsMatrix *)new XsMatrix(arg1);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMatrix *)new XsMatrix();
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = 0 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = (XsMatrix *)new XsMatrix((XsMatrix const &)*arg1);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  XsReal *arg1 = (XsReal *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsDataFlags arg5 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  XsDataFlags *argp5 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsReal **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(XsDataFlags **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg5 = *argp5; 
  result = (XsMatrix *)new XsMatrix(arg1,arg2,arg3,arg4,arg5);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize arg5 ;
  XsDataFlags arg6 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  XsSize *argp5 ;
  XsDataFlags *argp6 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  arg2 = *(XsReal **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg4 = *argp4; 
  argp5 = *(XsSize **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg5 = *argp5; 
  argp6 = *(XsDataFlags **)&jarg6; 
  if (!argp6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg6 = *argp6; 
  result = (XsMatrix *)new XsMatrix((XsMatrix const &)*arg1,arg2,arg3,arg4,arg5,arg6);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMatrixClass_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (XsMatrix *)new XsMatrix((XsQuaternion const &)*arg1);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMatrixClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMatrix **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrixClass_1setSize_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setSize(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrixClass_1setSize_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setSize(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsMatrix *arg2 = 0 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = (XsMatrix *) &(arg1)->operator =((XsMatrix const &)*arg2);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsMatrixClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (bool)((XsMatrix const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrixClass_1setZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  (arg1)->setZero();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1offset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = ((XsMatrix const *)arg1)->offset(arg2,arg3);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = ((XsMatrix const *)arg1)->value(arg2,arg3);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrixClass_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsReal arg4 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsReal *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsReal **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setValue(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1opSquareBracket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsReal *)((XsMatrix const *)arg1)->operator [](arg2);
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1opMult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  XsMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsMatrix const *)arg1)->operator *(arg2);
  *(XsMatrix **)&jresult = new XsMatrix((const XsMatrix &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1fromQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsMatrix *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (XsMatrix *) &(arg1)->fromQuaternion((XsQuaternion const &)*arg2);
  *(XsMatrix **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrixClass_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  (arg1)->zero();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1rows(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = ((XsMatrix const *)arg1)->rows();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1cols(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = ((XsMatrix const *)arg1)->cols();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1stride(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = ((XsMatrix const *)arg1)->stride();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMatrixClass_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMatrix **)&jarg1; 
  result = (XsReal *)((XsMatrix const *)arg1)->data();
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsMatrixClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsMatrix *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = (bool)((XsMatrix const *)arg1)->operator ==((XsMatrix const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsMatrixClass_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsMatrix *arg2 = 0 ;
  XsReal arg3 ;
  XsReal *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((XsMatrix const *)arg1)->isEqual((XsMatrix const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMatrixClass_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMatrix *arg1 = (XsMatrix *) 0 ;
  XsMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_swap_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMatrix *arg1 = 0 ;
  XsMatrix *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMatrix **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix & reference is null");
    return ;
  } 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix & reference is null");
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_opMult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsMatrix *arg2 = 0 ;
  XsReal *argp1 ;
  XsMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = operator *(arg1,(XsMatrix const &)*arg2);
  *(XsMatrix **)&jresult = new XsMatrix((const XsMatrix &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  XsMessage_construct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1constructSized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  XsMessage_constructSized(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1copyConstruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessage *arg2 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2; 
  XsMessage_copyConstruct(arg1,(XsMessage const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  XsMessage_assign(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1load(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  unsigned char *arg3 = (unsigned char *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(unsigned char **)&jarg3; 
  XsMessage_load(arg1,arg2,(unsigned char const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  XsMessage_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessage *arg2 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2; 
  XsMessage_copy(arg1,(XsMessage const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessage *arg2 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2; 
  XsMessage_swap(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1dataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = XsMessage_dataSize((XsMessage const *)arg1);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1constData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint8_t *)XsMessage_constData((XsMessage const *)arg1,arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1getMessageStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint8_t *)XsMessage_getMessageStart((XsMessage const *)arg1);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1getTotalMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = XsMessage_getTotalMessageSize((XsMessage const *)arg1);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessage_1getDataByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint8_t)XsMessage_getDataByte((XsMessage const *)arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessage_1getDataShort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint16_t)XsMessage_getDataShort((XsMessage const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1getDataLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint32_t)XsMessage_getDataLong((XsMessage const *)arg1,arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsMessage_1getDataLongLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jobject jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint64_t)XsMessage_getDataLongLong((XsMessage const *)arg1,arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_minimalJNI_XsMessage_1getDataFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (float)XsMessage_getDataFloat((XsMessage const *)arg1,arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessage_1getDataDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)XsMessage_getDataDouble((XsMessage const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessage_1getDataF1220(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)XsMessage_getDataF1220((XsMessage const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessage_1getDataFP1632(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)XsMessage_getDataFP1632((XsMessage const *)arg1,arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1getDataBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint8_t *)XsMessage_getDataBuffer((XsMessage const *)arg1,arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataByte(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataByte(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataShort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint16_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataShort(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint32_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataLong(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataLongLong(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint64_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataLongLong(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  float arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (float)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataFloat(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataDouble(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataF1220(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataF1220(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataFP1632(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_setDataFP1632(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  XsMessage_setDataBuffer(arg1,(unsigned char const *)arg2,arg3,arg4);
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessage_1computeChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint8_t)XsMessage_computeChecksum((XsMessage const *)arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1recomputeChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  XsMessage_recomputeChecksum(arg1);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessage_1isChecksumOk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (int)XsMessage_isChecksumOk((XsMessage const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1getHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessageHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (XsMessageHeader *)XsMessage_getHeader(arg1);
  *(XsMessageHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessage_1getConstHeader(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessageHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (XsMessageHeader *)XsMessage_getConstHeader((XsMessage const *)arg1);
  *(XsMessageHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessage_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (int)XsMessage_empty((XsMessage const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1resizeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  XsMessage_resizeData(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setBusId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  XsMessage_setBusId(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setMessageId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsXbusMessageId arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsXbusMessageId)jarg2; 
  XsMessage_setMessageId(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1insertData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_insertData(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1deleteData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsMessage_deleteData(arg1,arg2,arg3);
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessage_1getFPValueSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jshort jresult = 0 ;
  XsDataIdentifier arg1 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDataIdentifier)jarg1; 
  result = (uint8_t)XsMessage_getFPValueSize(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1getDataFPValuesById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  XsSize arg4 ;
  XsSize arg5 ;
  XsSize *argp4 ;
  XsSize *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(XsSize **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg5 = *argp5; 
  XsMessage_getDataFPValuesById((XsMessage const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataFPValuesById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  XsSize arg4 ;
  XsSize arg5 ;
  XsSize *argp4 ;
  XsSize *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(XsSize **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg5 = *argp5; 
  XsMessage_setDataFPValuesById(arg1,arg2,(double const *)arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1getDataRealValuesById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsSize arg4 ;
  XsSize arg5 ;
  XsSize *argp4 ;
  XsSize *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(XsReal **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(XsSize **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg5 = *argp5; 
  XsMessage_getDataRealValuesById((XsMessage const *)arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setDataRealValuesById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsSize arg4 ;
  XsSize arg5 ;
  XsSize *argp4 ;
  XsSize *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(XsReal **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(XsSize **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg5 = *argp5; 
  XsMessage_setDataRealValuesById(arg1,arg2,(XsReal const *)arg3,arg4,arg5);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessage_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessage *arg2 = (XsMessage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2; 
  result = (int)XsMessage_compare((XsMessage const *)arg1,(XsMessage const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1toHexString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsString *arg3 = (XsString *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsString **)&jarg3; 
  XsMessage_toHexString((XsMessage const *)arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1getEndianCorrectData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  void *arg2 = (void *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  XsMessage_getEndianCorrectData((XsMessage const *)arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessage_1setEndianCorrectData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  void *arg2 = (void *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  XsMessage_setEndianCorrectData(arg1,(void const *)arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1PREAMBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xFA);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1EXTLENCODE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0xFF);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1MSGHEADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1MSGEXTHEADER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1MSGHEADERCS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1MSGEXTHEADERCS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1CHECKSUM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1UNSIGSHORT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1UNSIGINT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1FLOAT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAXDATALEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((8192-7));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAXSHORTDATALEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(254);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAXMSGLEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(((8192-7) +7));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAXSHORTMSGLEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((254+5));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAXGARBAGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((((8192-7) +7) +1));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1m_1preamble_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_preamble = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageHeader_1m_1preamble_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  result = (uint8_t) ((arg1)->m_preamble);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1m_1busId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_busId = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageHeader_1m_1busId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  result = (uint8_t) ((arg1)->m_busId);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1m_1messageId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_messageId = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageHeader_1m_1messageId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  result = (uint8_t) ((arg1)->m_messageId);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1m_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_length = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageHeader_1m_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  result = (uint8_t) ((arg1)->m_length);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1ExtendedParts_1m_1high_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *arg1 = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_high = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1ExtendedParts_1m_1high_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *arg1 = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jarg1; 
  result = (uint8_t) ((arg1)->m_high);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1ExtendedParts_1m_1low_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *arg1 = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_low = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1ExtendedParts_1m_1low_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *arg1 = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jarg1; 
  result = (uint8_t) ((arg1)->m_low);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageHeader_1LengthData_1ExtendedLength_1ExtendedParts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *)new XsMessageHeader::LengthData::ExtendedLength::ExtendedParts();
  *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMessageHeader_1LengthData_1ExtendedLength_1ExtendedParts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *arg1 = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1m_1length_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMessageHeader::LengthData::ExtendedLength *arg1 = (XsMessageHeader::LengthData::ExtendedLength *) 0 ;
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *arg2 = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength **)&jarg1; 
  arg2 = *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jarg2; 
  if (arg1) (arg1)->m_length = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1m_1length_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessageHeader::LengthData::ExtendedLength *arg1 = (XsMessageHeader::LengthData::ExtendedLength *) 0 ;
  XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength **)&jarg1; 
  result = (XsMessageHeader::LengthData::ExtendedLength::ExtendedParts *)& ((arg1)->m_length);
  *(XsMessageHeader::LengthData::ExtendedLength::ExtendedParts **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1m_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessageHeader::LengthData::ExtendedLength *arg1 = (XsMessageHeader::LengthData::ExtendedLength *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_data;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1ExtendedLength_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessageHeader::LengthData::ExtendedLength *arg1 = (XsMessageHeader::LengthData::ExtendedLength *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageHeader_1LengthData_1ExtendedLength(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMessageHeader::LengthData::ExtendedLength *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMessageHeader::LengthData::ExtendedLength *)new XsMessageHeader::LengthData::ExtendedLength();
  *(XsMessageHeader::LengthData::ExtendedLength **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMessageHeader_1LengthData_1ExtendedLength(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMessageHeader::LengthData::ExtendedLength *arg1 = (XsMessageHeader::LengthData::ExtendedLength *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMessageHeader::LengthData::ExtendedLength **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1m_1extended_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMessageHeader::LengthData *arg1 = (XsMessageHeader::LengthData *) 0 ;
  XsMessageHeader::LengthData::ExtendedLength *arg2 = (XsMessageHeader::LengthData::ExtendedLength *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessageHeader::LengthData **)&jarg1; 
  arg2 = *(XsMessageHeader::LengthData::ExtendedLength **)&jarg2; 
  if (arg1) (arg1)->m_extended = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1m_1extended_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessageHeader::LengthData *arg1 = (XsMessageHeader::LengthData *) 0 ;
  XsMessageHeader::LengthData::ExtendedLength *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData **)&jarg1; 
  result = (XsMessageHeader::LengthData::ExtendedLength *)& ((arg1)->m_extended);
  *(XsMessageHeader::LengthData::ExtendedLength **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1m_1data_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessageHeader::LengthData *arg1 = (XsMessageHeader::LengthData *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_data;
    for (ii = 0; ii < (size_t)1; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageHeader_1LengthData_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessageHeader::LengthData *arg1 = (XsMessageHeader::LengthData *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader::LengthData **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_data);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageHeader_1LengthData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMessageHeader::LengthData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMessageHeader::LengthData *)new XsMessageHeader::LengthData();
  *(XsMessageHeader::LengthData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMessageHeader_1LengthData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMessageHeader::LengthData *arg1 = (XsMessageHeader::LengthData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMessageHeader::LengthData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageHeader_1m_1datlen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  XsMessageHeader::LengthData *arg2 = (XsMessageHeader::LengthData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  arg2 = *(XsMessageHeader::LengthData **)&jarg2; 
  if (arg1) (arg1)->m_datlen = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageHeader_1m_1datlen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  XsMessageHeader::LengthData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessageHeader **)&jarg1; 
  result = (XsMessageHeader::LengthData *)& ((arg1)->m_datlen);
  *(XsMessageHeader::LengthData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageHeader(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMessageHeader *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMessageHeader *)new XsMessageHeader();
  *(XsMessageHeader **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMessageHeader(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMessageHeader *arg1 = (XsMessageHeader *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMessageHeader **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  XsXbusMessageId arg1 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsXbusMessageId)jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsMessage *)new XsMessage(arg1,arg2);
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  XsXbusMessageId arg1 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsXbusMessageId)jarg1; 
  result = (XsMessage *)new XsMessage(arg1);
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMessage *)new XsMessage();
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsMessage *)new XsMessage((uint8_t const *)arg1,arg2);
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = 0 ;
  bool arg2 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false; 
  result = (XsMessage *)new XsMessage((XsString const &)*arg1,arg2);
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageClass_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = 0 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsMessage *)new XsMessage((XsString const &)*arg1);
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMessageClass_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = 0 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (XsMessage *)new XsMessage((XsMessage const &)*arg1);
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMessageClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMessage **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsMessageClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (bool)((XsMessage const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageClass_1getBusId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint8_t)((XsMessage const *)arg1)->getBusId();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1getDataBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint8_t *)((XsMessage const *)arg1)->getDataBuffer(arg2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1getDataBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint8_t *)((XsMessage const *)arg1)->getDataBuffer();
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageClass_1getDataByte_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jshort jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint8_t)((XsMessage const *)arg1)->getDataByte(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageClass_1getDataByte_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint8_t)((XsMessage const *)arg1)->getDataByte();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((XsMessage const *)arg1)->getDataDouble(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (double)((XsMessage const *)arg1)->getDataDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_minimalJNI_XsMessageClass_1getDataFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jfloat jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (float)((XsMessage const *)arg1)->getDataFloat(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_minimalJNI_XsMessageClass_1getDataFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (float)((XsMessage const *)arg1)->getDataFloat();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataF1220_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((XsMessage const *)arg1)->getDataF1220(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataF1220_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (double)((XsMessage const *)arg1)->getDataF1220();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataFP1632_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((XsMessage const *)arg1)->getDataFP1632(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataFP1632_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (double)((XsMessage const *)arg1)->getDataFP1632();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1getDataLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint32_t)((XsMessage const *)arg1)->getDataLong(arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1getDataLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint32_t)((XsMessage const *)arg1)->getDataLong();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsMessageClass_1getDataLongLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jobject jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint64_t)((XsMessage const *)arg1)->getDataLongLong(arg2);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsMessageClass_1getDataLongLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint64_t)((XsMessage const *)arg1)->getDataLongLong();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessageClass_1getDataShort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (uint16_t)((XsMessage const *)arg1)->getDataShort(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessageClass_1getDataShort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint16_t)((XsMessage const *)arg1)->getDataShort();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1getDataSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = ((XsMessage const *)arg1)->getDataSize();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessageClass_1getMessageId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsXbusMessageId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (XsXbusMessageId)((XsMessage const *)arg1)->getMessageId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMessageClass_1toResultValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (XsResultValue)((XsMessage const *)arg1)->toResultValue();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1getMessageStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (uint8_t *)((XsMessage const *)arg1)->getMessageStart();
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1getTotalMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = ((XsMessage const *)arg1)->getTotalMessageSize();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsMessageClass_1isChecksumOk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (bool)((XsMessage const *)arg1)->isChecksumOk();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsMessageClass_1loadFromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->loadFromString((uint8_t const *)arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1recomputeChecksum(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  (arg1)->recomputeChecksum();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1resizeData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->resizeData(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setBusId_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setBusId(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setBusId_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setBusId(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setDataBuffer((uint8_t const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataBuffer((uint8_t const *)arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataByte_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataByte(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataByte_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setDataByte(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataDouble_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataDouble(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataDouble_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDataDouble(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFloat_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  float arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (float)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataFloat(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFloat_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->setDataFloat(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataF1220_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataF1220(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataF1220_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDataF1220(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFP1632_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataFP1632(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFP1632_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setDataFP1632(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint32_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataLong(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setDataLong(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataLongLong_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint64_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataLongLong(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataLongLong_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t const)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t const)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  (arg1)->setDataLongLong(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataShort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint16_t arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setDataShort(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataShort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  (arg1)->setDataShort(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setMessageId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsXbusMessageId arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsXbusMessageId)jarg2; 
  (arg1)->setMessageId(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessage *arg2 = 0 ;
  XsMessage *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (XsMessage *) &(arg1)->operator =((XsMessage const &)*arg2);
  *(XsMessage **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1deleteData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->deleteData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1deleteData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->deleteData(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1insertData_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insertData(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1insertData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->insertData(arg2);
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMessageClass_1getFPValueSize(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jshort jresult = 0 ;
  XsDataIdentifier arg1 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDataIdentifier)jarg1; 
  result = (uint8_t)XsMessage::getFPValueSize(arg1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1getDataFPValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  XsSize arg4 ;
  XsSize arg5 ;
  XsSize *argp4 ;
  XsSize *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(XsSize **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg5 = *argp5; 
  ((XsMessage const *)arg1)->getDataFPValue(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1getDataFPValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  XsSize arg4 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  ((XsMessage const *)arg1)->getDataFPValue(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1getDataFPValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  ((XsMessage const *)arg1)->getDataFPValue(arg2,arg3);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataFPValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = (double)((XsMessage const *)arg1)->getDataFPValue(arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsMessageClass_1getDataFPValue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (double)((XsMessage const *)arg1)->getDataFPValue(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFPValue_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  XsSize arg4 ;
  XsSize arg5 ;
  XsSize *argp4 ;
  XsSize *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  argp5 = *(XsSize **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg5 = *argp5; 
  (arg1)->setDataFPValue(arg2,(double const *)arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFPValue_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  XsSize arg4 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setDataFPValue(arg2,(double const *)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFPValue_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double *arg3 = (double *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = *(double **)&jarg3; 
  (arg1)->setDataFPValue(arg2,(double const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFPValue_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3, jlong jarg4) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double arg3 ;
  XsSize arg4 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = (double)jarg3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->setDataFPValue(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMessageClass_1setDataFPValue_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsDataIdentifier arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setDataFPValue(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsMessageClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsMessage **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)((XsMessage const *)arg1)->operator ==((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1rawMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = (XsByteArray *) &((XsMessage const *)arg1)->rawMessage();
  *(XsByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1toHexString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsMessage const *)arg1)->toHexString(arg2);
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMessageClass_1toHexString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMessage *arg1 = (XsMessage *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMessage **)&jarg1; 
  result = ((XsMessage const *)arg1)->toHexString();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1ref(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsDataFlags arg4 ;
  XsSize *argp2 ;
  XsDataFlags *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsReal **)&jarg3; 
  argp4 = *(XsDataFlags **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return ;
  }
  arg4 = *argp4; 
  XsVector_ref(arg1,arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsReal **)&jarg3; 
  XsVector_construct(arg1,arg2,(XsReal const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsReal **)&jarg3; 
  XsVector_assign(arg1,arg2,(XsReal const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  XsVector_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsVector_copy(arg1,(XsVector const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVector_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = XsVector_dotProduct((XsVector const *)arg1,(XsVector const *)arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVector_1cartesianLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = XsVector_cartesianLength((XsVector const *)arg1);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  XsVector_normalize(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1setZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  XsVector_setZero(arg1);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsVector_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = (int)XsVector_empty((XsVector const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1multiplyScalar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal arg2 ;
  XsVector *arg3 = (XsVector *) 0 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsVector **)&jarg3; 
  XsVector_multiplyScalar((XsVector const *)arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1angularVelocityFromQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal arg2 ;
  XsQuaternion *arg3 = (XsQuaternion *) 0 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsQuaternion **)&jarg3; 
  XsVector_angularVelocityFromQuaternion(arg1,arg2,(XsQuaternion const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  XsVector_swap(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  XsVector_fill(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsVector_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  result = (int)XsVector_equal((XsVector const *)arg1,(XsVector const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsVector_1compare(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = (XsVector *) 0 ;
  XsReal arg3 ;
  XsReal *argp3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)XsVector_compare((XsVector const *)arg1,(XsVector const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1m_1data_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = (XsReal *)(XsReal *) ((arg1)->m_data);
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1m_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = (XsSize) ((arg1)->m_size);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = (XsSize) ((arg1)->m_flags);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = ((XsVector const *)arg1)->flags();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsReal *arg2 = (XsReal *) 0 ;
  XsSize *argp1 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(XsReal **)&jarg2; 
  result = (XsVector *)new XsVector(arg1,(XsReal const *)arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize *argp1 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  result = (XsVector *)new XsVector(arg1);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsVector *)new XsVector();
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (XsVector *)new XsVector((XsVector const &)*arg1);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsReal *arg1 = (XsReal *) 0 ;
  XsSize arg2 ;
  XsDataFlags arg3 ;
  XsSize *argp2 ;
  XsDataFlags *argp3 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsReal **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsDataFlags **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsVector *)new XsVector(arg1,arg2,arg3);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jlong jresult = 0 ;
  XsReal *arg1 = (XsReal *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsReal **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsVector *)new XsVector(arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  XsVector *arg1 = 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  XsSize arg3 ;
  XsDataFlags arg4 ;
  XsSize *argp3 ;
  XsDataFlags *argp4 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  arg2 = *(XsReal **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(XsDataFlags **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg4 = *argp4; 
  result = (XsVector *)new XsVector((XsVector const &)*arg1,arg2,arg3,arg4);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsVector *arg1 = 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  arg2 = *(XsReal **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsVector *)new XsVector((XsVector const &)*arg1,arg2,arg3);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVectorClass_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsVector *)new XsVector((XsQuaternion const &)*arg1,arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (XsVector *) &(arg1)->operator =((XsVector const &)*arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsVectorClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsReal **)&jarg3; 
  (arg1)->assign(arg2,(XsReal const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = ((XsVector const *)arg1)->size();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = (XsReal *)((XsVector const *)arg1)->data();
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1opMult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsVector const *)arg1)->operator *(arg2);
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1opSelfMultiplication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->operator *=(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsReal *) &((XsVector const *)arg1)->at(arg2);
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsVector const *)arg1)->value(arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsReal arg3 ;
  XsSize *argp2 ;
  XsReal *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->setValue(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1opSquareBracket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsVector const *)arg1)->operator [](arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1dotProduct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = ((XsVector const *)arg1)->dotProduct((XsVector const &)*arg2);
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1cartesianLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = ((XsVector const *)arg1)->cartesianLength();
  *(XsReal **)&jresult = new XsReal((const XsReal &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1normalize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  (arg1)->normalize();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1setZero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  (arg1)->setZero();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsVectorClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = (bool)((XsVector const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1angularVelocityFromQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsQuaternion *arg2 = 0 ;
  XsReal arg3 ;
  XsReal *argp3 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsVector *) &(arg1)->angularVelocityFromQuaternion((XsQuaternion const &)*arg2,arg3);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1opSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = ((XsVector const *)arg1)->operator -((XsVector const &)*arg2);
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1opPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = ((XsVector const *)arg1)->operator +((XsVector const &)*arg2);
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1opSubtractEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (arg1)->operator -=((XsVector const &)*arg2);
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1opPlusEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (arg1)->operator +=((XsVector const &)*arg2);
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsVectorClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (bool)((XsVector const *)arg1)->operator ==((XsVector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsVectorClass_1isEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  XsReal arg3 ;
  XsReal *argp3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)((XsVector const *)arg1)->isEqual((XsVector const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVectorClass_1toVector(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = (XsVector *) 0 ;
  std::vector< XsReal > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  result = ((XsVector const *)arg1)->toVector();
  *(std::vector< XsReal > **)&jresult = new std::vector< XsReal >((const std::vector< XsReal > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  (arg1)->zero();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1fill(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsReal arg2 ;
  XsReal *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->fill(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_swap_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsVector *arg1 = 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector & reference is null");
    return ;
  } 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector & reference is null");
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->append((XsVector const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVectorClass_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector *arg1 = (XsVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_opMult_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsVector *arg2 = 0 ;
  XsReal *argp1 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = operator *(arg1,(XsVector const &)*arg2);
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1setMilliSecondTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  XsTimeStamp_setMilliSecondTime(arg1,arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsTimeStamp_1timeOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (double)XsTimeStamp_timeOfDay((XsTimeStamp const *)arg1);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStamp_1secondTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int64_t)XsTimeStamp_secondTime((XsTimeStamp const *)arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStamp_1milliSecondPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)XsTimeStamp_milliSecondPart((XsTimeStamp const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStamp_1secondPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)XsTimeStamp_secondPart((XsTimeStamp const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStamp_1minutePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)XsTimeStamp_minutePart((XsTimeStamp const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStamp_1hourPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)XsTimeStamp_hourPart((XsTimeStamp const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStamp_1now(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int64_t)XsTimeStamp_now(arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStamp_1maxValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int64_t)XsTimeStamp_maxValue();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStamp_1fromTimeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeInfo *arg2 = (XsTimeInfo *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2; 
  result = (int64_t)XsTimeStamp_fromTimeInfo(arg1,(XsTimeInfo const *)arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1toTimeInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeInfo *arg2 = (XsTimeInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2; 
  XsTimeStamp_toTimeInfo((XsTimeStamp const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsTimeStamp_toString((XsTimeStamp const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1utcToLocalTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  XsTimeStamp_utcToLocalTime((XsTimeStamp const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1localToUtcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  XsTimeStamp_localToUtcTime((XsTimeStamp const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1utcToLocalTime2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  XsTimeInfo *arg3 = (XsTimeInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  arg3 = *(XsTimeInfo **)&jarg3; 
  XsTimeStamp_utcToLocalTime2((XsTimeStamp const *)arg1,arg2,(XsTimeInfo const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1localToUtcTime2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  XsTimeInfo *arg3 = (XsTimeInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  arg3 = *(XsTimeInfo **)&jarg3; 
  XsTimeStamp_localToUtcTime2((XsTimeStamp const *)arg1,arg2,(XsTimeInfo const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1utcToLocalTime_1ms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  XsTimeStamp_utcToLocalTime_ms((XsTimeStamp const *)arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStamp_1localToUtcTime_1ms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = (XsTimeStamp *) 0 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  XsTimeStamp_localToUtcTime_ms((XsTimeStamp const *)arg1,arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsTimeStampClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  int64_t arg1 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int64_t)jarg1; 
  result = (XsTimeStamp *)new XsTimeStamp(arg1);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsTimeStampClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsTimeStamp *)new XsTimeStamp();
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsTimeStampClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (XsTimeStamp *)new XsTimeStamp(arg1);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsTimeStampClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (XsTimeStamp *)new XsTimeStamp(arg1);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsTimeStampClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (XsTimeStamp *)new XsTimeStamp((XsTimeStamp const &)*arg1);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsTimeStampClass_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeInfo *arg1 = 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeInfo **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeInfo const & reference is null");
    return 0;
  } 
  result = (XsTimeStamp *)new XsTimeStamp((XsTimeInfo const &)*arg1);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1toTimeInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = ((XsTimeStamp const *)arg1)->toTimeInfo();
  *(XsTimeInfo **)&jresult = new XsTimeInfo((const XsTimeInfo &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStampClass_1toTimeInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeInfo & reference is null");
    return ;
  } 
  ((XsTimeStamp const *)arg1)->toTimeInfo(*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = ((XsTimeStamp const *)arg1)->toString();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (XsTimeStamp *) &(arg1)->operator =((XsTimeStamp const &)*arg2);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1msTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int64_t)((XsTimeStamp const *)arg1)->msTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStampClass_1setMsTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->setMsTime(arg2);
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsTimeStampClass_1timeOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (double)((XsTimeStamp const *)arg1)->timeOfDay();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1msTimeOfDay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int64_t)((XsTimeStamp const *)arg1)->msTimeOfDay();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsTimeStampClass_1secTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (double)((XsTimeStamp const *)arg1)->secTime();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsTimeStampClass_1setSecTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSecTime(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = ((XsTimeStamp const *)arg1)->operator +((XsTimeStamp const &)*arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opSubtract(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = ((XsTimeStamp const *)arg1)->operator -((XsTimeStamp const &)*arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opPlusEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (XsTimeStamp *) &(arg1)->operator +=((XsTimeStamp const &)*arg2);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opSubtractEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (XsTimeStamp *) &(arg1)->operator -=((XsTimeStamp const &)*arg2);
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opLessThen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (bool)((XsTimeStamp const *)arg1)->operator <((XsTimeStamp const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opLessEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (bool)((XsTimeStamp const *)arg1)->operator <=((XsTimeStamp const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (bool)((XsTimeStamp const *)arg1)->operator ==((XsTimeStamp const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opGreaterThen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (bool)((XsTimeStamp const *)arg1)->operator >((XsTimeStamp const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opGreaterEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (bool)((XsTimeStamp const *)arg1)->operator >=((XsTimeStamp const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opUnequals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeStamp **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeStamp const & reference is null");
    return 0;
  } 
  result = (bool)((XsTimeStamp const *)arg1)->operator !=((XsTimeStamp const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opLessThen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XsTimeStamp const *)arg1)->operator <(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opLessEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XsTimeStamp const *)arg1)->operator <=(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XsTimeStamp const *)arg1)->operator ==(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opGreaterThen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XsTimeStamp const *)arg1)->operator >(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opGreaterEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XsTimeStamp const *)arg1)->operator >=(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsTimeStampClass_1opUnequals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XsTimeStamp const *)arg1)->operator !=(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1secondTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int64_t)((XsTimeStamp const *)arg1)->secondTime();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStampClass_1milliSecondPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)((XsTimeStamp const *)arg1)->milliSecondPart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStampClass_1secondPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)((XsTimeStamp const *)arg1)->secondPart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStampClass_1minutePart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)((XsTimeStamp const *)arg1)->minutePart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsTimeStampClass_1hourPart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int32_t)((XsTimeStamp const *)arg1)->hourPart();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1now(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  result = XsTimeStamp::now();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1nowMs(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (int64_t)XsTimeStamp::nowMs();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1elapsedToNow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (int64_t)((XsTimeStamp const *)arg1)->elapsedToNow();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1maxValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  result = XsTimeStamp::maxValue();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opIncrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (XsTimeStamp *) &(arg1)->operator ++();
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opIncrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator ++(arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opDecrement_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = (XsTimeStamp *) &(arg1)->operator --();
  *(XsTimeStamp **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1opDecrement_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int arg2 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (arg1)->operator --(arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1utcToLocalTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = ((XsTimeStamp const *)arg1)->utcToLocalTime();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1localToUtcTime_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  result = ((XsTimeStamp const *)arg1)->localToUtcTime();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1utcToLocalTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeInfo *arg2 = 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeInfo const & reference is null");
    return 0;
  } 
  result = ((XsTimeStamp const *)arg1)->utcToLocalTime((XsTimeInfo const &)*arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1localToUtcTime_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  XsTimeInfo *arg2 = 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeInfo const & reference is null");
    return 0;
  } 
  result = ((XsTimeStamp const *)arg1)->localToUtcTime((XsTimeInfo const &)*arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1utcToLocalTime_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t arg2 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((XsTimeStamp const *)arg1)->utcToLocalTime(arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsTimeStampClass_1localToUtcTime_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  int64_t arg2 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsTimeStamp **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  result = ((XsTimeStamp const *)arg1)->localToUtcTime(arg2);
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsTimeStampClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsTimeStamp *arg1 = (XsTimeStamp *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsTimeStamp **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector3_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1; 
  arg2 = *(XsReal **)&jarg2; 
  XsVector3_construct(arg1,(XsReal const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector3_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1; 
  arg2 = *(XsReal **)&jarg2; 
  XsVector3_assign(arg1,(XsReal const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector3_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1; 
  XsVector3_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector3_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsVector *arg1 = (XsVector *) 0 ;
  XsVector3 *arg2 = (XsVector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector **)&jarg1; 
  arg2 = *(XsVector3 **)&jarg2; 
  XsVector3_copy(arg1,(XsVector3 const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector3_1m_1fixedData_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsReal *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1; 
  arg2 = *(XsReal **)&jarg2; 
  {
    size_t ii;
    XsReal *b = (XsReal *) arg1->m_fixedData;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((XsReal *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVector3_1m_1fixedData_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsReal *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1; 
  result = (XsReal *)(XsReal *) ((arg1)->m_fixedData);
  *(XsReal **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVector3_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsVector3 *)new XsVector3();
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVector3_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector3 *arg1 = 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector3 const & reference is null");
    return 0;
  } 
  result = (XsVector3 *)new XsVector3((XsVector3 const &)*arg1);
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVector3_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsVector *arg1 = 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (XsVector3 *)new XsVector3((XsVector const &)*arg1);
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsVector3_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsReal arg1 ;
  XsReal arg2 ;
  XsReal arg3 ;
  XsReal *argp1 ;
  XsReal *argp2 ;
  XsReal *argp3 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsReal **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg1 = *argp1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsVector3 *)new XsVector3(arg1,arg2,arg3);
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVector3_1zero3(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsVector3 *) &XsVector3::zero3();
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVector3_1opSet_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsVector *arg2 = 0 ;
  XsVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector3 **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (XsVector *) &(arg1)->operator =((XsVector const &)*arg2);
  *(XsVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVector3_1opSet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsVector3 *arg2 = 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsVector3 **)&jarg1; 
  arg2 = *(XsVector3 **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector3 const & reference is null");
    return 0;
  } 
  result = (XsVector3 *) &(arg1)->operator =((XsVector3 const &)*arg2);
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector3_1assign_1_1SWIG_10_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsSize arg2 ;
  XsReal *arg3 = (XsReal *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsReal **)&jarg3; 
  (arg1)->assign(arg2,(XsReal const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsVector3_1assign_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  XsReal arg2 ;
  XsReal arg3 ;
  XsReal arg4 ;
  XsReal *argp2 ;
  XsReal *argp3 ;
  XsReal *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsVector3 **)&jarg1; 
  argp2 = *(XsReal **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsReal **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsReal **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsReal");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->assign(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsVector3(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsVector3 *arg1 = (XsVector3 *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsVector3 **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRange_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (int)XsRange_count((XsRange const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRange_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)XsRange_contains((XsRange const *)arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRange_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (int)XsRange_interval((XsRange const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRange_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XsRange *arg1 = (XsRange *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  XsRange_setRange(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRange_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (int)XsRange_empty((XsRange const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsRangeClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  XsRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (XsRange *)new XsRange(arg1,arg2);
  *(XsRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsRangeClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  XsRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (XsRange *)new XsRange(arg1);
  *(XsRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsRangeClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsRange *)new XsRange();
  *(XsRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsRangeClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRange *arg1 = 0 ;
  XsRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRange const & reference is null");
    return 0;
  } 
  result = (XsRange *)new XsRange((XsRange const &)*arg1);
  *(XsRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRangeClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  XsRange *arg2 = 0 ;
  XsRange *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsRange **)&jarg1; 
  arg2 = *(XsRange **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRange const & reference is null");
    return 0;
  } 
  result = (XsRange *) &(arg1)->operator =((XsRange const &)*arg2);
  *(XsRange **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRangeClass_1count(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (int)((XsRange const *)arg1)->count();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRangeClass_1interval(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (int)((XsRange const *)arg1)->interval();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsRangeClass_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((XsRange const *)arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRangeClass_1setRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XsRange *arg1 = (XsRange *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->setRange(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsRangeClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (bool)((XsRange const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRangeClass_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (int)((XsRange const *)arg1)->first();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRangeClass_1last(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRange **)&jarg1; 
  result = (int)((XsRange const *)arg1)->last();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsRangeClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  XsRange *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsRange **)&jarg1; 
  arg2 = *(XsRange **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRange const & reference is null");
    return 0;
  } 
  result = (bool)((XsRange const *)arg1)->operator ==((XsRange const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsRangeClass_1opLessThen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsRange *arg1 = (XsRange *) 0 ;
  XsRange *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsRange **)&jarg1; 
  arg2 = *(XsRange **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRange const & reference is null");
    return 0;
  } 
  result = (bool)((XsRange const *)arg1)->operator <((XsRange const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsRangeClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsRange *arg1 = (XsRange *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsRange **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  XsSnapshot_construct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  XsSnapshot_destruct(arg1);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_ST_1Awinda_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotType result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotType)ST_Awinda;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1deviceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  if (arg1) (arg1)->m_deviceId = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSnapshot_1m_1deviceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (XsDeviceId *)& ((arg1)->m_deviceId);
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1frameNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_frameNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSnapshot_1m_1frameNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (uint32_t) ((arg1)->m_frameNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1timestamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->m_timestamp = arg2;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsSnapshot_1m_1timestamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (uint64_t) ((arg1)->m_timestamp);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1iQ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int32_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->m_iQ;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSnapshot_1m_1iQ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (int32_t *)(int32_t *) ((arg1)->m_iQ);
  *(int32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1iV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int64_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = *(int64_t **)&jarg2; 
  {
    size_t ii;
    int64_t *b = (int64_t *) arg1->m_iV;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int64_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSnapshot_1m_1iV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int64_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (int64_t *)(int64_t *) ((arg1)->m_iV);
  *(int64_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1mag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int32_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->m_mag;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSnapshot_1m_1mag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (int32_t *)(int32_t *) ((arg1)->m_mag);
  *(int32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1baro_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_baro = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsSnapshot_1m_1baro_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (int32_t) ((arg1)->m_baro);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_status = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsSnapshot_1m_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (uint16_t) ((arg1)->m_status);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1accClippingCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_accClippingCounter = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsSnapshot_1m_1accClippingCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (uint8_t) ((arg1)->m_accClippingCounter);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1gyrClippingCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_gyrClippingCounter = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsSnapshot_1m_1gyrClippingCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (uint8_t) ((arg1)->m_gyrClippingCounter);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSnapshot_1m_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  SnapshotType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = (SnapshotType)jarg2; 
  if (arg1) (arg1)->m_type = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsSnapshot_1m_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  SnapshotType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSnapshot **)&jarg1; 
  result = (SnapshotType) ((arg1)->m_type);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSnapshot_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  XsSnapshot *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsSnapshot **)&jarg1; 
  arg2 = *(XsSnapshot **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSnapshot const & reference is null");
    return 0;
  } 
  result = (bool)((XsSnapshot const *)arg1)->operator ==((XsSnapshot const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsSnapshot(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsSnapshot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsSnapshot *)new XsSnapshot();
  *(XsSnapshot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsSnapshot *arg1 = (XsSnapshot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsSnapshot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipAccX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipAccX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipAccY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipAccY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipAccZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipAccZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipAccMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipAccMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipGyrX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipGyrX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipGyrY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipGyrY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipGyrZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipGyrZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipGyrMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipGyrMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipMagX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipMagX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipMagY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipMagY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipMagZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipMagZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipMagMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_ClipMagMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1MagIsNew_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_MagIsNew;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1BaroIsNew_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_BaroIsNew;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1RotationMask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  SnapshotStatusFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (SnapshotStatusFlag)FSFL_RotationMask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipAccShift_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipGyrShift_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(04);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1ClipMagshift_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FSFL_1RotationShift_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(11);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_int24_1t_1m_1vals_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  int24_t *arg1 = (int24_t *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int24_t **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_vals;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_int24_1t_1m_1vals_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  int24_t *arg1 = (int24_t *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int24_t **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_vals);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_int24_1t_1toDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  int24_t *arg1 = (int24_t *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(int24_t **)&jarg1; 
  result = (double)((int24_t const *)arg1)->toDouble();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1int24_1t(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  int24_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (int24_t *)new int24_t();
  *(int24_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1int24_1t(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  int24_t *arg1 = (int24_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(int24_t **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1iQ_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  int24_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  arg2 = *(int24_t **)&jarg2; 
  {
    size_t ii;
    int24_t *b = (int24_t *) arg1->m_iQ;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int24_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1iQ_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  int24_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  result = (int24_t *)(int24_t *) ((arg1)->m_iQ);
  *(int24_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1iV_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  int32_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  arg2 = *(int32_t **)&jarg2; 
  {
    size_t ii;
    int32_t *b = (int32_t *) arg1->m_iV;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int32_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1iV_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  int32_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  result = (int32_t *)(int32_t *) ((arg1)->m_iV);
  *(int32_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1mag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  int16_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  arg2 = *(int16_t **)&jarg2; 
  {
    size_t ii;
    int16_t *b = (int16_t *) arg1->m_mag;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((int16_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1mag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  int16_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  result = (int16_t *)(int16_t *) ((arg1)->m_mag);
  *(int16_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  result = (uint16_t) ((arg1)->m_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1accClippingCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_accClippingCounter = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1accClippingCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  result = (uint8_t) ((arg1)->m_accClippingCounter);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1gyrClippingCounter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_gyrClippingCounter = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsFingerSnapshot_1m_1gyrClippingCounter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  result = (uint8_t) ((arg1)->m_gyrClippingCounter);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFingerSnapshot(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsFingerSnapshot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsFingerSnapshot *)new XsFingerSnapshot();
  *(XsFingerSnapshot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsFingerSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsFingerSnapshot *arg1 = (XsFingerSnapshot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsFingerSnapshot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1frameNumber_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_frameNumber = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1frameNumber_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  result = (uint32_t) ((arg1)->m_frameNumber);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1validSampleFlags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_validSampleFlags = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1validSampleFlags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  result = (uint16_t) ((arg1)->m_validSampleFlags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1padByte_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_padByte = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1padByte_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  result = (uint8_t) ((arg1)->m_padByte);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1fingers_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  XsFingerSnapshot *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  arg2 = *(XsFingerSnapshot **)&jarg2; 
  {
    size_t ii;
    XsFingerSnapshot *b = (XsFingerSnapshot *) arg1->m_fingers;
    for (ii = 0; ii < (size_t)12; ii++) b[ii] = *((XsFingerSnapshot *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsGloveSnapshot_1m_1fingers_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  XsFingerSnapshot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  result = (XsFingerSnapshot *)(XsFingerSnapshot *) ((arg1)->m_fingers);
  *(XsFingerSnapshot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsGloveSnapshot(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsGloveSnapshot *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsGloveSnapshot *)new XsGloveSnapshot();
  *(XsGloveSnapshot **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsGloveSnapshot(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsGloveSnapshot *arg1 = (XsGloveSnapshot *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsGloveSnapshot **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_g_1xsStringDescriptor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsArrayDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsArrayDescriptor *)&g_xsStringDescriptor;
  *(XsArrayDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  XsString_construct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  XsString_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jstring jarg3) {
  XsString *arg1 = (XsString *) 0 ;
  XsSize arg2 ;
  char *arg3 = (char *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  XsString_assign(arg1,arg2,(char const *)arg3);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1assignCharArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XsString *arg1 = (XsString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  XsString_assignCharArray(arg1,(char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsString *arg1 = (XsString *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  XsString_resize(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsString_append(arg1,(XsString const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1erase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsString *arg1 = (XsString *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  XsString_erase(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  XsString *arg1 = (XsString *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = (char)jarg2; 
  XsString_push_back(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsString_1utf8Len(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = XsString_utf8Len((XsString const *)arg1);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsString_1endsWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)XsString_endsWith((XsString const *)arg1,(XsString const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsString_1startsWith(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jint jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  arg3 = (int)jarg3; 
  result = (int)XsString_startsWith((XsString const *)arg1,(XsString const *)arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsString_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  jint jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  int arg3 ;
  XsSize *arg4 = (XsSize *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = *(XsSize **)&jarg4; 
  result = (int)XsString_contains((XsString const *)arg1,(XsString const *)arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsString_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = (int)XsString_empty((XsString const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  XsString_sort(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  XsString_reverse(arg1);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsString_1findSubStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  result = XsString_findSubStr((XsString const *)arg1,(XsString const *)arg2);
  *(ptrdiff_t **)&jresult = new ptrdiff_t((const ptrdiff_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1mid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  XsString_mid(arg1,(XsString const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1replaceAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  XsString *arg3 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  arg3 = *(XsString **)&jarg3; 
  XsString_replaceAll(arg1,(XsString const *)arg2,(XsString const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1trimmed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsString_trimmed(arg1,(XsString const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsString_1copyToWCharArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(wchar_t **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = XsString_copyToWCharArray((XsString const *)arg1,arg2,arg3);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsString_1utf8At(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  wchar_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (wchar_t)XsString_utf8At((XsString const *)arg1,arg2);
  *(wchar_t **)&jresult = new wchar_t((const wchar_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1assignWCharArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsString *arg1 = (XsString *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(wchar_t **)&jarg2; 
  XsString_assignWCharArray(arg1,(wchar_t const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsString_1push_1backWChar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsString *arg1 = (XsString *) 0 ;
  wchar_t arg2 ;
  wchar_t *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(wchar_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null wchar_t");
    return ;
  }
  arg2 = *argp2; 
  XsString_push_backWChar(arg1,arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  char *arg2 = (char *) 0 ;
  XsSize *argp1 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (XsString *)new XsString(arg1,(char const *)arg2);
  *(XsString **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize *argp1 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  result = (XsString *)new XsString(arg1);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsString *)new XsString();
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsString *)new XsString((XsString const &)*arg1);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  XsSize arg2 ;
  XsDataFlags arg3 ;
  XsSize *argp2 ;
  XsDataFlags *argp3 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsDataFlags **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsString *)new XsString(arg1,arg2,arg3);
  *(XsString **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (XsString *)new XsString((char const *)arg1);
  *(XsString **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(wchar_t **)&jarg1; 
  result = (XsString *)new XsString((wchar_t const *)arg1);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::string *arg1 = 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::string **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::string const & reference is null");
    return 0;
  } 
  result = (XsString *)new XsString((std::string const &)*arg1);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsStringClass_1_1SWIG_19(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::wstring **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::wstring const & reference is null");
    return 0;
  } 
  result = (XsString *)new XsString((std::wstring const &)*arg1);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsStringClass_1c_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = (char *)((XsString const *)arg1)->c_str();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1toStdString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = ((XsString const *)arg1)->toStdString();
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1opPlus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = ((XsString const *)arg1)->operator +((XsString const &)*arg2);
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1toStdWString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = ((XsString const *)arg1)->toStdWString();
  *(std::wstring **)&jresult = new std::wstring((const std::wstring &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1opEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((XsString const *)arg1)->operator ==((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1opEquals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)((XsString const *)arg1)->operator ==((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1opUnequals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((XsString const *)arg1)->operator !=((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1opUnequals_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)((XsString const *)arg1)->operator !=((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1opLeftShift_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  char *arg2 = (char *) 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (XsString *) &(arg1)->operator <<((char const *)arg2);
  *(XsString **)&jresult = result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1opLeftShift_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  int arg2 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (XsString *) &(arg1)->operator <<(arg2);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1opLeftShift_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsString *) &(arg1)->operator <<((XsString const &)*arg2);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1opLessThen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)((XsString const *)arg1)->operator <((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1opGreaterThen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)((XsString const *)arg1)->operator >((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1push_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  char arg2 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = (char)jarg2; 
  result = (XsString *) &(arg1)->push_back(arg2);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = (bool)((XsString const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsStringClass_1append_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  (arg1)->append((XsString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsStringClass_1append_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XsString *arg1 = (XsString *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->append((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsStringClass_1append_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsString *arg1 = (XsString *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(wchar_t **)&jarg2; 
  (arg1)->append((wchar_t const *)arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1utf8Len(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = ((XsString const *)arg1)->utf8Len();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1endsWith_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)((XsString const *)arg1)->endsWith((XsString const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1endsWith_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)((XsString const *)arg1)->endsWith((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1startsWith_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)((XsString const *)arg1)->startsWith((XsString const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1startsWith_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)((XsString const *)arg1)->startsWith((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1contains_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool arg3 ;
  XsSize *arg4 = (XsSize *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(XsSize **)&jarg4; 
  result = (bool)((XsString const *)arg1)->contains((XsString const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1contains_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)((XsString const *)arg1)->contains((XsString const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsStringClass_1contains_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)((XsString const *)arg1)->contains((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1utf8At(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  wchar_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (wchar_t)((XsString const *)arg1)->utf8At(arg2);
  *(wchar_t **)&jresult = new wchar_t((const wchar_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1push_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  wchar_t arg2 ;
  wchar_t *argp2 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(wchar_t **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null wchar_t");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsString *) &(arg1)->push_back(arg2);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsStringClass_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsStringClass_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1findSubStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = ((XsString const *)arg1)->findSubStr((XsString const &)*arg2);
  *(ptrdiff_t **)&jresult = new ptrdiff_t((const ptrdiff_t &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1mid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  result = ((XsString const *)arg1)->mid(arg2,arg3);
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsStringClass_1replaceAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  XsString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  arg3 = *(XsString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  (arg1)->replaceAll((XsString const &)*arg2,(XsString const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1replacedAll(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString *arg2 = 0 ;
  XsString *arg3 = 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsString **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = *(XsString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = ((XsString const *)arg1)->replacedAll((XsString const &)*arg2,(XsString const &)*arg3);
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsStringClass_1trim(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  (arg1)->trim();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsStringClass_1trimmed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = ((XsString const *)arg1)->trimmed();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_minimalJNI_XsStringClass_1last(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  XsString *arg1 = (XsString *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1; 
  result = (char)((XsString const *)arg1)->last();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsStringClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsString *arg1 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsString **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_GNSS_1PVT_1FLAGS_1GNSS_1FIX_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x00));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_GNSS_1PVT_1FLAGS_1GNSS_1FIX_1SINGLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_GNSS_1PVT_1FLAGS_1GNSS_1FIX_1DIFFERENTIAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x03));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_GNSS_1PVT_1FLAGS_1CARRIER_1SOLUTION_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x00 << 6));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_GNSS_1PVT_1FLAGS_1CARRIER_1SOLUTION_1FLOATING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x01 << 6));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_GNSS_1PVT_1FLAGS_1CARRIER_1SOLUTION_1FIXED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((0x02 << 6));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_GNSS_1ACCURACY_1DEFAULT_1DEVIATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((10000000));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDUF_1ValidDate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataUtcFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataUtcFlags)XPDUF_ValidDate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDUF_1ValidTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataUtcFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataUtcFlags)XPDUF_ValidTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDUF_1FullyResolved_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataUtcFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataUtcFlags)XPDUF_FullyResolved;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDUF_1ValidMag_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataUtcFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataUtcFlags)XPDUF_ValidMag;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDQI_1NoFix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataQualityIndicator result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataQualityIndicator)XPDQI_NoFix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDQI_1DeadReckiningOnly_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataQualityIndicator result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataQualityIndicator)XPDQI_DeadReckiningOnly;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDQI_12DFix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataQualityIndicator result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataQualityIndicator)XPDQI_2DFix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDQI_13DFix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataQualityIndicator result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataQualityIndicator)XPDQI_3DFix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDQI_1GnssAndDeadReck_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataQualityIndicator result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataQualityIndicator)XPDQI_GnssAndDeadReck;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPDQI_1TimeOnlyFix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPvtDataQualityIndicator result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPvtDataQualityIndicator)XPDQI_TimeOnlyFix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1itow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_itow = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1itow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint32_t) ((arg1)->m_itow);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1year_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_year = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1year_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_year);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1month_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_month = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1month_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_month);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1day_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_day = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1day_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_day);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hour_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_hour = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hour_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_hour);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_min = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_min);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1sec_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_sec = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1sec_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_sec);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1valid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_valid = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1valid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_valid);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1tAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_tAcc = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1tAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint32_t) ((arg1)->m_tAcc);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1nano_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_nano = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1nano_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_nano);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1fixType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_fixType = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1fixType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_fixType);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1numSv_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_numSv = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1numSv_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_numSv);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1res1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_res1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1res1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint8_t) ((arg1)->m_res1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1lon_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_lon = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1lon_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_lon);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1lat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_lat = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1lat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_lat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1height_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_height = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1height_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_height);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hMsl_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_hMsl = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hMsl_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_hMsl);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_hAcc = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint32_t) ((arg1)->m_hAcc);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1vAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_vAcc = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1vAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint32_t) ((arg1)->m_vAcc);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1velN_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_velN = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1velN_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_velN);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1velE_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_velE = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1velE_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_velE);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1velD_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_velD = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1velD_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_velD);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1gSpeed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_gSpeed = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1gSpeed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_gSpeed);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1headMot_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_headMot = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1headMot_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_headMot);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1sAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_sAcc = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1sAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint32_t) ((arg1)->m_sAcc);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1headAcc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_headAcc = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1headAcc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint32_t) ((arg1)->m_headAcc);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1headVeh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (int32_t)jarg2; 
  if (arg1) (arg1)->m_headVeh = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1headVeh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  int32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (int32_t) ((arg1)->m_headVeh);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1gdop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_gdop = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1gdop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_gdop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1pdop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_pdop = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1pdop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_pdop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1tdop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_tdop = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1tdop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_tdop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1vdop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_vdop = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1vdop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_vdop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hdop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_hdop = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1hdop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_hdop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1ndop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_ndop = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1ndop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_ndop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1edop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_edop = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsRawGnssPvtData_1m_1edop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_edop);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsRawGnssPvtData_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  XsRawGnssPvtData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  arg2 = *(XsRawGnssPvtData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRawGnssPvtData const & reference is null");
    return 0;
  } 
  result = (bool)((XsRawGnssPvtData const *)arg1)->operator ==((XsRawGnssPvtData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsRawGnssPvtData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsRawGnssPvtData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsRawGnssPvtData *)new XsRawGnssPvtData();
  *(XsRawGnssPvtData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsRawGnssPvtData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsRawGnssPvtData *arg1 = (XsRawGnssPvtData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsRawGnssPvtData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsPortInfo *arg2 = (XsPortInfo *) 0 ;
  XsSize *argp1 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(XsPortInfo **)&jarg2; 
  result = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *)new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >(arg1,(XsPortInfo const *)arg2);
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize *argp1 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  result = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *)new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >(arg1);
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *)new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >();
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *arg1 = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *)new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const &)*arg1);
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArray_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsSize arg2 ;
  XsDataFlags arg3 ;
  XsSize *argp2 ;
  XsDataFlags *argp3 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsDataFlags **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *)new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >(arg1,arg2,arg3);
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsPortInfoArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoArray_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (bool)((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->operator ==((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoArray_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (bool)((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->operator !=((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1reserved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->reserved();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1descriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsArrayDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = (XsArrayDescriptor *) &((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->descriptor();
  *(XsArrayDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< 1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->begin();
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator **)&jresult = new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator((const XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< 1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->end();
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator **)&jresult = new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator((const XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1rbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< -1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->rbegin();
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator **)&jresult = new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator((const XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1rend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< -1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->rend();
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator **)&jresult = new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator((const XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1opSquareBracket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  int arg2 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (XsPortInfo *) &((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->operator [](arg2);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->value(arg2);
  *(XsPortInfo **)&jresult = new XsPortInfo((const XsPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->first();
  *(XsPortInfo **)&jresult = new XsPortInfo((const XsPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1last(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->last();
  *(XsPortInfo **)&jresult = new XsPortInfo((const XsPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsPortInfo *) &((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->at(arg2);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = 0 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return ;
  } 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insert((XsPortInfo const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = (XsPortInfo *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->insert((XsPortInfo const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1insert_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< 1 > > arg3 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return ;
  } 
  argp3 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insert((XsPortInfo const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1insert_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< -1 > > arg3 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return ;
  } 
  argp3 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insert((XsPortInfo const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1insert_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = (XsPortInfo *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< 1 > > arg3 ;
  XsSize arg4 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2; 
  argp3 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_iterator");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->insert((XsPortInfo const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1insert_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = (XsPortInfo *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImplConst< -1 > > arg3 ;
  XsSize arg4 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2; 
  argp3 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::const_reverse_iterator");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->insert((XsPortInfo const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return ;
  } 
  (arg1)->push_back((XsPortInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1pop_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->pop_back(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1pop_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return ;
  } 
  (arg1)->push_front((XsPortInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1pop_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->pop_front(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1pop_1front_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->size();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1erase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImpl< 1 > > arg2 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::iterator *argp2 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImpl< 1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::iterator **)&jresult = new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::iterator((const XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1erase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImpl< -1 > > arg2 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::reverse_iterator *argp2 ;
  SwigValueWrapper< XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::IteratorImpl< -1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::reverse_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::reverse_iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::reverse_iterator **)&jresult = new XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::reverse_iterator((const XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsPortInfo *arg3 = (XsPortInfo *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsPortInfo **)&jarg3; 
  (arg1)->assign(arg2,(XsPortInfo const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const & reference is null");
    return ;
  } 
  (arg1)->append((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *arg2 = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *) &(arg1)->operator =((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl const &)*arg2);
  *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoArray_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = (bool)((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1inherited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfoArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  result = (XsPortInfoArray *) &((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->inherited();
  *(XsPortInfoArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1swap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray >::ArrayImpl & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1swap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1opLeftShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = 0 ;
  XsPortInfoArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  result = (XsPortInfoArray *) &(arg1)->operator <<((XsPortInfo const &)*arg2);
  *(XsPortInfoArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArray_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsPortInfo *arg2 = 0 ;
  ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  result = ((XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > const *)arg1)->find((XsPortInfo const &)*arg2);
  *(ptrdiff_t **)&jresult = new ptrdiff_t((const ptrdiff_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1removeDuplicates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  (arg1)->removeDuplicates();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1removeDuplicatesPredicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  XsArrayItemCompareFunc arg2 = (XsArrayItemCompareFunc) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  arg2 = *(XsArrayItemCompareFunc *)&jarg2; 
  (arg1)->removeDuplicatesPredicate(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoArray_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *arg1 = (XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_g_1xsPortInfoArrayDescriptor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsArrayDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsArrayDescriptor *)&g_xsPortInfoArrayDescriptor;
  *(XsArrayDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArrayClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsPortInfo *arg2 = (XsPortInfo *) 0 ;
  XsSize *argp1 ;
  XsPortInfoArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(XsPortInfo **)&jarg2; 
  result = (XsPortInfoArray *)new XsPortInfoArray(arg1,(XsPortInfo const *)arg2);
  *(XsPortInfoArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArrayClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize *argp1 ;
  XsPortInfoArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  result = (XsPortInfoArray *)new XsPortInfoArray(arg1);
  *(XsPortInfoArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArrayClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsPortInfoArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortInfoArray *)new XsPortInfoArray();
  *(XsPortInfoArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArrayClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsPortInfoArray *arg1 = 0 ;
  XsPortInfoArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfoArray **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfoArray const & reference is null");
    return 0;
  } 
  result = (XsPortInfoArray *)new XsPortInfoArray((XsPortInfoArray const &)*arg1);
  *(XsPortInfoArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoArrayClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsSize arg2 ;
  XsDataFlags arg3 ;
  XsSize *argp2 ;
  XsDataFlags *argp3 ;
  XsPortInfoArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsDataFlags **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsPortInfoArray *)new XsPortInfoArray(arg1,arg2,arg3);
  *(XsPortInfoArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsPortInfoArrayClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsPortInfoArray *arg1 = (XsPortInfoArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsPortInfoArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSENS_1VENDOR_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x2639);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_FTDI_1VENDOR_1ID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x0403);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfo_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  XsPortInfo_clear(arg1);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfo_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)XsPortInfo_empty((XsPortInfo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfo_1portNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)XsPortInfo_portNumber((XsPortInfo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfo_1isUsb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)XsPortInfo_isUsb((XsPortInfo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfo_1isBluetooth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)XsPortInfo_isBluetooth((XsPortInfo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfo_1isNetwork(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)XsPortInfo_isNetwork((XsPortInfo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsPortInfo_1networkServiceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (char *)XsPortInfo_networkServiceName((XsPortInfo const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsPortInfo_1bluetoothAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (char *)XsPortInfo_bluetoothAddress((XsPortInfo const *)arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfo_1usbBus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)XsPortInfo_usbBus((XsPortInfo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfo_1usbAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)XsPortInfo_usbAddress((XsPortInfo const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfo_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsPortInfo *arg2 = (XsPortInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2; 
  XsPortInfo_swap(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1Invalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_Invalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1RTS_1Set_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_RTS_Set;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1RTS_1Clear_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_RTS_Clear;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1RTS_1Ignore_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_RTS_Ignore;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1DTR_1Set_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_DTR_Set;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1DTR_1Clear_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_DTR_Clear;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1DTR_1Ignore_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_DTR_Ignore;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1All_1Set_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_All_Set;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1All_1Clear_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_All_Clear;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1All_1Ignore_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_All_Ignore;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPLO_1RtsCtsFlowControl_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortLinesOptions)XPLO_RtsCtsFlowControl;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsPortInfo *)new XsPortInfo();
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  XsString *arg1 = 0 ;
  XsBaudRate arg2 ;
  XsPortLinesOptions arg3 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg2 = (XsBaudRate)jarg2; 
  arg3 = (XsPortLinesOptions)jarg3; 
  result = (XsPortInfo *)new XsPortInfo((XsString const &)*arg1,arg2,arg3);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsString *arg1 = 0 ;
  XsBaudRate arg2 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg2 = (XsBaudRate)jarg2; 
  result = (XsPortInfo *)new XsPortInfo((XsString const &)*arg1,arg2);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsString *arg1 = 0 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsPortInfo *)new XsPortInfo((XsString const &)*arg1);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  XsBaudRate arg2 ;
  XsPortLinesOptions arg3 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (XsBaudRate)jarg2; 
  arg3 = (XsPortLinesOptions)jarg3; 
  result = (XsPortInfo *)new XsPortInfo(arg1,arg2,arg3);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoClass_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  XsBaudRate arg2 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (XsBaudRate)jarg2; 
  result = (XsPortInfo *)new XsPortInfo(arg1,arg2);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPortInfoClass_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  XsPortInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (XsPortInfo *)new XsPortInfo(arg1);
  *(XsPortInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoClass_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (bool)((XsPortInfo const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1opGreaterThen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsPortInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  result = (bool)((XsPortInfo const *)arg1)->operator >((XsPortInfo const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1opLessThen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsPortInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  result = (bool)((XsPortInfo const *)arg1)->operator <((XsPortInfo const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1opEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsPortInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  result = (bool)((XsPortInfo const *)arg1)->operator ==((XsPortInfo const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1opEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)((XsPortInfo const *)arg1)->operator ==((char const *)arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfoClass_1portNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)((XsPortInfo const *)arg1)->portNumber();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoClass_1portName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = ((XsPortInfo const *)arg1)->portName();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsPortInfoClass_1portName_1c_1str(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (char *)((XsPortInfo const *)arg1)->portName_c_str();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoClass_1setPortName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  (arg1)->setPortName((XsString const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1isUsb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (bool)((XsPortInfo const *)arg1)->isUsb();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1isBluetooth(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (bool)((XsPortInfo const *)arg1)->isBluetooth();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPortInfoClass_1isNetwork(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (bool)((XsPortInfo const *)arg1)->isNetwork();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoClass_1networkServiceName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = ((XsPortInfo const *)arg1)->networkServiceName();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoClass_1bluetoothAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = ((XsPortInfo const *)arg1)->bluetoothAddress();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfoClass_1usbBus(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)((XsPortInfo const *)arg1)->usbBus();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfoClass_1usbAddress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (int)((XsPortInfo const *)arg1)->usbAddress();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfoClass_1baudrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (XsBaudRate)((XsPortInfo const *)arg1)->baudrate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoClass_1setBaudrate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsBaudRate arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = (XsBaudRate)jarg2; 
  (arg1)->setBaudrate(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoClass_1deviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = ((XsPortInfo const *)arg1)->deviceId();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoClass_1setDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsDeviceId arg2 ;
  XsDeviceId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPortInfo **)&jarg1; 
  argp2 = *(XsDeviceId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDeviceId");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setDeviceId(arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsPortInfoClass_1linesOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsPortLinesOptions result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  result = (XsPortLinesOptions)((XsPortInfo const *)arg1)->linesOptions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoClass_1setLinesOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  XsPortLinesOptions arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = (XsPortLinesOptions)jarg2; 
  (arg1)->setLinesOptions(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoClass_1getVidPid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  uint16_t *arg2 = 0 ;
  uint16_t *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = *(uint16_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  arg3 = *(uint16_t **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "uint16_t & reference is null");
    return ;
  } 
  ((XsPortInfo const *)arg1)->getVidPid(*arg2,*arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPortInfoClass_1setVidPid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPortInfo **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  (arg1)->setVidPid(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsPortInfoClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsPortInfo *arg1 = (XsPortInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsPortInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPressure_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsPressure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsPressure *)new XsPressure();
  *(XsPressure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPressure_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  double arg1 ;
  uint8_t arg2 ;
  XsPressure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (XsPressure *)new XsPressure(arg1,arg2);
  *(XsPressure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPressure_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jdouble jarg1) {
  jlong jresult = 0 ;
  double arg1 ;
  XsPressure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  result = (XsPressure *)new XsPressure(arg1);
  *(XsPressure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsPressure_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsPressure *arg1 = 0 ;
  XsPressure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPressure **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPressure const & reference is null");
    return 0;
  } 
  result = (XsPressure *)new XsPressure((XsPressure const &)*arg1);
  *(XsPressure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPressure_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsPressure *arg1 = (XsPressure *) 0 ;
  XsPressure *arg2 = 0 ;
  XsPressure *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPressure **)&jarg1; 
  arg2 = *(XsPressure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPressure const & reference is null");
    return 0;
  } 
  result = (XsPressure *) &(arg1)->operator =((XsPressure const &)*arg2);
  *(XsPressure **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPressure_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsPressure *arg1 = (XsPressure *) 0 ;
  XsPressure *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPressure **)&jarg1; 
  arg2 = *(XsPressure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPressure const & reference is null");
    return 0;
  } 
  result = (bool)((XsPressure const *)arg1)->operator ==((XsPressure const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsPressure_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsPressure *arg1 = (XsPressure *) 0 ;
  XsPressure *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsPressure **)&jarg1; 
  arg2 = *(XsPressure **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPressure const & reference is null");
    return 0;
  } 
  result = (bool)((XsPressure const *)arg1)->operator !=((XsPressure const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPressure_1m_1pressure_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  XsPressure *arg1 = (XsPressure *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPressure **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->m_pressure = arg2;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsPressure_1m_1pressure_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsPressure *arg1 = (XsPressure *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPressure **)&jarg1; 
  result = (double) ((arg1)->m_pressure);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsPressure_1m_1pressureAge_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsPressure *arg1 = (XsPressure *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPressure **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_pressureAge = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsPressure_1m_1pressureAge_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsPressure *arg1 = (XsPressure *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsPressure **)&jarg1; 
  result = (uint8_t) ((arg1)->m_pressureAge);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsPressure(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsPressure *arg1 = (XsPressure *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsPressure **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XHI_1LeftHand_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsHandId result;
  
  (void)jenv;
  (void)jcls;
  result = (XsHandId)XHI_LeftHand;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XHI_1RightHand_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsHandId result;
  
  (void)jenv;
  (void)jcls;
  result = (XsHandId)XHI_RightHand;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSdiData_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  XsReal *arg2 = (XsReal *) 0 ;
  XsReal *arg3 = (XsReal *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSdiData **)&jarg1; 
  arg2 = *(XsReal **)&jarg2; 
  arg3 = *(XsReal **)&jarg3; 
  XsSdiData_construct(arg1,(XsReal const *)arg2,(XsReal const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSdiData_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSdiData **)&jarg1; 
  XsSdiData_destruct(arg1);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsSdiData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsSdiData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsSdiData *)new XsSdiData();
  *(XsSdiData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsSdiData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsVector *arg2 = 0 ;
  XsSdiData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (XsSdiData *)new XsSdiData((XsQuaternion const &)*arg1,(XsVector const &)*arg2);
  *(XsSdiData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsSdiData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSdiData *arg1 = 0 ;
  XsSdiData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSdiData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSdiData const & reference is null");
    return 0;
  } 
  result = (XsSdiData *)new XsSdiData((XsSdiData const &)*arg1);
  *(XsSdiData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSdiData_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  XsSdiData *arg2 = 0 ;
  XsSdiData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsSdiData **)&jarg1; 
  arg2 = *(XsSdiData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSdiData const & reference is null");
    return 0;
  } 
  result = (XsSdiData *) &(arg1)->operator =((XsSdiData const &)*arg2);
  *(XsSdiData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSdiData_1zero(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSdiData **)&jarg1; 
  (arg1)->zero();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSdiData_1orientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSdiData **)&jarg1; 
  result = (XsQuaternion *) &((XsSdiData const *)arg1)->orientationIncrement();
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSdiData_1setOrientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  XsQuaternion *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsSdiData **)&jarg1; 
  arg2 = *(XsQuaternion **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return ;
  } 
  (arg1)->setOrientationIncrement((XsQuaternion const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSdiData_1velocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSdiData **)&jarg1; 
  result = (XsVector3 *) &((XsSdiData const *)arg1)->velocityIncrement();
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSdiData_1setVelocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  XsVector *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsSdiData **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return ;
  } 
  (arg1)->setVelocityIncrement((XsVector const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSdiData_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  XsSdiData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsSdiData **)&jarg1; 
  arg2 = *(XsSdiData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSdiData const & reference is null");
    return 0;
  } 
  result = (bool)((XsSdiData const *)arg1)->operator ==((XsSdiData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsSdiData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsSdiData *arg1 = (XsSdiData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsSdiData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsScrData_1m_1acc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsScrData *arg1 = (XsScrData *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsScrData **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  if (arg1) (arg1)->m_acc = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScrData_1m_1acc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsScrData *arg1 = (XsScrData *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsScrData **)&jarg1; 
  result = (XsUShortVector *)& ((arg1)->m_acc);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsScrData_1m_1gyr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsScrData *arg1 = (XsScrData *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsScrData **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  if (arg1) (arg1)->m_gyr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScrData_1m_1gyr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsScrData *arg1 = (XsScrData *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsScrData **)&jarg1; 
  result = (XsUShortVector *)& ((arg1)->m_gyr);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsScrData_1m_1mag_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsScrData *arg1 = (XsScrData *) 0 ;
  XsUShortVector *arg2 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsScrData **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2; 
  if (arg1) (arg1)->m_mag = *arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScrData_1m_1mag_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsScrData *arg1 = (XsScrData *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsScrData **)&jarg1; 
  result = (XsUShortVector *)& ((arg1)->m_mag);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsScrData_1m_1temp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsScrData *arg1 = (XsScrData *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsScrData **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_temp = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsScrData_1m_1temp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsScrData *arg1 = (XsScrData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsScrData **)&jarg1; 
  result = (uint16_t) ((arg1)->m_temp);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsScrData(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsScrData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsScrData *)new XsScrData();
  *(XsScrData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsScrData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsScrData *arg1 = (XsScrData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsScrData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NOBUS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NOBUS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1BUSNOTREADY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_BUSNOTREADY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDPERIOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDPERIOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDMSG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDMSG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INITBUSFAIL1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INITBUSFAIL1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INITBUSFAIL2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INITBUSFAIL2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INITBUSFAIL3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INITBUSFAIL3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SETBIDFAIL1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SETBIDFAIL1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SETBIDFAIL2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SETBIDFAIL2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL4_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL4;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL5_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL5;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL6_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL6;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1TIMEROVERFLOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_TIMEROVERFLOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1BAUDRATEINVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_BAUDRATEINVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDPARAM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDPARAM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL7_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL7;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAIL8_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAIL8;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1WIRELESSFAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_WIRELESSFAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1DEVICEERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_DEVICEERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1DATAOVERFLOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_DATAOVERFLOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1BUFFEROVERFLOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_BUFFEROVERFLOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1EXTTRIGGERERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_EXTTRIGGERERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SAMPLESTREAMERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SAMPLESTREAMERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1POWER_1DIP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_POWER_DIP;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1POWER_1OVERCURRENT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_POWER_OVERCURRENT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1OVERHEATING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_OVERHEATING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1BATTERYLOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_BATTERYLOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDFILTERPROFILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDFILTERPROFILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDSTOREDSETTINGS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDSTOREDSETTINGS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1ACCESSDENIED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_ACCESSDENIED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1FILEERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_FILEERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1OUTPUTCONFIGERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_OUTPUTCONFIGERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1FILE_1SYSTEM_1CORRUPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_FILE_SYSTEM_CORRUPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1ERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_ERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NOTIMPLEMENTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NOTIMPLEMENTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1TIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_TIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1TIMEOUTNODATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_TIMEOUTNODATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1CHECKSUMFAULT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_CHECKSUMFAULT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1OUTOFMEMORY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_OUTOFMEMORY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NOTFOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NOTFOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1UNEXPECTEDMSG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_UNEXPECTEDMSG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDOPERATION_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDOPERATION;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INSUFFICIENTSPACE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INSUFFICIENTSPACE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INPUTCANNOTBEOPENED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INPUTCANNOTBEOPENED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1OUTPUTCANNOTBEOPENED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_OUTPUTCANNOTBEOPENED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1ALREADYOPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_ALREADYOPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1ENDOFFILE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_ENDOFFILE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1COULDNOTREADSETTINGS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_COULDNOTREADSETTINGS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NODATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NODATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1READONLY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_READONLY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NULLPTR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NULLPTR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INSUFFICIENTDATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INSUFFICIENTDATA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1BUSY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_BUSY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INVALIDINSTANCE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INVALIDINSTANCE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1DATACORRUPT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_DATACORRUPT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1READINITFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_READINITFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NOXMFOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NOXMFOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1DEVICECOUNTZERO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_DEVICECOUNTZERO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MTLOCATIONINVALID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MTLOCATIONINVALID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INSUFFICIENTMTS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INSUFFICIENTMTS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INITFUSIONFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INITFUSIONFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1OTHER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_OTHER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NOFILEOPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NOFILEOPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NOPORTOPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NOPORTOPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1NOFILEORPORTOPEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_NOFILEORPORTOPEN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1PORTNOTFOUND_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_PORTNOTFOUND;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1INITPORTFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_INITPORTFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1CALIBRATIONFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_CALIBRATIONFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1CONFIGCHECKFAIL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_CONFIGCHECKFAIL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1ALREADYDONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_ALREADYDONE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SYNC_1SINGLE_1SLAVE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SYNC_SINGLE_SLAVE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SYNC_1SECOND_1MASTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SYNC_SECOND_MASTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SYNC_1NO_1SYNC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SYNC_NO_SYNC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SYNC_1NO_1MASTER_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SYNC_NO_MASTER;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SYNC_1DATA_1MISSING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SYNC_DATA_MISSING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1VERSION_1TOO_1LOW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_VERSION_TOO_LOW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1VERSION_1PROBLEM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_VERSION_PROBLEM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1ABORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_ABORTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1UNSUPPORTED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_UNSUPPORTED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1PACKETCOUNTERMISSED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_PACKETCOUNTERMISSED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1MEASUREMENTFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_MEASUREMENTFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1STARTRECORDINGFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_STARTRECORDINGFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1STOPRECORDINGFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_STOPRECORDINGFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1RADIO_1CHANNEL_1IN_1USE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_RADIO_CHANNEL_IN_USE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1UNEXPECTED_1DISCONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_UNEXPECTED_DISCONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1TOO_1MANY_1CONNECTED_1TRACKERS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_TOO_MANY_CONNECTED_TRACKERS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1GOTOCONFIGFAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_GOTOCONFIGFAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1OUTOFRANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_OUTOFRANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1BACKINRANGE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_BACKINRANGE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1EXPECTED_1DISCONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_EXPECTED_DISCONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1RESTORE_1COMMUNICATION_1FAILED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_RESTORE_COMMUNICATION_FAILED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1RESTORE_1COMMUNICATION_1STOPPED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_RESTORE_COMMUNICATION_STOPPED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1EXPECTED_1CONNECT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_EXPECTED_CONNECT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1IN_1USE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_IN_USE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1PERFORMANCE_1WARNING_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_PERFORMANCE_WARNING;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1PERFORMANCE_1OK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_PERFORMANCE_OK;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1SHUTTINGDOWN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_SHUTTINGDOWN;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1GNSSCONFIGURATIONERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_GNSSCONFIGURATIONERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1GNSSCOMMTIMEOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_GNSSCOMMTIMEOUT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1GNSSERROR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_GNSSERROR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRV_1DEVICE_1NOT_1CALIBRATED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResultValue)XRV_DEVICE_NOT_CALIBRATED;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1ImcuTimeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_ImcuTimeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1ImcuSettingsInvalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_ImcuSettingsInvalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1ImcuSettingsFailure_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_ImcuSettingsFailure;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1ImcuEmtsWriteFailure_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_ImcuEmtsWriteFailure;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1ImcuEmtsReadFailure_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_ImcuEmtsReadFailure;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1DspCrashed_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_DspCrashed;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1DspBootingTimeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_DspBootingTimeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XERR_1DspSettingsInvalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceErrorType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceErrorType)XERR_DspSettingsInvalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsResultValue_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  XsResultValue arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsResultValue)jarg1; 
  result = (char *)XsResultValue_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1Mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_Mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1NoSignal_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_NoSignal;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1Searching_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_Searching;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1Acquired_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_Acquired;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1Unusable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_Unusable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1CodeTimeOk_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_CodeTimeOk;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1CodeCarrierTimeOk1_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_CodeCarrierTimeOk1;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1CodeCarrierTimeOk2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_CodeCarrierTimeOk2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1SignalQualityIndicator_1CodeCarrierTimeOk3_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_SignalQualityIndicator_CodeCarrierTimeOk3;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1UsedForNavigation_1Mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_UsedForNavigation_Mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1UsedForNavigation_1Used_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_UsedForNavigation_Used;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1HealthFlag_1Mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_HealthFlag_Mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1HealthFlag_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_HealthFlag_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1HealthFlag_1Healthy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_HealthFlag_Healthy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1HealthFlag_1Unhealthy_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_HealthFlag_Unhealthy;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1Differential_1Mask_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_Differential_Mask;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSIF_1Differential_1Available_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSatInfoFlags result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfoFlags)XSIF_Differential_Available;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSatInfo_1m_1gnssId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_gnssId = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsSatInfo_1m_1gnssId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_gnssId);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSatInfo_1m_1svId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_svId = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsSatInfo_1m_1svId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_svId);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSatInfo_1m_1cno_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_cno = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsSatInfo_1m_1cno_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_cno);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSatInfo_1m_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsSatInfo_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_flags);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsSatInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsSatInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsSatInfo *)new XsSatInfo();
  *(XsSatInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsSatInfo *arg1 = (XsSatInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsSatInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1itow_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_itow = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1itow_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  result = (uint32_t) ((arg1)->m_itow);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1numSvs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_numSvs = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1numSvs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_numSvs);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1res1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_res1 = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1res1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_res1);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1res2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_res2 = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1res2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_res2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1res3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_res3 = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1res3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  result = (uint8_t) ((arg1)->m_res3);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1satInfos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  XsSatInfo *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  arg2 = *(XsSatInfo **)&jarg2; 
  {
    size_t ii;
    XsSatInfo *b = (XsSatInfo *) arg1->m_satInfos;
    for (ii = 0; ii < (size_t)60; ii++) b[ii] = *((XsSatInfo *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsRawGnssSatInfo_1m_1satInfos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  XsSatInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  result = (XsSatInfo *)(XsSatInfo *) ((arg1)->m_satInfos);
  *(XsSatInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsRawGnssSatInfo_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  XsRawGnssSatInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  arg2 = *(XsRawGnssSatInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsRawGnssSatInfo const & reference is null");
    return 0;
  } 
  result = (bool)((XsRawGnssSatInfo const *)arg1)->operator ==((XsRawGnssSatInfo const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsRawGnssSatInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsRawGnssSatInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsRawGnssSatInfo *)new XsRawGnssSatInfo();
  *(XsRawGnssSatInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsRawGnssSatInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsRawGnssSatInfo *arg1 = (XsRawGnssSatInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsRawGnssSatInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerData_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1; 
  XsFingerData_construct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerData_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1; 
  XsFingerData_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerData_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsFingerData *arg2 = (XsFingerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerData **)&jarg1; 
  arg2 = *(XsFingerData **)&jarg2; 
  XsFingerData_copy(arg1,(XsFingerData const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerData_1swapClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsFingerData *arg2 = (XsFingerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerData **)&jarg1; 
  arg2 = *(XsFingerData **)&jarg2; 
  XsFingerData_swap(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveData_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveData **)&jarg1; 
  XsGloveData_construct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveData_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveData **)&jarg1; 
  XsGloveData_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveData_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  XsGloveData *arg2 = (XsGloveData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveData **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2; 
  XsGloveData_copy(arg1,(XsGloveData const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveData_1swapClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  XsGloveData *arg2 = (XsGloveData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveData **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2; 
  XsGloveData_swap(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSFINGERSEGMENTCOUNT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(12);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFingerData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsFingerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsFingerData *)new XsFingerData();
  *(XsFingerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFingerData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jint jarg4) {
  jlong jresult = 0 ;
  XsQuaternion *arg1 = 0 ;
  XsVector *arg2 = 0 ;
  XsVector *arg3 = 0 ;
  uint16_t arg4 ;
  XsFingerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsQuaternion **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  arg3 = *(XsVector **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  arg4 = (uint16_t)jarg4; 
  result = (XsFingerData *)new XsFingerData((XsQuaternion const &)*arg1,(XsVector const &)*arg2,(XsVector const &)*arg3,arg4);
  *(XsFingerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFingerData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFingerData *arg1 = 0 ;
  XsFingerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFingerData const & reference is null");
    return 0;
  } 
  result = (XsFingerData *)new XsFingerData((XsFingerData const &)*arg1);
  *(XsFingerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFingerData_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsFingerData *arg2 = 0 ;
  XsFingerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerData **)&jarg1; 
  arg2 = *(XsFingerData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFingerData const & reference is null");
    return 0;
  } 
  result = (XsFingerData *) &(arg1)->operator =((XsFingerData const &)*arg2);
  *(XsFingerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerData_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFingerData_1orientationIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsQuaternion *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1; 
  result = (XsQuaternion *) &((XsFingerData const *)arg1)->orientationIncrement();
  *(XsQuaternion **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFingerData_1velocityIncrement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1; 
  result = (XsVector3 *) &((XsFingerData const *)arg1)->velocityIncrement();
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFingerData_1mag(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsVector3 *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1; 
  result = (XsVector3 *) &((XsFingerData const *)arg1)->mag();
  *(XsVector3 **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsFingerData_1flags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFingerData **)&jarg1; 
  result = (uint16_t)((XsFingerData const *)arg1)->flags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsFingerData_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsFingerData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerData **)&jarg1; 
  arg2 = *(XsFingerData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFingerData const & reference is null");
    return 0;
  } 
  result = (bool)((XsFingerData const *)arg1)->operator ==((XsFingerData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsFingerData_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsFingerData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerData **)&jarg1; 
  arg2 = *(XsFingerData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFingerData const & reference is null");
    return 0;
  } 
  result = (bool)((XsFingerData const *)arg1)->operator !=((XsFingerData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFingerData_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  XsFingerData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerData **)&jarg1; 
  arg2 = *(XsFingerData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFingerData & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_swap_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFingerData *arg1 = 0 ;
  XsFingerData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFingerData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFingerData & reference is null");
    return ;
  } 
  arg2 = *(XsFingerData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFingerData & reference is null");
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsFingerData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsFingerData *arg1 = (XsFingerData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsFingerData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsGloveData_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsGloveData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsGloveData *)new XsGloveData();
  *(XsGloveData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsGloveData_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  uint16_t arg2 ;
  XsFingerData *arg3 = (XsFingerData *) 0 ;
  XsGloveData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (uint16_t)jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = *(XsFingerData **)&jarg3; 
  result = (XsGloveData *)new XsGloveData(arg1,arg2,(XsFingerData const *)arg3);
  *(XsGloveData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsGloveData_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsGloveData *arg1 = 0 ;
  XsGloveData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData const & reference is null");
    return 0;
  } 
  result = (XsGloveData *)new XsGloveData((XsGloveData const &)*arg1);
  *(XsGloveData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsGloveData_1frameNumber(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveData **)&jarg1; 
  result = (uint32_t)((XsGloveData const *)arg1)->frameNumber();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsGloveData_1validSampleFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveData **)&jarg1; 
  result = (uint16_t)((XsGloveData const *)arg1)->validSampleFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsGloveData_1fingerSegmentCount(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)XsGloveData::fingerSegmentCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsGloveData_1fingerData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  int arg2 ;
  XsFingerData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsGloveData **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (XsFingerData *) &((XsGloveData const *)arg1)->fingerData(arg2);
  *(XsFingerData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsGloveData_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  XsGloveData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveData **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData const & reference is null");
    return 0;
  } 
  result = (bool)((XsGloveData const *)arg1)->operator ==((XsGloveData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsGloveData_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  XsGloveData *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveData **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData const & reference is null");
    return 0;
  } 
  result = (bool)((XsGloveData const *)arg1)->operator !=((XsGloveData const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsGloveData_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  XsGloveData *arg2 = 0 ;
  XsGloveData *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveData **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData const & reference is null");
    return 0;
  } 
  result = (XsGloveData *) &(arg1)->operator =((XsGloveData const &)*arg2);
  *(XsGloveData **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsGloveData_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  XsGloveData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveData **)&jarg1; 
  arg2 = *(XsGloveData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_swap_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsGloveData *arg1 = 0 ;
  XsGloveData *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsGloveData **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData & reference is null");
    return ;
  } 
  arg2 = *(XsGloveData **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsGloveData & reference is null");
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsGloveData(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsGloveData *arg1 = (XsGloveData *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsGloveData **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsUShortVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsUShortVector *)new XsUShortVector();
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsUShortVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  unsigned short arg1 ;
  unsigned short arg2 ;
  unsigned short arg3 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (unsigned short)jarg1; 
  arg2 = (unsigned short)jarg2; 
  arg3 = (unsigned short)jarg3; 
  result = (XsUShortVector *)new XsUShortVector(arg1,arg2,arg3);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsUShortVector_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  unsigned short *arg1 = (unsigned short *) 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(unsigned short **)&jarg1; 
  result = (XsUShortVector *)new XsUShortVector((unsigned short const *)arg1);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsUShortVector_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsUShortVector *arg1 = 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsUShortVector **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsUShortVector const & reference is null");
    return 0;
  } 
  result = (XsUShortVector *)new XsUShortVector((XsUShortVector const &)*arg1);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsUShortVector_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsUShortVector *arg1 = (XsUShortVector *) 0 ;
  XsUShortVector *arg2 = 0 ;
  XsUShortVector *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsUShortVector **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsUShortVector const & reference is null");
    return 0;
  } 
  result = (XsUShortVector *) &(arg1)->operator =((XsUShortVector const &)*arg2);
  *(XsUShortVector **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsUShortVector_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsUShortVector *arg1 = (XsUShortVector *) 0 ;
  XsUShortVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsUShortVector **)&jarg1; 
  arg2 = *(XsUShortVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsUShortVector const & reference is null");
    return 0;
  } 
  result = (bool)((XsUShortVector const *)arg1)->operator ==((XsUShortVector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsUShortVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsUShortVector *arg1 = (XsUShortVector *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsUShortVector **)&jarg1; 
  result = ((XsUShortVector const *)arg1)->size();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsUShortVector_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsUShortVector *arg1 = (XsUShortVector *) 0 ;
  int arg2 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsUShortVector **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned short)((XsUShortVector const *)arg1)->at(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsUShortVector_1opSquareBracket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jint jresult = 0 ;
  XsUShortVector *arg1 = (XsUShortVector *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  unsigned short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsUShortVector **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (unsigned short)((XsUShortVector const *)arg1)->operator [](arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsUShortVector_1data(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsUShortVector *arg1 = (XsUShortVector *) 0 ;
  unsigned short *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsUShortVector **)&jarg1; 
  result = (unsigned short *)((XsUShortVector const *)arg1)->data();
  *(unsigned short **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsUShortVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsUShortVector *arg1 = (XsUShortVector *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsUShortVector **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onDeviceStateChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsDeviceState arg3 ;
  XsDeviceState arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = (XsDeviceState)jarg3; 
  arg4 = (XsDeviceState)jarg4; 
  (arg1)->onDeviceStateChanged(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onLiveDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsDataPacket *arg3 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsDataPacket **)&jarg3; 
  (arg1)->onLiveDataAvailable(arg2,(XsDataPacket const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onAllLiveDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevicePtrArray *arg2 = (XsDevicePtrArray *) 0 ;
  XsDataPacketPtrArray *arg3 = (XsDataPacketPtrArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevicePtrArray **)&jarg2; 
  arg3 = *(XsDataPacketPtrArray **)&jarg3; 
  (arg1)->onAllLiveDataAvailable(arg2,(XsDataPacketPtrArray const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onMissedPackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jint jarg5) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  (arg1)->onMissedPackets(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onDataUnavailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  int64_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = (int64_t)jarg3; 
  (arg1)->onDataUnavailable(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onWakeupReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  (arg1)->onWakeupReceived(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onProgressUpdated(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  int arg3 ;
  int arg4 ;
  XsString *arg5 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = *(XsString **)&jarg5; 
  (arg1)->onProgressUpdated(arg2,arg3,arg4,(XsString const *)arg5);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_CallbackManagerXda_1onWriteMessageToLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsMessage *arg3 = (XsMessage *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsMessage **)&jarg3; 
  result = (int)(arg1)->onWriteMessageToLogFile(arg2,(XsMessage const *)arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onBufferedDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsDataPacket *arg3 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsDataPacket **)&jarg3; 
  (arg1)->onBufferedDataAvailable(arg2,(XsDataPacket const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onAllBufferedDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevicePtrArray *arg2 = (XsDevicePtrArray *) 0 ;
  XsDataPacketPtrArray *arg3 = (XsDataPacketPtrArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevicePtrArray **)&jarg2; 
  arg3 = *(XsDataPacketPtrArray **)&jarg3; 
  (arg1)->onAllBufferedDataAvailable(arg2,(XsDataPacketPtrArray const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onConnectivityChanged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsConnectivityState arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = (XsConnectivityState)jarg3; 
  (arg1)->onConnectivityChanged(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onInfoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsInfoRequest arg3 ;
  XsInfoRequest *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  argp3 = *(XsInfoRequest **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsInfoRequest");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->onInfoResponse(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsResultValue arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = (XsResultValue)jarg3; 
  (arg1)->onError(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onNonDataMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsMessage *arg3 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsMessage **)&jarg3; 
  (arg1)->onNonDataMessage(arg2,(XsMessage const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onMessageDetected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsProtocolType arg3 ;
  XsByteArray *arg4 = (XsByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = (XsProtocolType)jarg3; 
  arg4 = *(XsByteArray **)&jarg4; 
  (arg1)->onMessageDetected(arg2,arg3,(XsByteArray const *)arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onMessageReceivedFromDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsMessage *arg3 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsMessage **)&jarg3; 
  (arg1)->onMessageReceivedFromDevice(arg2,(XsMessage const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onMessageSentToDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsMessage *arg3 = (XsMessage *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsMessage **)&jarg3; 
  (arg1)->onMessageSentToDevice(arg2,(XsMessage const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsDataPacket *arg3 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsDataPacket **)&jarg3; 
  (arg1)->onDataAvailable(arg2,(XsDataPacket const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onAllDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevicePtrArray *arg2 = (XsDevicePtrArray *) 0 ;
  XsDataPacketPtrArray *arg3 = (XsDataPacketPtrArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevicePtrArray **)&jarg2; 
  arg3 = *(XsDataPacketPtrArray **)&jarg3; 
  (arg1)->onAllDataAvailable(arg2,(XsDataPacketPtrArray const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onRecordedDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  XsDataPacket *arg3 = (XsDataPacket *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  arg3 = *(XsDataPacket **)&jarg3; 
  (arg1)->onRecordedDataAvailable(arg2,(XsDataPacket const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onAllRecordedDataAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsDevicePtrArray *arg2 = (XsDevicePtrArray *) 0 ;
  XsDataPacketPtrArray *arg3 = (XsDataPacketPtrArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsDevicePtrArray **)&jarg2; 
  arg3 = *(XsDataPacketPtrArray **)&jarg3; 
  (arg1)->onAllRecordedDataAvailable(arg2,(XsDataPacketPtrArray const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onTransmissionRequest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  int arg2 ;
  XsByteArray *arg3 = (XsByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(XsByteArray **)&jarg3; 
  (arg1)->onTransmissionRequest(arg2,(XsByteArray const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1onRestoreCommunication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  XsResultValue arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  arg3 = (XsResultValue)jarg3; 
  (arg1)->onRestoreCommunication((XsString const *)arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1CallbackManagerXda(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CallbackManagerXda *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CallbackManagerXda *)new CallbackManagerXda();
  *(CallbackManagerXda **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1CallbackManagerXda(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1clearCallbackHandlers_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->clearCallbackHandlers(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1clearCallbackHandlers_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  (arg1)->clearCallbackHandlers();
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1addCallbackHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsCallbackPlainC *arg2 = (XsCallbackPlainC *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsCallbackPlainC **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->addCallbackHandler(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1addCallbackHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsCallbackPlainC *arg2 = (XsCallbackPlainC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsCallbackPlainC **)&jarg2; 
  (arg1)->addCallbackHandler(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1removeCallbackHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsCallbackPlainC *arg2 = (XsCallbackPlainC *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsCallbackPlainC **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->removeCallbackHandler(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1removeCallbackHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  XsCallbackPlainC *arg2 = (XsCallbackPlainC *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(XsCallbackPlainC **)&jarg2; 
  (arg1)->removeCallbackHandler(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1clearChainedManagers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  (arg1)->clearChainedManagers();
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1addChainedManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  CallbackManagerXda *arg2 = (CallbackManagerXda *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(CallbackManagerXda **)&jarg2; 
  (arg1)->addChainedManager(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1removeChainedManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  CallbackManagerXda *arg2 = (CallbackManagerXda *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(CallbackManagerXda **)&jarg2; 
  (arg1)->removeChainedManager(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1copyCallbackHandlersTo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  CallbackManagerXda *arg2 = (CallbackManagerXda *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(CallbackManagerXda **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->copyCallbackHandlersTo(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1copyCallbackHandlersTo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  CallbackManagerXda *arg2 = (CallbackManagerXda *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(CallbackManagerXda **)&jarg2; 
  (arg1)->copyCallbackHandlersTo(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1copyCallbackHandlersFrom_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  CallbackManagerXda *arg2 = (CallbackManagerXda *) 0 ;
  bool arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(CallbackManagerXda **)&jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->copyCallbackHandlersFrom(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_CallbackManagerXda_1copyCallbackHandlersFrom_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  CallbackManagerXda *arg1 = (CallbackManagerXda *) 0 ;
  CallbackManagerXda *arg2 = (CallbackManagerXda *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(CallbackManagerXda **)&jarg1; 
  arg2 = *(CallbackManagerXda **)&jarg2; 
  (arg1)->copyCallbackHandlersFrom(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1destroy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->destroy();
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1Deleter_1opRoundBrackets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Communicator::Deleter *arg1 = (Communicator::Deleter *) 0 ;
  Communicator *arg2 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator::Deleter **)&jarg1; 
  arg2 = *(Communicator **)&jarg2; 
  (arg1)->operator ()(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1Communicator_1Deleter(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Communicator::Deleter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Communicator::Deleter *)new Communicator::Deleter();
  *(Communicator::Deleter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1Communicator_1Deleter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Communicator::Deleter *arg1 = (Communicator::Deleter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Communicator::Deleter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1doTransaction_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->doTransaction((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1doTransaction_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage *arg2 = 0 ;
  uint32_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  arg3 = (uint32_t)jarg3; 
  result = (bool)(arg1)->doTransaction((XsMessage const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1doTransaction_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage *arg2 = 0 ;
  XsMessage *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  arg3 = *(XsMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->doTransaction((XsMessage const &)*arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1doTransaction_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage *arg2 = 0 ;
  XsMessage *arg3 = 0 ;
  uint32_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  arg3 = *(XsMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  arg4 = (uint32_t)jarg4; 
  result = (bool)(arg1)->doTransaction((XsMessage const &)*arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1setDefaultTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Communicator *arg1 = (Communicator *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setDefaultTimeout(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1defaultTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (uint32_t)((Communicator const *)arg1)->defaultTimeout();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_Communicator_1lastResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (XsResultValue)((Communicator const *)arg1)->lastResult();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1lastResultText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = ((Communicator const *)arg1)->lastResultText();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1handleMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->handleMessage((XsMessage const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1childDeviceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = ((Communicator const *)arg1)->childDeviceCount();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1masterDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = ((Communicator const *)arg1)->masterDeviceId();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1addReplyObject_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint8_t arg2 ;
  SwigValueWrapper< std::shared_ptr< ReplyObject > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (arg1)->addReplyObject(arg2);
  *(std::shared_ptr< ReplyObject > **)&jresult = new std::shared_ptr< ReplyObject >((const std::shared_ptr< ReplyObject > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1addReplyObject_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint8_t arg2 ;
  XsSize arg3 ;
  XsSize arg4 ;
  uint8_t *arg5 = (uint8_t *) 0 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  SwigValueWrapper< std::shared_ptr< ReplyObject > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = *(uint8_t **)&jarg5; 
  result = (arg1)->addReplyObject(arg2,arg3,arg4,(uint8_t const *)arg5);
  *(std::shared_ptr< ReplyObject > **)&jresult = new std::shared_ptr< ReplyObject >((const std::shared_ptr< ReplyObject > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1addReplyObject_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  ReplyObject *arg2 = (ReplyObject *) 0 ;
  SwigValueWrapper< std::shared_ptr< ReplyObject > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(ReplyObject **)&jarg2; 
  result = (arg1)->addReplyObject(arg2);
  *(std::shared_ptr< ReplyObject > **)&jresult = new std::shared_ptr< ReplyObject >((const std::shared_ptr< ReplyObject > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_Communicator_1gotoConfig_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  bool arg2 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (XsResultValue)(arg1)->gotoConfig(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_Communicator_1gotoConfig_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (XsResultValue)(arg1)->gotoConfig();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_Communicator_1gotoMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (XsResultValue)(arg1)->gotoMeasurement();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_Communicator_1getDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (XsResultValue)(arg1)->getDeviceId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1setGotoConfigTimeout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Communicator *arg1 = (Communicator *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  (arg1)->setGotoConfigTimeout(arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1writeMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->writeMessage((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1flushPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->flushPort();
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1closePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->closePort();
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1scheduleClosePort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->scheduleClosePort();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1isPortOpen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (bool)((Communicator const *)arg1)->isPortOpen();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1portInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = ((Communicator const *)arg1)->portInfo();
  *(XsPortInfo **)&jresult = new XsPortInfo((const XsPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1openPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsPortInfo *arg2 = 0 ;
  OpenPortStage arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  arg3 = (OpenPortStage)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->openPort((XsPortInfo const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1openPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsPortInfo *arg2 = 0 ;
  OpenPortStage arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  arg3 = (OpenPortStage)jarg3; 
  result = (bool)(arg1)->openPort((XsPortInfo const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1openPort_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsPortInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->openPort((XsPortInfo const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1reopenPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  OpenPortStage arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (OpenPortStage)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->reopenPort(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1reopenPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  OpenPortStage arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (OpenPortStage)jarg2; 
  result = (bool)(arg1)->reopenPort(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1reopenPort_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (bool)(arg1)->reopenPort();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1isDockedAt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  Communicator *arg2 = (Communicator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(Communicator **)&jarg2; 
  result = (bool)((Communicator const *)arg1)->isDockedAt(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1setKeepAlive(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Communicator *arg1 = (Communicator *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setKeepAlive(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1closeLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->closeLogFile();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1readMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint8_t arg2 ;
  XsMessage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (arg1)->readMessage(arg2);
  *(XsMessage **)&jresult = new XsMessage((const XsMessage &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1readMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (arg1)->readMessage();
  *(XsMessage **)&jresult = new XsMessage((const XsMessage &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1readMessageFromStartOfFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint8_t arg2 ;
  int arg3 ;
  XsMessage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->readMessageFromStartOfFile(arg2,arg3);
  *(XsMessage **)&jresult = new XsMessage((const XsMessage &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1readMessageFromStartOfFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint8_t arg2 ;
  XsMessage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (arg1)->readMessageFromStartOfFile(arg2);
  *(XsMessage **)&jresult = new XsMessage((const XsMessage &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1readMessagesFromStartOfFile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint8_t arg2 ;
  int arg3 ;
  SwigValueWrapper< std::deque< XsMessage > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (int)jarg3; 
  result = (arg1)->readMessagesFromStartOfFile(arg2,arg3);
  *(std::deque< XsMessage > **)&jresult = new std::deque< XsMessage >((const std::deque< XsMessage > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1readMessagesFromStartOfFile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  uint8_t arg2 ;
  SwigValueWrapper< std::deque< XsMessage > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (arg1)->readMessagesFromStartOfFile(arg2);
  *(std::deque< XsMessage > **)&jresult = new std::deque< XsMessage >((const std::deque< XsMessage > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1loadLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Communicator *arg1 = (Communicator *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  (arg1)->loadLogFile(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1abortLoadLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->abortLoadLogFile();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1openLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->openLogFile((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1logFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = ((Communicator const *)arg1)->logFileName();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1logFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsFilePos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (XsFilePos)((Communicator const *)arg1)->logFileSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1logFileDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = ((Communicator const *)arg1)->logFileDate();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1logFileReadPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsFilePos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (XsFilePos)((Communicator const *)arg1)->logFileReadPosition();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1resetLogFileReadPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->resetLogFileReadPosition();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1isReadingFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (bool)((Communicator const *)arg1)->isReadingFromFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1waitForLastTaskCompletion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Communicator *arg1 = (Communicator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  (arg1)->waitForLastTaskCompletion();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1isLoadLogFileInProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (bool)((Communicator const *)arg1)->isLoadLogFileInProgress();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1allowReprocessing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  result = (bool)((Communicator const *)arg1)->allowReprocessing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_Communicator_1configurationMessageSearchLimit(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)Communicator::configurationMessageSearchLimit();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1setCredentials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  Communicator *arg1 = (Communicator *) 0 ;
  XsString *arg2 = 0 ;
  XsString *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  arg3 = *(XsString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  (arg1)->setCredentials((XsString const &)*arg2,(XsString const &)*arg3);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1sanityCheck(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)((Communicator const *)arg1)->sanityCheck((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1addProtocolHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Communicator *arg1 = (Communicator *) 0 ;
  IProtocolHandler *arg2 = (IProtocolHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(IProtocolHandler **)&jarg2; 
  (arg1)->addProtocolHandler(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1removeProtocolHandler(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Communicator *arg1 = (Communicator *) 0 ;
  XsProtocolType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (XsProtocolType)jarg2; 
  (arg1)->removeProtocolHandler(arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_Communicator_1hasProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Communicator *arg1 = (Communicator *) 0 ;
  XsProtocolType arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = (XsProtocolType)jarg2; 
  result = (bool)((Communicator const *)arg1)->hasProtocol(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_Communicator_1setMasterDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Communicator *arg1 = (Communicator *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Communicator **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  (arg1)->setMasterDevice(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1DataLogger(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataLogger *arg1 = (DataLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataLogger **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_DataLogger_1writeMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  DataLogger *arg1 = (DataLogger *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataLogger **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->writeMessage((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_DataLogger_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataLogger *arg1 = (DataLogger *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataLogger **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XACM_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsAccessControlMode result;
  
  (void)jenv;
  (void)jcls;
  result = (XsAccessControlMode)XACM_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XACM_1BlackList_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsAccessControlMode result;
  
  (void)jenv;
  (void)jcls;
  result = (XsAccessControlMode)XACM_BlackList;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XACM_1WhiteList_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsAccessControlMode result;
  
  (void)jenv;
  (void)jcls;
  result = (XsAccessControlMode)XACM_WhiteList;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSDEVICEID_1PRODUCT_1CODE_1LEN_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(24);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XSDEVICEID_1PRODUCT_1CODE_1INIT_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char *)("");
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isLegacyDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isLegacyDeviceId((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsDeviceId_1legacyBit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (uint64_t)XsDeviceId_legacyBit((XsDeviceId const *)arg1);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtiX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtiX((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtiX0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtiX0((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtiX00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtiX00((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtigX00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtigX00((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtigX10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtigX10((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMti3X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMti3X0((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMti6X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMti6X0((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMti8X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMti8X0((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtw((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtw2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtw2((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtx((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtx2((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isBodyPack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isBodyPack((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isBodyPackV1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isBodyPackV1((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isBodyPackV2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isBodyPackV2((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isWirelessMaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isWirelessMaster((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwindaX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwindaX((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwindaXStation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwindaXStation((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwindaXDongle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwindaXDongle((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwindaXOem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwindaXOem((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwinda2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwinda2((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwinda2Station(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwinda2Station((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwinda2Dongle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwinda2Dongle((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAwinda2Oem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAwinda2Oem((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isSyncStationX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isSyncStationX((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isSyncStation2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isSyncStation2((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isHilDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isHilDevice((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isGlove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isGlove((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsHandId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (XsHandId)XsDeviceId_side((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isDot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isDot((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isRugged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isRugged((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isImu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isImu((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isVru(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isVru((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isAhrs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isAhrs((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isGnss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isGnss((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isRtk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isRtk((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1hasInternalGnss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_hasInternalGnss((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isContainerDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isContainerDevice((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMt((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMti((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtig((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMark4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMark4((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMark5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMark5((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsDeviceId_toString((XsDeviceId const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1fromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsDeviceId_fromString(arg1,(XsString const *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1toDeviceTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  arg3 = (int)jarg3; 
  XsDeviceId_toDeviceTypeString((XsDeviceId const *)arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1fromDeviceTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsDeviceId_fromDeviceTypeString(arg1,(XsString const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isValid((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  XsDeviceId_swap(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  result = (int)XsDeviceId_contains((XsDeviceId const *)arg1,(XsDeviceId const *)arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isType((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1typeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsDeviceId_typeName((XsDeviceId const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  XsDeviceId_type((XsDeviceId const *)arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1deviceType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int arg2 ;
  XsDeviceId *arg3 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(XsDeviceId **)&jarg3; 
  XsDeviceId_deviceType((XsDeviceId const *)arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceId_1deviceTypeMask(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int arg2 ;
  XsDeviceId *arg3 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(XsDeviceId **)&jarg3; 
  XsDeviceId_deviceTypeMask((XsDeviceId const *)arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1X(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_X((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_1((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_2((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_3((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_7((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_X0((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_10((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_20((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_30((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1X00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_X00((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1100(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_100((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1200(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_200((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1300(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_300((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1400(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_400((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1500(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_500((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1600(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_600((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1700(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_700((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1710(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_710((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1800(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_800((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk4_1900(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk4_900((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_1X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_X0((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_10((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_20((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_30((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_1X00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_X00((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_1100(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_100((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_1200(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_200((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_1300(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_300((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceId_1isMtMk5_1710(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (int)XsDeviceId_isMtMk5_710((XsDeviceId const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceIdClass_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint16_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  uint16_t arg5 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  arg5 = (uint16_t)jarg5; 
  result = (XsDeviceId *)new XsDeviceId((char const *)arg1,arg2,arg3,arg4,arg5);
  *(XsDeviceId **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceIdClass_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2, jlong jarg3, jobject jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  uint16_t arg2 ;
  uint32_t arg3 ;
  uint64_t arg4 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint32_t)jarg3; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg4) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg4);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg4, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg4 = 0;
    if (sz > 0) {
      arg4 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg4 = (arg4 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (XsDeviceId *)new XsDeviceId((char const *)arg1,arg2,arg3,arg4);
  *(XsDeviceId **)&jresult = result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceIdClass_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  jlong jresult = 0 ;
  uint64_t arg1 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg1) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return 0;
    }
    clazz = jenv->GetObjectClass(jarg1);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg1, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg1 = 0;
    if (sz > 0) {
      arg1 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg1 = (arg1 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  result = (XsDeviceId *)new XsDeviceId(arg1);
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceIdClass_1_1SWIG_13(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceId *)new XsDeviceId();
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceIdClass_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = 0 ;
  uint16_t arg2 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  arg2 = (uint16_t)jarg2; 
  result = (XsDeviceId *)new XsDeviceId((XsDeviceId const &)*arg1,arg2);
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceIdClass_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = 0 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsDeviceId *)new XsDeviceId((XsDeviceId const &)*arg1);
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsDeviceId *) &(arg1)->operator =((XsDeviceId const &)*arg2);
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsDeviceIdClass_1legacyBit(JNIEnv *jenv, jclass jcls) {
  jobject jresult = 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  result = (uint64_t)XsDeviceId::legacyBit();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isLegacyDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isLegacyDeviceId();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsDeviceIdClass_1toInt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (uint64_t)((XsDeviceId const *)arg1)->toInt();
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1productCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = ((XsDeviceId const *)arg1)->productCode();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1productVariant(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (uint32_t)((XsDeviceId const *)arg1)->productVariant();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceIdClass_1hardwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (uint16_t)((XsDeviceId const *)arg1)->hardwareVersion();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceIdClass_1subDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (uint16_t)((XsDeviceId const *)arg1)->subDevice();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1legacyDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (uint32_t)((XsDeviceId const *)arg1)->legacyDeviceId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtiX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtiX();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtiX0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtiX0();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtiX00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtiX00();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtigX00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtigX00();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtigX10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtigX10();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMti3X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMti3X0();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMti6X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMti6X0();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMti8X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMti8X0();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isGlove(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isGlove();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceIdClass_1side(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsHandId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (XsHandId)((XsDeviceId const *)arg1)->side();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isDot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isDot();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isRugged(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isRugged();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtw(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtw();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtw2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtw2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtx();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtx2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtx2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isBodyPack(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isBodyPack();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isBodyPackV1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isBodyPackV1();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isBodyPackV2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isBodyPackV2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isWirelessMaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isWirelessMaster();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwindaX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwindaX();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwindaXStation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwindaXStation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwindaXDongle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwindaXDongle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwindaXOem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwindaXOem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwinda2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwinda2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwinda2Station(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwinda2Station();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwinda2Dongle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwinda2Dongle();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAwinda2Oem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAwinda2Oem();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isSyncStationX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isSyncStationX();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isSyncStation2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isSyncStation2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isHilDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isHilDevice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isImu(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isImu();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isVru(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isVru();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isAhrs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isAhrs();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isGnss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isGnss();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isRtk(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isRtk();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1hasInternalGnss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->hasInternalGnss();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isContainerDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isContainerDevice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMt();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMti();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtig();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMark4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMark4();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMark5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMark5();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = ((XsDeviceId const *)arg1)->toString();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceIdClass_1fromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  (arg1)->fromString((XsString const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1toDeviceTypeString_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool arg2 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((XsDeviceId const *)arg1)->toDeviceTypeString(arg2);
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1toDeviceTypeString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = ((XsDeviceId const *)arg1)->toDeviceTypeString();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceIdClass_1fromDeviceTypeString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  (arg1)->fromDeviceTypeString((XsString const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceId const *)arg1)->contains((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isType();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1typeName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = ((XsDeviceId const *)arg1)->typeName();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = ((XsDeviceId const *)arg1)->type();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1deviceType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool arg2 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((XsDeviceId const *)arg1)->deviceType(arg2);
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1deviceType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = ((XsDeviceId const *)arg1)->deviceType();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1deviceTypeMask_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool arg2 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((XsDeviceId const *)arg1)->deviceTypeMask(arg2);
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceIdClass_1deviceTypeMask_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = ((XsDeviceId const *)arg1)->deviceTypeMask();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceId const *)arg1)->operator ==((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceId const *)arg1)->operator !=((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1opLessThen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceId const *)arg1)->operator <((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1opLessEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceId const *)arg1)->operator <=((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1opGreaterThen(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceId const *)arg1)->operator >((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1opGreaterEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceId **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceId const *)arg1)->operator >=((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1X(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_X();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_1();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_2();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_3();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_17(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_7();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_X0();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_10();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_20();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_30();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1X00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_X00();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1100(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_100();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1200(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_200();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1300(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_300();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1400(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_400();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1500(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_500();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1600(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_600();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1700(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_700();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1710(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_710();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1800(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_800();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk4_1900(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk4_900();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_1X0(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_X0();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_110(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_10();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_120(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_20();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_130(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_30();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_1X00(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_X00();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_1100(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_100();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_1200(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_200();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_1300(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_300();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceIdClass_1isMtMk5_1710(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1; 
  result = (bool)((XsDeviceId const *)arg1)->isMtMk5_710();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsDeviceIdClass(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsDeviceId *arg1 = (XsDeviceId *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsDeviceId **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_opLeftShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsString *arg1 = 0 ;
  XsDeviceId *arg2 = 0 ;
  XsString *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsString **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString & reference is null");
    return 0;
  } 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsString *) &operator <<(*arg1,(XsDeviceId const &)*arg2);
  *(XsString **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_makeNiceProductCode_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jint jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (int)jarg2; 
  result = makeNiceProductCode((char const *)arg1,arg2);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_makeNiceProductCode_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = makeNiceProductCode((char const *)arg1);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_makeNiceProductCode_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  int arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  arg2 = (int)jarg2; 
  result = makeNiceProductCode((unsigned char const *)arg1,arg2);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_makeNiceProductCode_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(uint8_t **)&jarg1; 
  result = makeNiceProductCode((unsigned char const *)arg1);
  *(std::string **)&jresult = new std::string((const std::string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1toStringClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  XsString *arg2 = (XsString *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = *(XsString **)&jarg2; 
  XsFilterProfile_toString((XsFilterProfile const *)arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsFilterProfile_1emptyClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (int)XsFilterProfile_empty((XsFilterProfile const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1swapClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  XsFilterProfile *arg2 = (XsFilterProfile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = *(XsFilterProfile **)&jarg2; 
  XsFilterProfile_swap(arg1,arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAX_1FILTERPROFILES_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(254);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1FILTERPROFILELABEL_1TERM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((20+1));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1LEN_1FILTERPROFILEKIND_1TERM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((20+1));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAX_1FILTERPROFILES_1IN_1MT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jstring jarg3, jstring jarg4, jchar jarg5, jshort jarg6, jshort jarg7) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char arg5 ;
  uint8_t arg6 ;
  uint8_t arg7 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (char)jarg5; 
  arg6 = (uint8_t)jarg6; 
  arg7 = (uint8_t)jarg7; 
  result = (XsFilterProfile *)new XsFilterProfile(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  *(XsFilterProfile **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jstring jarg3, jstring jarg4, jchar jarg5, jshort jarg6) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char arg5 ;
  uint8_t arg6 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (char)jarg5; 
  arg6 = (uint8_t)jarg6; 
  result = (XsFilterProfile *)new XsFilterProfile(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  *(XsFilterProfile **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jstring jarg3, jstring jarg4, jchar jarg5) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char arg5 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (char)jarg5; 
  result = (XsFilterProfile *)new XsFilterProfile(arg1,arg2,(char const *)arg3,(char const *)arg4,arg5);
  *(XsFilterProfile **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (XsFilterProfile *)new XsFilterProfile(arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(XsFilterProfile **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  char *arg3 = (char *) 0 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (XsFilterProfile *)new XsFilterProfile(arg1,arg2,(char const *)arg3);
  *(XsFilterProfile **)&jresult = result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jshort jarg1, jshort jarg2) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  uint8_t arg2 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  arg2 = (uint8_t)jarg2; 
  result = (XsFilterProfile *)new XsFilterProfile(arg1,arg2);
  *(XsFilterProfile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  result = (XsFilterProfile *)new XsFilterProfile(arg1);
  *(XsFilterProfile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_17(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsFilterProfile *)new XsFilterProfile();
  *(XsFilterProfile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsFilterProfile_1_1SWIG_18(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFilterProfile *arg1 = 0 ;
  XsFilterProfile *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFilterProfile const & reference is null");
    return 0;
  } 
  result = (XsFilterProfile *)new XsFilterProfile((XsFilterProfile const &)*arg1);
  *(XsFilterProfile **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsFilterProfile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsFilterProfile **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsFilterProfile_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (bool)(arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsFilterProfile_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (arg1)->toString();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsFilterProfile_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (uint8_t)((XsFilterProfile const *)arg1)->type();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsFilterProfile_1version(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (uint8_t)((XsFilterProfile const *)arg1)->version();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsFilterProfile_1label(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (char *)((XsFilterProfile const *)arg1)->label();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsFilterProfile_1kind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (char *)((XsFilterProfile const *)arg1)->kind();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jchar JNICALL Java_minimalJNI_XsFilterProfile_1filterType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (char)((XsFilterProfile const *)arg1)->filterType();
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsFilterProfile_1filterMajor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (uint8_t)((XsFilterProfile const *)arg1)->filterMajor();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsFilterProfile_1filterMinor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  result = (uint8_t)((XsFilterProfile const *)arg1)->filterMinor();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1setType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1setVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  (arg1)->setVersion(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1setLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setLabel((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1setKind(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setKind((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1setFilterType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = (char)jarg2; 
  (arg1)->setFilterType(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1setFilterVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  uint8_t arg2 ;
  uint8_t arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  arg3 = (uint8_t)jarg3; 
  (arg1)->setFilterVersion(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsFilterProfile_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  XsFilterProfile *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = *(XsFilterProfile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFilterProfile & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_swap_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsFilterProfile *arg1 = 0 ;
  XsFilterProfile *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFilterProfile **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFilterProfile & reference is null");
    return ;
  } 
  arg2 = *(XsFilterProfile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFilterProfile & reference is null");
    return ;
  } 
  swap(*arg1,*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsFilterProfile_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsFilterProfile *arg1 = (XsFilterProfile *) 0 ;
  XsFilterProfile *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsFilterProfile **)&jarg1; 
  arg2 = *(XsFilterProfile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFilterProfile const & reference is null");
    return 0;
  } 
  result = (bool)((XsFilterProfile const *)arg1)->operator ==((XsFilterProfile const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAX_1CANOUTPUTCONFIGURATIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((16));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCanOutputConfiguration_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  XsCanOutputConfiguration *arg2 = (XsCanOutputConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  arg2 = *(XsCanOutputConfiguration **)&jarg2; 
  XsCanOutputConfiguration_swap(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1frameFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  XsCanFrameFormat arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  arg2 = (XsCanFrameFormat)jarg2; 
  if (arg1) (arg1)->m_frameFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1frameFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  XsCanFrameFormat result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  result = (XsCanFrameFormat) ((arg1)->m_frameFormat);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1dataIdentifier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  XsCanDataIdentifier arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  arg2 = (XsCanDataIdentifier)jarg2; 
  if (arg1) (arg1)->m_dataIdentifier = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1dataIdentifier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  result = (XsCanDataIdentifier) ((arg1)->m_dataIdentifier);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  uint32_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  if (arg1) (arg1)->m_id = arg2;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  result = (uint32_t) ((arg1)->m_id);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1frequency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_frequency = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsCanOutputConfiguration_1m_1frequency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  result = (uint16_t) ((arg1)->m_frequency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsCanOutputConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsCanOutputConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanOutputConfiguration *)new XsCanOutputConfiguration();
  *(XsCanOutputConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsCanOutputConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  jlong jresult = 0 ;
  XsCanFrameFormat arg1 ;
  XsCanDataIdentifier arg2 ;
  uint32_t arg3 ;
  uint16_t arg4 ;
  XsCanOutputConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsCanFrameFormat)jarg1; 
  arg2 = (XsCanDataIdentifier)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (XsCanOutputConfiguration *)new XsCanOutputConfiguration(arg1,arg2,arg3,arg4);
  *(XsCanOutputConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsCanOutputConfiguration_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  XsCanOutputConfiguration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  arg2 = *(XsCanOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsCanOutputConfiguration const & reference is null");
    return 0;
  } 
  result = (bool)((XsCanOutputConfiguration const *)arg1)->operator ==((XsCanOutputConfiguration const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsCanOutputConfiguration_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  XsCanOutputConfiguration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  arg2 = *(XsCanOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsCanOutputConfiguration const & reference is null");
    return 0;
  } 
  result = (bool)((XsCanOutputConfiguration const *)arg1)->operator !=((XsCanOutputConfiguration const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsCanOutputConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsCanOutputConfiguration *arg1 = (XsCanOutputConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsCanOutputConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1MAX_1FREQUENCY_1VAL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0x07FF);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Invalid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Invalid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Error_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Error;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Warning_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Warning;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1SampleTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_SampleTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1GroupCounter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_GroupCounter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1UtcTime_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_UtcTime;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1StatusWord_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_StatusWord;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Quaternion_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Quaternion;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1EulerAngles_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_EulerAngles;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1RotationMatrix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_RotationMatrix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1DeltaV_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_DeltaV;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1RateOfTurn_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_RateOfTurn;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1DeltaQ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_DeltaQ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Acceleration_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Acceleration;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1FreeAcceleration_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_FreeAcceleration;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1MagneticField_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_MagneticField;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Temperature_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Temperature;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1BaroPressure_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_BaroPressure;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1RateOfTurnHR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_RateOfTurnHR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1AccelerationHR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_AccelerationHR;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1LatLong_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_LatLong;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1AltitudeEllipsoid_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_AltitudeEllipsoid;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1PositionEcef_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_PositionEcef_X;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1PositionEcef_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_PositionEcef_Y;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1PositionEcef_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_PositionEcef_Z;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Velocity_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Velocity;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Latitude_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Latitude;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1Longitude_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_Longitude;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1GnssReceiverStatus_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_GnssReceiverStatus;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCDI_1GnssReceiverDop_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanDataIdentifier)XCDI_GnssReceiverDop;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCFF_111Bit_1Identifier_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanFrameFormat result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanFrameFormat)XCFF_11Bit_Identifier;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XCFF_129Bit_1Identifier_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsCanFrameFormat result;
  
  (void)jenv;
  (void)jcls;
  result = (XsCanFrameFormat)XCFF_29Bit_Identifier;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsConnectivityState_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  XsConnectivityState arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsConnectivityState)jarg1; 
  result = (char *)XsConnectivityState_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1DisableAutoStore_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_DisableAutoStore;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1DisableAutoMeasurement_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_DisableAutoMeasurement;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableBeidou_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableBeidou;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1DisableGps_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_DisableGps;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableAhs_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableAhs;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableOrientationSmoother_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableOrientationSmoother;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableConfigurableBusId_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableConfigurableBusId;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableInrunCompassCalibration_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableInrunCompassCalibration;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1DisableSleepMode_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_DisableSleepMode;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableConfigMessageAtStartup_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableConfigMessageAtStartup;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableColdFilterResets_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableColdFilterResets;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnablePositionVelocitySmoother_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnablePositionVelocitySmoother;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1EnableContinuousZRU_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_EnableContinuousZRU;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDOF_1All_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceOptionFlag)XDOF_All;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opOr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsDeviceOptionFlag arg1 ;
  XsDeviceOptionFlag arg2 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDeviceOptionFlag)jarg1; 
  arg2 = (XsDeviceOptionFlag)jarg2; 
  result = (XsDeviceOptionFlag)operator |(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opAnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsDeviceOptionFlag arg1 ;
  XsDeviceOptionFlag arg2 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDeviceOptionFlag)jarg1; 
  arg2 = (XsDeviceOptionFlag)jarg2; 
  result = (XsDeviceOptionFlag)operator &(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opXOr_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsDeviceOptionFlag arg1 ;
  XsDeviceOptionFlag arg2 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDeviceOptionFlag)jarg1; 
  arg2 = (XsDeviceOptionFlag)jarg2; 
  result = (XsDeviceOptionFlag)operator ^(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opNot_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  XsDeviceOptionFlag arg1 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDeviceOptionFlag)jarg1; 
  result = (XsDeviceOptionFlag)operator ~(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceParameter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  XsDeviceParameterIdentifier arg1 ;
  XsDeviceParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDeviceParameterIdentifier)jarg1; 
  result = (XsDeviceParameter *)new XsDeviceParameter(arg1);
  *(XsDeviceParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceParameter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  XsDeviceParameterIdentifier arg1 ;
  int arg2 ;
  XsDeviceParameter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDeviceParameterIdentifier)jarg1; 
  arg2 = (int)jarg2; 
  result = (XsDeviceParameter *)new XsDeviceParameter(arg1,arg2);
  *(XsDeviceParameter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceParameter_1id(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceParameter *arg1 = (XsDeviceParameter *) 0 ;
  XsDeviceParameterIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceParameter **)&jarg1; 
  result = (XsDeviceParameterIdentifier)((XsDeviceParameter const *)arg1)->id();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsDeviceParameter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsDeviceParameter *arg1 = (XsDeviceParameter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsDeviceParameter **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsDeviceState_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  XsDeviceState arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDeviceState)jarg1; 
  result = (char *)XsDeviceState_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDPI_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceParameterIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceParameterIdentifier)XDPI_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDPI_1PacketErrorRate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceParameterIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceParameterIdentifier)XDPI_PacketErrorRate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDPI_1ExtendedBuffer_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceParameterIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceParameterIdentifier)XDPI_ExtendedBuffer;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDPI_1UplinkTimeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceParameterIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceParameterIdentifier)XDPI_UplinkTimeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XDPI_1SyncLossTimeout_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsDeviceParameterIdentifier result;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceParameterIdentifier)XDPI_SyncLossTimeout;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XEM_1Ignore_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsErrorMode result;
  
  (void)jenv;
  (void)jcls;
  result = (XsErrorMode)XEM_Ignore;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XEM_1IncreasePacketCounter_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsErrorMode result;
  
  (void)jenv;
  (void)jcls;
  result = (XsErrorMode)XEM_IncreasePacketCounter;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XEM_1IncreasePacketCounterAndSendError_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsErrorMode result;
  
  (void)jenv;
  (void)jcls;
  result = (XsErrorMode)XEM_IncreasePacketCounterAndSendError;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XEM_1SendErrorAndGoToConfig_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsErrorMode result;
  
  (void)jenv;
  (void)jcls;
  result = (XsErrorMode)XEM_SendErrorAndGoToConfig;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Portable_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Portable;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Stationary_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Stationary;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Pedestrian_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Pedestrian;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Automotive_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Automotive;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1AtSea_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_AtSea;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Airborne1g_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Airborne1g;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Airborne2g_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Airborne2g;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Airborne4g_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Airborne4g;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XGP_1Wrist_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  result = (XsGnssPlatform)XGP_Wrist;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsIccRepMotionResult_1m_1ddtAccuracy_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->m_ddtAccuracy = arg2;
}


SWIGEXPORT jfloat JNICALL Java_minimalJNI_XsIccRepMotionResult_1m_1ddtAccuracy_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  result = (float) ((arg1)->m_ddtAccuracy);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsIccRepMotionResult_1m_1dimension_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_dimension = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsIccRepMotionResult_1m_1dimension_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  result = (uint8_t) ((arg1)->m_dimension);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsIccRepMotionResult_1m_1status_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_status = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsIccRepMotionResult_1m_1status_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  result = (uint8_t) ((arg1)->m_status);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsIccRepMotionResult_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsIccRepMotionResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsIccRepMotionResult *)new XsIccRepMotionResult();
  *(XsIccRepMotionResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsIccRepMotionResult_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsIccRepMotionResult *arg1 = 0 ;
  XsIccRepMotionResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsIccRepMotionResult const & reference is null");
    return 0;
  } 
  result = (XsIccRepMotionResult *)new XsIccRepMotionResult((XsIccRepMotionResult const &)*arg1);
  *(XsIccRepMotionResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_minimalJNI_XsIccRepMotionResult_1ddtAccuracy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  result = (float)((XsIccRepMotionResult const *)arg1)->ddtAccuracy();
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsIccRepMotionResult_1dimension(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  result = (uint8_t)((XsIccRepMotionResult const *)arg1)->dimension();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsIccRepMotionResult_1status(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  result = (uint8_t)((XsIccRepMotionResult const *)arg1)->status();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsIccRepMotionResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsIccRepMotionResult *arg1 = (XsIccRepMotionResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsIccRepMotionResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1Calibrate_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_Calibrate;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1Orientation_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_Orientation;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1KeepLastLiveData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_KeepLastLiveData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1RetainLiveData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_RetainLiveData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1RetainBufferedData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_RetainBufferedData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1OrientationInLiveStream_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_OrientationInLiveStream;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1OrientationInBufferedStream_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_OrientationInBufferedStream;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1ApplyOrientationResetToCalData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_ApplyOrientationResetToCalData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1InterpolateMissingData_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_InterpolateMissingData;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1SkipDataBundling_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_SkipDataBundling;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1ExpectNoRetransmissionsInFile_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_ExpectNoRetransmissionsInFile;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSO_1Reserved_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  result = (XsOption)XSO_Reserved;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opOr_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsOption arg1 ;
  XsOption arg2 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsOption)jarg1; 
  arg2 = (XsOption)jarg2; 
  result = (XsOption)operator |(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opAnd_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsOption arg1 ;
  XsOption arg2 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsOption)jarg1; 
  arg2 = (XsOption)jarg2; 
  result = (XsOption)operator &(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opXOr_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  XsOption arg1 ;
  XsOption arg2 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsOption)jarg1; 
  arg2 = (XsOption)jarg2; 
  result = (XsOption)operator ^(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_opNot_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  XsOption arg1 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsOption)jarg1; 
  result = (XsOption)operator ~(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsOption_1purify(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  XsOption arg1 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsOption)jarg1; 
  result = (XsOption)XsOption_purify(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XS_1MAX_1OUTPUTCONFIGURATIONS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)((32));
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfiguration_1swap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  XsOutputConfiguration *arg2 = (XsOutputConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2; 
  XsOutputConfiguration_swap(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfiguration_1m_1dataIdentifier_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  XsDataIdentifier arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  if (arg1) (arg1)->m_dataIdentifier = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsOutputConfiguration_1m_1dataIdentifier_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  XsDataIdentifier result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  result = (XsDataIdentifier) ((arg1)->m_dataIdentifier);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfiguration_1m_1frequency_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_frequency = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsOutputConfiguration_1m_1frequency_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  result = (uint16_t) ((arg1)->m_frequency);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsOutputConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsOutputConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsOutputConfiguration *)new XsOutputConfiguration();
  *(XsOutputConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsOutputConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  XsDataIdentifier arg1 ;
  uint16_t arg2 ;
  XsOutputConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsDataIdentifier)jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (XsOutputConfiguration *)new XsOutputConfiguration(arg1,arg2);
  *(XsOutputConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsOutputConfiguration_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return 0;
  } 
  result = (bool)((XsOutputConfiguration const *)arg1)->operator ==((XsOutputConfiguration const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsOutputConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsOutputConfigurationArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsOutputConfiguration *arg2 = (XsOutputConfiguration *) 0 ;
  XsSize *argp1 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(XsOutputConfiguration **)&jarg2; 
  result = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *)new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >(arg1,(XsOutputConfiguration const *)arg2);
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsOutputConfigurationArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  XsSize arg1 ;
  XsSize *argp1 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(XsSize **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg1 = *argp1; 
  result = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *)new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >(arg1);
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsOutputConfigurationArray_1_1SWIG_12(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *)new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >();
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsOutputConfigurationArray_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *arg1 = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *)new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const &)*arg1);
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsOutputConfigurationArray_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  XsOutputConfiguration *arg1 = (XsOutputConfiguration *) 0 ;
  XsSize arg2 ;
  XsDataFlags arg3 ;
  XsSize *argp2 ;
  XsDataFlags *argp3 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsOutputConfiguration **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsDataFlags **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsDataFlags");
    return 0;
  }
  arg3 = *argp3; 
  result = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *)new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >(arg1,arg2,arg3);
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsOutputConfigurationArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsOutputConfigurationArray_1opEquals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (bool)((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->operator ==((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsOutputConfigurationArray_1opUnequals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (bool)((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->operator !=((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1reserved(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->reserved();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1descriptor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsArrayDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = (XsArrayDescriptor *) &((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->descriptor();
  *(XsArrayDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< 1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->begin();
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator **)&jresult = new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator((const XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< 1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->end();
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator **)&jresult = new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator((const XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1rbegin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< -1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->rbegin();
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator **)&jresult = new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator((const XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1rend(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< -1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->rend();
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator **)&jresult = new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator((const XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1opSquareBracket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  int arg2 ;
  XsOutputConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (XsOutputConfiguration *) &((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->operator [](arg2);
  *(XsOutputConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1value(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsOutputConfiguration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->value(arg2);
  *(XsOutputConfiguration **)&jresult = new XsOutputConfiguration((const XsOutputConfiguration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1first(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->first();
  *(XsOutputConfiguration **)&jresult = new XsOutputConfiguration((const XsOutputConfiguration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1last(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->last();
  *(XsOutputConfiguration **)&jresult = new XsOutputConfiguration((const XsOutputConfiguration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1at(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsOutputConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsOutputConfiguration *) &((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->at(arg2);
  *(XsOutputConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1insert_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  XsSize arg3 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return ;
  } 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insert((XsOutputConfiguration const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1insert_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = (XsOutputConfiguration *) 0 ;
  XsSize arg3 ;
  XsSize arg4 ;
  XsSize *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->insert((XsOutputConfiguration const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1insert_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< 1 > > arg3 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return ;
  } 
  argp3 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insert((XsOutputConfiguration const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1insert_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< -1 > > arg3 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return ;
  } 
  argp3 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->insert((XsOutputConfiguration const &)*arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1insert_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = (XsOutputConfiguration *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< 1 > > arg3 ;
  XsSize arg4 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2; 
  argp3 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_iterator");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->insert((XsOutputConfiguration const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1insert_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = (XsOutputConfiguration *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImplConst< -1 > > arg3 ;
  XsSize arg4 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator *argp3 ;
  XsSize *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2; 
  argp3 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::const_reverse_iterator");
    return ;
  }
  arg3 = *argp3; 
  argp4 = *(XsSize **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->insert((XsOutputConfiguration const *)arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1push_1back(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return ;
  } 
  (arg1)->push_back((XsOutputConfiguration const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1pop_1back_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->pop_back(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1pop_1back_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  (arg1)->pop_back();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1push_1front(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return ;
  } 
  (arg1)->push_front((XsOutputConfiguration const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1pop_1front_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->pop_front(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1pop_1front_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  (arg1)->pop_front();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->size();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1erase_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->erase(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1erase_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->erase(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1erase_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImpl< 1 > > arg2 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::iterator *argp2 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImpl< 1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::iterator **)&jresult = new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::iterator((const XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1erase_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImpl< -1 > > arg2 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::reverse_iterator *argp2 ;
  SwigValueWrapper< XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::IteratorImpl< -1 > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::reverse_iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::reverse_iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (arg1)->erase(arg2);
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::reverse_iterator **)&jresult = new XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::reverse_iterator((const XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::reverse_iterator &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsOutputConfiguration *arg3 = (XsOutputConfiguration *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsOutputConfiguration **)&jarg3; 
  (arg1)->assign(arg2,(XsOutputConfiguration const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1resize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->resize(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1setSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setSize(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1append(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const & reference is null");
    return ;
  } 
  (arg1)->append((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *arg2 = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const & reference is null");
    return 0;
  } 
  result = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *) &(arg1)->operator =((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl const &)*arg2);
  *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsOutputConfigurationArray_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = (bool)((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1inherited(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfigurationArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  result = (XsOutputConfigurationArray *) &((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->inherited();
  *(XsOutputConfigurationArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1swap_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray >::ArrayImpl & reference is null");
    return ;
  } 
  (arg1)->swap(*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1swap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsSize arg2 ;
  XsSize arg3 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->swap(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1opLeftShift(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  XsOutputConfigurationArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return 0;
  } 
  result = (XsOutputConfigurationArray *) &(arg1)->operator <<((XsOutputConfiguration const &)*arg2);
  *(XsOutputConfigurationArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsOutputConfigurationArray_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsOutputConfiguration *arg2 = 0 ;
  ptrdiff_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsOutputConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfiguration const & reference is null");
    return 0;
  } 
  result = ((XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > const *)arg1)->find((XsOutputConfiguration const &)*arg2);
  *(ptrdiff_t **)&jresult = new ptrdiff_t((const ptrdiff_t &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1removeDuplicates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  (arg1)->removeDuplicates();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1removeDuplicatesPredicate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  XsArrayItemCompareFunc arg2 = (XsArrayItemCompareFunc) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  arg2 = *(XsArrayItemCompareFunc *)&jarg2; 
  (arg1)->removeDuplicatesPredicate(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1sort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  (arg1)->sort();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsOutputConfigurationArray_1reverse(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *arg1 = (XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsArrayImpl< XsOutputConfiguration,g_xsOutputConfigurationArrayDescriptor,XsOutputConfigurationArray > **)&jarg1; 
  (arg1)->reverse();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_g_1xsOutputConfigurationArrayDescriptor_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsArrayDescriptor *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsArrayDescriptor *)&g_xsOutputConfigurationArrayDescriptor;
  *(XsArrayDescriptor **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XPT_1Xbus_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsProtocolType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsProtocolType)XPT_Xbus;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRR_1Unknown_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (XsRejectReason)XRR_Unknown;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRR_1VersionMismatch_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (XsRejectReason)XRR_VersionMismatch;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRR_1Blacklisted_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (XsRejectReason)XRR_Blacklisted;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRR_1StationIsDisconnecting_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (XsRejectReason)XRR_StationIsDisconnecting;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRR_1SystemIsOperational_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsRejectReason result;
  
  (void)jenv;
  (void)jcls;
  result = (XsRejectReason)XRR_SystemIsOperational;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_XsRejectReason_1toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  XsRejectReason arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsRejectReason)jarg1; 
  result = (char *)XsRejectReason_toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_minimalJNI_toString(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  XsRejectReason arg1 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsRejectReason)jarg1; 
  result = (char *)toString(arg1);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1StoreAlignmentMatrix_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_StoreAlignmentMatrix;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1Heading_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_Heading;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1Object_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_Object;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1Inclination_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_Inclination;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1Alignment_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_Alignment;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1Global_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_Global;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1DefaultHeading_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_DefaultHeading;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1DefaultInclination_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_DefaultInclination;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XRM_1DefaultAlignment_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsResetMethod result;
  
  (void)jenv;
  (void)jcls;
  result = (XsResetMethod)XRM_DefaultAlignment;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1X_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_X;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Y_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Y;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Z_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Z;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1AccShift_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_AccShift;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1AccX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_AccX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1AccY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_AccY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1AccZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_AccZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1GyrShift_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_GyrShift;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1GyrX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_GyrX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1GyrY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_GyrY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1GyrZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_GyrZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1MagShift_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_MagShift;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1MagX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_MagX;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1MagY_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_MagY;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1MagZ_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_MagZ;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Baro_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Baro;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Gnss_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Gnss;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Battery_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Battery;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Flash_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Flash;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Button_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Button;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSTF_1Sync_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsSelfTestFlag result;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestFlag)XSTF_Sync;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsSelfTestResult_1m_1flags_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_flags = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsSelfTestResult_1m_1flags_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (uint16_t) ((arg1)->m_flags);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsSelfTestResult_1create(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  XsSelfTestResult result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  result = XsSelfTestResult::create(arg1);
  *(XsSelfTestResult **)&jresult = new XsSelfTestResult((const XsSelfTestResult &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1accX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->accX();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1accY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->accY();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1accZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->accZ();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1gyrX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->gyrX();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1gyrY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->gyrY();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1gyrZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->gyrZ();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1magX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->magX();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1magY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->magY();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1magZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->magZ();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1baro(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->baro();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1gnss(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->gnss();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1battery(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->battery();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1flash(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->flash();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1button(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->button();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsSelfTestResult_1sync(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  result = (bool)((XsSelfTestResult const *)arg1)->sync();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsSelfTestResult(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsSelfTestResult *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsSelfTestResult *)new XsSelfTestResult();
  *(XsSelfTestResult **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsSelfTestResult(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsSelfTestResult *arg1 = (XsSelfTestResult *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsSelfTestResult **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1None_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_None;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1HCHDM_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_HCHDM;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1HCHDG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_HCHDG;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1TSS2_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_TSS2;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1PHTRO_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_PHTRO;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1PRDID_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_PRDID;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1EM1000_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_EM1000;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1PSONCMS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_PSONCMS;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1HCMTW_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_HCMTW;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1HEHDT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_HEHDT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1HEROT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_HEROT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1GPGGA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_GPGGA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1PTCF_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_PTCF;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1XSVEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_XSVEL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1GPZDA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_GPZDA;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XSOT_1GPRMC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  XsStringOutputType result;
  
  (void)jenv;
  (void)jcls;
  result = (XsStringOutputType)XSOT_GPRMC;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1IProtocolHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IProtocolHandler *arg1 = (IProtocolHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(IProtocolHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_IProtocolHandler_1findMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  IProtocolHandler *arg1 = (IProtocolHandler *) 0 ;
  XsProtocolType *arg2 = 0 ;
  XsByteArray *arg3 = 0 ;
  MessageLocation result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IProtocolHandler **)&jarg1; 
  arg2 = *(XsProtocolType **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsProtocolType & reference is null");
    return 0;
  } 
  arg3 = *(XsByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsByteArray const & reference is null");
    return 0;
  } 
  result = ((IProtocolHandler const *)arg1)->findMessage(*arg2,(XsByteArray const &)*arg3);
  *(MessageLocation **)&jresult = new MessageLocation((const MessageLocation &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_IProtocolHandler_1convertToMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  IProtocolHandler *arg1 = (IProtocolHandler *) 0 ;
  MessageLocation *arg2 = 0 ;
  XsByteArray *arg3 = 0 ;
  XsMessage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(IProtocolHandler **)&jarg1; 
  arg2 = *(MessageLocation **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "MessageLocation & reference is null");
    return 0;
  } 
  arg3 = *(XsByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsByteArray const & reference is null");
    return 0;
  } 
  result = ((IProtocolHandler const *)arg1)->convertToMessage(*arg2,(XsByteArray const &)*arg3);
  *(XsMessage **)&jresult = new XsMessage((const XsMessage &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_IProtocolHandler_1minimumMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IProtocolHandler *arg1 = (IProtocolHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IProtocolHandler **)&jarg1; 
  result = (int)((IProtocolHandler const *)arg1)->minimumMessageSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_IProtocolHandler_1maximumMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IProtocolHandler *arg1 = (IProtocolHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IProtocolHandler **)&jarg1; 
  result = (int)((IProtocolHandler const *)arg1)->maximumMessageSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_IProtocolHandler_1type(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IProtocolHandler *arg1 = (IProtocolHandler *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IProtocolHandler **)&jarg1; 
  result = (int)((IProtocolHandler const *)arg1)->type();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_IProtocolHandler_1ignoreMaximumMessageSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  IProtocolHandler *arg1 = (IProtocolHandler *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IProtocolHandler **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ignoreMaximumMessageSize(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_MessageLocation_1m_1startPos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_startPos = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_MessageLocation_1m_1startPos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  result = (int) ((arg1)->m_startPos);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_MessageLocation_1m_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_size = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_MessageLocation_1m_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  result = (int) ((arg1)->m_size);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_MessageLocation_1m_1incompletePos_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_incompletePos = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_MessageLocation_1m_1incompletePos_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  result = (int) ((arg1)->m_incompletePos);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_MessageLocation_1m_1incompleteSize_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->m_incompleteSize = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_MessageLocation_1m_1incompleteSize_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  result = (int) ((arg1)->m_incompleteSize);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1MessageLocation_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  MessageLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (MessageLocation *)new MessageLocation(arg1,arg2,arg3,arg4);
  *(MessageLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1MessageLocation_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  MessageLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (MessageLocation *)new MessageLocation(arg1,arg2,arg3);
  *(MessageLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1MessageLocation_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  MessageLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (MessageLocation *)new MessageLocation(arg1,arg2);
  *(MessageLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1MessageLocation_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  MessageLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (MessageLocation *)new MessageLocation(arg1);
  *(MessageLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1MessageLocation_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  MessageLocation *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (MessageLocation *)new MessageLocation();
  *(MessageLocation **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_MessageLocation_1isValid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MessageLocation **)&jarg1; 
  result = (bool)((MessageLocation const *)arg1)->isValid();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1MessageLocation(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MessageLocation *arg1 = (MessageLocation *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MessageLocation **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_OPS_1OpenPort_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenPortStage result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenPortStage)OPS_OpenPort;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_OPS_1InitDevice_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenPortStage result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenPortStage)OPS_InitDevice;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_OPS_1InitStart_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenPortStage result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenPortStage)OPS_InitStart;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_OPS_1Full_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  OpenPortStage result;
  
  (void)jenv;
  (void)jcls;
  result = (OpenPortStage)OPS_Full;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1ReplyObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReplyObject *arg1 = (ReplyObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReplyObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_ReplyObject_1setMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  ReplyObject *arg1 = (ReplyObject *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ReplyObject **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->setMessage((XsMessage const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_ReplyObject_1message(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  ReplyObject *arg1 = (ReplyObject *) 0 ;
  uint32_t arg2 ;
  XsMessage result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReplyObject **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (arg1)->message(arg2);
  *(XsMessage **)&jresult = new XsMessage((const XsMessage &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_ReplyObject_1isReplyFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  ReplyObject *arg1 = (ReplyObject *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(ReplyObject **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isReplyFor((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_ReplyObject_1msgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  ReplyObject *arg1 = (ReplyObject *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReplyObject **)&jarg1; 
  result = (uint8_t)((ReplyObject const *)arg1)->msgId();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1MidReplyObject(JNIEnv *jenv, jclass jcls, jshort jarg1) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  MidReplyObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  result = (MidReplyObject *)new MidReplyObject(arg1);
  *(MidReplyObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1MidReplyObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MidReplyObject *arg1 = (MidReplyObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MidReplyObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_MidReplyObject_1isReplyFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MidReplyObject *arg1 = (MidReplyObject *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MidReplyObject **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isReplyFor((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_MidReplyObject_1msgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  MidReplyObject *arg1 = (MidReplyObject *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MidReplyObject **)&jarg1; 
  result = (uint8_t)((MidReplyObject const *)arg1)->msgId();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1MidAndDataReplyObject(JNIEnv *jenv, jclass jcls, jshort jarg1, jlong jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  uint8_t arg1 ;
  XsSize arg2 ;
  XsSize arg3 ;
  uint8_t *arg4 = (uint8_t *) 0 ;
  XsSize *argp2 ;
  XsSize *argp3 ;
  MidAndDataReplyObject *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint8_t)jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = *(XsSize **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg3 = *argp3; 
  arg4 = *(uint8_t **)&jarg4; 
  result = (MidAndDataReplyObject *)new MidAndDataReplyObject(arg1,arg2,arg3,(uint8_t const *)arg4);
  *(MidAndDataReplyObject **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1MidAndDataReplyObject(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  MidAndDataReplyObject *arg1 = (MidAndDataReplyObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(MidAndDataReplyObject **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_MidAndDataReplyObject_1setData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  MidAndDataReplyObject *arg1 = (MidAndDataReplyObject *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MidAndDataReplyObject **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  (arg1)->setData((uint8_t const *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_MidAndDataReplyObject_1isReplyFor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  MidAndDataReplyObject *arg1 = (MidAndDataReplyObject *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(MidAndDataReplyObject **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->isReplyFor((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_MidAndDataReplyObject_1msgId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  MidAndDataReplyObject *arg1 = (MidAndDataReplyObject *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(MidAndDataReplyObject **)&jarg1; 
  result = (uint8_t)((MidAndDataReplyObject const *)arg1)->msgId();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1construct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  XsDeviceConfiguration_construct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1assign(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsSize arg2 ;
  XsDeviceConfiguration *arg3 = (XsDeviceConfiguration *) 0 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  arg3 = *(XsDeviceConfiguration **)&jarg3; 
  XsDeviceConfiguration_assign(arg1,arg2,(XsDeviceConfiguration const *)arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  XsDeviceConfiguration_destruct(arg1);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1copy(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsDeviceConfiguration *arg2 = (XsDeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsDeviceConfiguration **)&jarg2; 
  XsDeviceConfiguration_copy(arg1,(XsDeviceConfiguration const *)arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDeviceConfiguration_1emptyClass(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  result = (int)XsDeviceConfiguration_empty((XsDeviceConfiguration const *)arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1findDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsDeviceId *arg2 = (XsDeviceId *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2; 
  result = XsDeviceConfiguration_findDevice((XsDeviceConfiguration const *)arg1,(XsDeviceId const *)arg2);
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1deviceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->m_deviceId = arg2;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1deviceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint64_t) ((arg1)->m_deviceId);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1reserved_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_reserved;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1reserved_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_reserved);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterProfile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_filterProfile = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterProfile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint16_t) ((arg1)->m_filterProfile);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1fwRevMajor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_fwRevMajor = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1fwRevMajor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint8_t) ((arg1)->m_fwRevMajor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1fwRevMinor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_fwRevMinor = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1fwRevMinor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint8_t) ((arg1)->m_fwRevMinor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1fwRevRevision_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_fwRevRevision = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1fwRevRevision_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint8_t) ((arg1)->m_fwRevRevision);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  char arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->m_filterType = arg2;
}


SWIGEXPORT jchar JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (char) ((arg1)->m_filterType);
  jresult = (jchar)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterMajor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_filterMajor = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterMajor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint8_t) ((arg1)->m_filterMajor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterMinor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  arg2 = (uint8_t)jarg2; 
  if (arg1) (arg1)->m_filterMinor = arg2;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsMtDeviceConfiguration_1m_1filterMinor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  uint8_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  result = (uint8_t) ((arg1)->m_filterMinor);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMtDeviceConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMtDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMtDeviceConfiguration *)new XsMtDeviceConfiguration();
  *(XsMtDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMtDeviceConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMtDeviceConfiguration *arg1 = (XsMtDeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMtDeviceConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1masterDeviceId_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  {
    jclass clazz;
    jmethodID mid;
    jbyteArray ba;
    jbyte* bae;
    jsize sz;
    int i;
    
    if (!jarg2) {
      SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "BigInteger null");
      return ;
    }
    clazz = jenv->GetObjectClass(jarg2);
    mid = jenv->GetMethodID(clazz, "toByteArray", "()[B");
    ba = (jbyteArray)jenv->CallObjectMethod(jarg2, mid);
    bae = jenv->GetByteArrayElements(ba, 0);
    sz = jenv->GetArrayLength(ba);
    arg2 = 0;
    if (sz > 0) {
      arg2 = (uint64_t)(signed char)bae[0];
      for(i=1; i<sz; i++) {
        arg2 = (arg2 << 8) | (uint64_t)(unsigned char)bae[i];
      }
    }
    jenv->ReleaseByteArrayElements(ba, bae, 0);
  }
  if (arg1) (arg1)->m_masterDeviceId = arg2;
}


SWIGEXPORT jobject JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1masterDeviceId_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jobject jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint64_t) ((arg1)->m_masterDeviceId);
  {
    jbyteArray ba = jenv->NewByteArray(9);
    jbyte* bae = jenv->GetByteArrayElements(ba, 0);
    jclass clazz = jenv->FindClass("java/math/BigInteger");
    jmethodID mid = jenv->GetMethodID(clazz, "<init>", "([B)V");
    jobject bigint;
    int i;
    
    bae[0] = 0;
    for(i=1; i<9; i++ ) {
      bae[i] = (jbyte)(result>>8*(8-i));
    }
    
    jenv->ReleaseByteArrayElements(ba, bae, 0);
    bigint = jenv->NewObject(clazz, mid, ba);
    jenv->DeleteLocalRef(ba);
    jresult = bigint;
  }
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1samplingPeriod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_samplingPeriod = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1samplingPeriod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint16_t) ((arg1)->m_samplingPeriod);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1outputSkipFactor_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint16_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  if (arg1) (arg1)->m_outputSkipFactor = arg2;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1outputSkipFactor_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint16_t) ((arg1)->m_outputSkipFactor);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1reserved1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_reserved1;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1reserved1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_reserved1);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1date_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_date;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1date_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_date);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_time;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_time);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1productCode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_productCode;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1productCode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_productCode);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1reserved2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  {
    size_t ii;
    uint8_t *b = (uint8_t *) arg1->m_reserved2;
    for (ii = 0; ii < (size_t)44; ii++) b[ii] = *((uint8_t *) arg2 + ii);
  }
  
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsMasterDeviceConfiguration_1m_1reserved2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  uint8_t *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  result = (uint8_t *)(uint8_t *) ((arg1)->m_reserved2);
  *(uint8_t **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsMasterDeviceConfiguration(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsMasterDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsMasterDeviceConfiguration *)new XsMasterDeviceConfiguration();
  *(XsMasterDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsMasterDeviceConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsMasterDeviceConfiguration *arg1 = (XsMasterDeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsMasterDeviceConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceConfigurationException(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsDeviceConfigurationException *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceConfigurationException *)new XsDeviceConfigurationException();
  *(XsDeviceConfigurationException **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsDeviceConfigurationException(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsDeviceConfigurationException *arg1 = (XsDeviceConfigurationException *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsDeviceConfigurationException **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceConfiguration_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  uint16_t arg1 ;
  XsDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (uint16_t)jarg1; 
  result = (XsDeviceConfiguration *)new XsDeviceConfiguration(arg1);
  *(XsDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceConfiguration_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsDeviceConfiguration *)new XsDeviceConfiguration();
  *(XsDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsDeviceConfiguration_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = 0 ;
  XsDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceConfiguration const & reference is null");
    return 0;
  } 
  result = (XsDeviceConfiguration *)new XsDeviceConfiguration((XsDeviceConfiguration const &)*arg1);
  *(XsDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1opSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsDeviceConfiguration *arg2 = 0 ;
  XsDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsDeviceConfiguration **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceConfiguration const & reference is null");
    return 0;
  } 
  result = (XsDeviceConfiguration *) &(arg1)->operator =((XsDeviceConfiguration const &)*arg2);
  *(XsDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsDeviceConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceConfiguration_1empty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  result = (bool)((XsDeviceConfiguration const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1readFromMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->readFromMessage((XsMessage const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1writeToMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return ;
  } 
  ((XsDeviceConfiguration const *)arg1)->writeToMessage(*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDeviceConfiguration_1containsDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDeviceConfiguration const *)arg1)->containsDevice((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1deviceInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsDeviceId *arg2 = 0 ;
  XsMtDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsMtDeviceConfiguration *) &((XsDeviceConfiguration const *)arg1)->deviceInfo((XsDeviceId const &)*arg2);
  *(XsMtDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1XsDeviceConfiguration_1deviceInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsDeviceId *arg2 = 0 ;
  XsMtDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsMtDeviceConfiguration *) &(arg1)->deviceInfo((XsDeviceId const &)*arg2);
  *(XsMtDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1XsDeviceConfiguration_1deviceInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsMtDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsMtDeviceConfiguration *) &(arg1)->deviceInfo(arg2);
  *(XsMtDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1deviceInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsMtDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = (XsMtDeviceConfiguration *) &((XsDeviceConfiguration const *)arg1)->deviceInfo(arg2);
  *(XsMtDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1XsDeviceConfiguration_1masterInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsMasterDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  result = (XsMasterDeviceConfiguration *) &(arg1)->masterInfo();
  *(XsMasterDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1masterInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsMasterDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  result = (XsMasterDeviceConfiguration *) &((XsDeviceConfiguration const *)arg1)->masterInfo();
  *(XsMasterDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDeviceConfiguration_1setNumberOfDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->setNumberOfDevices(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1numberOfDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  result = ((XsDeviceConfiguration const *)arg1)->numberOfDevices();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDeviceConfiguration_1deviceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceConfiguration *arg1 = (XsDeviceConfiguration *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceConfiguration **)&jarg1; 
  result = ((XsDeviceConfiguration const *)arg1)->deviceCount();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1CallbackHandler_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  CallbackHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (CallbackHandler *)new CallbackHandler(arg1);
  *(CallbackHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1CallbackHandler_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  CallbackHandler *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (CallbackHandler *)new CallbackHandler();
  *(CallbackHandler **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1CallbackHandler(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  CallbackHandler *arg1 = (CallbackHandler *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(CallbackHandler **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_CallbackHandler_1packetAvailable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  CallbackHandler *arg1 = (CallbackHandler *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackHandler **)&jarg1; 
  result = (bool)((CallbackHandler const *)arg1)->packetAvailable();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_CallbackHandler_1getNextPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  CallbackHandler *arg1 = (CallbackHandler *) 0 ;
  XsDataPacket result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(CallbackHandler **)&jarg1; 
  result = (arg1)->getNextPacket();
  *(XsDataPacket **)&jresult = new XsDataPacket((const XsDataPacket &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsDevice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsDevice **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1addRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->addRef();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1removeRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->removeRef();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1refCounter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->refCounter();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1master(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsDevice *)((XsDevice const *)arg1)->master();
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1findDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceId *arg2 = 0 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsDevice *)((XsDevice const *)arg1)->findDevice((XsDeviceId const &)*arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1findDeviceConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceId *arg2 = 0 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsDevice *)((XsDevice const *)arg1)->findDeviceConst((XsDeviceId const &)*arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1subDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (XsDevice *)((XsDevice const *)arg1)->subDevice(arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1subDeviceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->subDeviceCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1busId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->busId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceId *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsDeviceId *) &((XsDevice const *)arg1)->deviceId();
  *(XsDeviceId **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1firmwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->firmwareVersion();
  *(XsVersion **)&jresult = new XsVersion((const XsVersion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isMasterDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isMasterDevice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isContainerDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isContainerDevice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isInitialized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isStandaloneDevice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isStandaloneDevice();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceAtBusIdConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (XsDevice *)((XsDevice const *)arg1)->deviceAtBusIdConst(arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceAtBusId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (XsDevice *)(arg1)->deviceAtBusId(arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1communicator(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  Communicator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (Communicator *)((XsDevice const *)arg1)->communicator();
  *(Communicator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1logFileInterface(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  std::unique_ptr< xsens::Lock > *arg2 = 0 ;
  DataLogger *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(std::unique_ptr< xsens::Lock > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::unique_ptr< xsens::Lock > & reference is null");
    return 0;
  } 
  result = (DataLogger *)((XsDevice const *)arg1)->logFileInterface(*arg2);
  *(DataLogger **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1updatePortInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsPortInfo *arg2 = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return 0;
  } 
  result = (XsResultValue)(arg1)->updatePortInfo((XsPortInfo const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1setGotoConfigOnClose(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setGotoConfigOnClose(arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1createLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString *arg2 = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsResultValue)(arg1)->createLogFile((XsString const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1closeLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->closeLogFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isMeasuring(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isMeasuring();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isRecording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isReadingFromFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isReadingFromFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1checkDataCache(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->checkDataCache();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1restartFilter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->restartFilter();
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1lastResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsResultValue)((XsDevice const *)arg1)->lastResult();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1lastResultText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->lastResultText();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1recordingQueueLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->recordingQueueLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1cacheSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->cacheSize();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1deviceState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsDeviceState)((XsDevice const *)arg1)->deviceState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1supportsSyncSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)XsDevice::supportsSyncSettings((XsDeviceId const &)*arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isCompatibleSyncSetting(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  XsDeviceId *arg1 = 0 ;
  XsSyncSetting *arg2 = 0 ;
  XsSyncSetting *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  arg2 = *(XsSyncSetting **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSyncSetting const & reference is null");
    return 0;
  } 
  arg3 = *(XsSyncSetting **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSyncSetting const & reference is null");
    return 0;
  } 
  result = (bool)XsDevice::isCompatibleSyncSetting((XsDeviceId const &)*arg1,(XsSyncSetting const &)*arg2,(XsSyncSetting const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1syncSettingsTimeResolutionInMicroSeconds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = 0 ;
  unsigned int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (unsigned int)XsDevice::syncSettingsTimeResolutionInMicroSeconds((XsDeviceId const &)*arg1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1opLessThen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDevice *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDevice const & reference is null");
    return 0;
  } 
  result = (bool)((XsDevice const *)arg1)->operator <((XsDevice const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1opEquals_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDevice *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDevice const & reference is null");
    return 0;
  } 
  result = (bool)((XsDevice const *)arg1)->operator ==((XsDevice const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1opLessThen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDevice const *)arg1)->operator <((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1opEquals_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsDevice const *)arg1)->operator ==((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceConfiguration result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->deviceConfiguration();
  *(XsDeviceConfiguration **)&jresult = new XsDeviceConfiguration((const XsDeviceConfiguration &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceConfigurationRef(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsDeviceConfiguration *) &(arg1)->deviceConfigurationRef();
  *(XsDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceConfigurationConst(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceConfiguration *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsDeviceConfiguration *) &((XsDevice const *)arg1)->deviceConfigurationConst();
  *(XsDeviceConfiguration **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1initialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->initialize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1initializeSoftwareCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->initializeSoftwareCalibration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1deinitializeSoftwareCalibration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->deinitializeSoftwareCalibration();
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1batteryLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->batteryLevel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1updateRateForDataIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataIdentifier arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (int)((XsDevice const *)arg1)->updateRateForDataIdentifier(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1updateRateForProcessedDataIdentifier(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataIdentifier arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (int)((XsDevice const *)arg1)->updateRateForProcessedDataIdentifier(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1supportedUpdateRates_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataIdentifier arg2 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = ((XsDevice const *)arg1)->supportedUpdateRates(arg2);
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1supportedUpdateRates_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  std::vector< int > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->supportedUpdateRates();
  *(std::vector< int > **)&jresult = new std::vector< int >((const std::vector< int > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1maximumUpdateRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->maximumUpdateRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1hasDataEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataIdentifier arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (bool)((XsDevice const *)arg1)->hasDataEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1hasProcessedDataEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataIdentifier arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsDataIdentifier)jarg2; 
  result = (bool)((XsDevice const *)arg1)->hasProcessedDataEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1productCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->productCode();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1shortProductCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->shortProductCode();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1portName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->portName();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1portInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->portInfo();
  *(XsPortInfo **)&jresult = new XsPortInfo((const XsPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1baudRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsBaudRate)((XsDevice const *)arg1)->baudRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1serialBaudRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsBaudRate result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsBaudRate)((XsDevice const *)arg1)->serialBaudRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1hardwareVersion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsVersion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->hardwareVersion();
  *(XsVersion **)&jresult = new XsVersion((const XsVersion &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1startRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->startRecording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1triggerStartRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->triggerStartRecording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1stopRecording(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->stopRecording();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1getStartRecordingPacketId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int64_t)((XsDevice const *)arg1)->getStartRecordingPacketId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1getStopRecordingPacketId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int64_t)((XsDevice const *)arg1)->getStopRecordingPacketId();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1setOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsOption arg2 ;
  XsOption arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsOption)jarg2; 
  arg3 = (XsOption)jarg3; 
  (arg1)->setOptions(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1areOptionsEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsOption arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsOption)jarg2; 
  result = (bool)((XsDevice const *)arg1)->areOptionsEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1getOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsOption)((XsDevice const *)arg1)->getOptions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1sendCustomMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_, jint jarg5) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  bool arg3 ;
  XsMessage *arg4 = 0 ;
  int arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(XsMessage **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->sendCustomMessage((XsMessage const &)*arg2,arg3,*arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1sendCustomMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  bool arg3 ;
  XsMessage *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg4_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = *(XsMessage **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->sendCustomMessage((XsMessage const &)*arg2,arg3,*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1sendRawMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->sendRawMessage((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1sendCustomMessage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jlong jarg5, jobject jarg5_, jint jarg6) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  bool arg3 ;
  XsXbusMessageId arg4 ;
  XsMessage *arg5 = 0 ;
  int arg6 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (XsXbusMessageId)jarg4; 
  arg5 = *(XsMessage **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  arg6 = (int)jarg6; 
  result = (bool)(arg1)->sendCustomMessage((XsMessage const &)*arg2,arg3,arg4,*arg5,arg6);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1sendCustomMessage_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  bool arg3 ;
  XsXbusMessageId arg4 ;
  XsMessage *arg5 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg5_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (XsXbusMessageId)jarg4; 
  arg5 = *(XsMessage **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->sendCustomMessage((XsMessage const &)*arg2,arg3,arg4,*arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1waitForCustomMessage_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsXbusMessageId arg2 ;
  XsMessage *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsXbusMessageId)jarg2; 
  arg3 = *(XsMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->waitForCustomMessage(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1waitForCustomMessage_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsXbusMessageId arg2 ;
  XsMessage *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsXbusMessageId)jarg2; 
  arg3 = *(XsMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->waitForCustomMessage(arg2,*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1waitForCustomMessage_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jobject jarg3_, jint jarg4) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  SwigValueWrapper< std::shared_ptr< ReplyObject > > arg2 ;
  XsMessage *arg3 = 0 ;
  int arg4 ;
  std::shared_ptr< ReplyObject > *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDevice **)&jarg1; 
  argp2 = *(std::shared_ptr< ReplyObject > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::shared_ptr< ReplyObject >");
    return 0;
  }
  arg2 = *argp2; 
  arg3 = *(XsMessage **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage & reference is null");
    return 0;
  } 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->waitForCustomMessage(arg2,*arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1addReplyObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsXbusMessageId arg2 ;
  uint8_t arg3 ;
  SwigValueWrapper< std::shared_ptr< ReplyObject > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsXbusMessageId)jarg2; 
  arg3 = (uint8_t)jarg3; 
  result = (arg1)->addReplyObject(arg2,arg3);
  *(std::shared_ptr< ReplyObject > **)&jresult = new std::shared_ptr< ReplyObject >((const std::shared_ptr< ReplyObject > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->handleMessage((XsMessage const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleDataPacket(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataPacket *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDataPacket **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDataPacket const & reference is null");
    return ;
  } 
  (arg1)->handleDataPacket((XsDataPacket const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleNonDataMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->handleNonDataMessage((XsMessage const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleErrorMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->handleErrorMessage((XsMessage const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleWarningMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->handleWarningMessage((XsMessage const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleWakeupMessage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->handleWakeupMessage((XsMessage const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setSerialBaudRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsBaudRate arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsBaudRate)jarg2; 
  result = (bool)(arg1)->setSerialBaudRate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1portConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsIntArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->portConfiguration();
  *(XsIntArray **)&jresult = new XsIntArray((const XsIntArray &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setPortConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsIntArray *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsIntArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsIntArray & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setPortConfiguration(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isMotionTracker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isMotionTracker();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1operationalMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsOperationalMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsOperationalMode)((XsDevice const *)arg1)->operationalMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setOperationalMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsOperationalMode arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsOperationalMode)jarg2; 
  result = (bool)(arg1)->setOperationalMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1updateRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->updateRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setUpdateRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setUpdateRate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1deviceOptionFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceOptionFlag result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsDeviceOptionFlag)((XsDevice const *)arg1)->deviceOptionFlags();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setDeviceOptionFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceOptionFlag arg2 ;
  XsDeviceOptionFlag arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsDeviceOptionFlag)jarg2; 
  arg3 = (XsDeviceOptionFlag)jarg3; 
  result = (bool)(arg1)->setDeviceOptionFlags(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1outputConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  SwigValueWrapper< XsOutputConfigurationArray > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->outputConfiguration();
  *(XsOutputConfigurationArray **)&jresult = new XsOutputConfigurationArray((const XsOutputConfigurationArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1processedOutputConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  SwigValueWrapper< XsOutputConfigurationArray > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->processedOutputConfiguration();
  *(XsOutputConfigurationArray **)&jresult = new XsOutputConfigurationArray((const XsOutputConfigurationArray &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setOutputConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsOutputConfigurationArray *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsOutputConfigurationArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsOutputConfigurationArray & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setOutputConfiguration(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isInStringOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isInStringOutputMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1canOutputConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsCanOutputConfigurationArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->canOutputConfiguration();
  *(XsCanOutputConfigurationArray **)&jresult = new XsCanOutputConfigurationArray((const XsCanOutputConfigurationArray &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setCanOutputConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsCanOutputConfigurationArray *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsCanOutputConfigurationArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsCanOutputConfigurationArray & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setCanOutputConfiguration(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1canConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (uint32_t)((XsDevice const *)arg1)->canConfiguration();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setCanConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (bool)(arg1)->setCanConfiguration(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1usesLegacyDeviceMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->usesLegacyDeviceMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1stringOutputType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (uint16_t)((XsDevice const *)arg1)->stringOutputType();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1stringSamplePeriod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (uint16_t)((XsDevice const *)arg1)->stringSamplePeriod();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1stringSkipFactor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (uint16_t)((XsDevice const *)arg1)->stringSkipFactor();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setStringOutputMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t arg2 ;
  uint16_t arg3 ;
  uint16_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  arg3 = (uint16_t)jarg3; 
  arg4 = (uint16_t)jarg4; 
  result = (bool)(arg1)->setStringOutputMode(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1supportedStringOutputTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsStringOutputTypeArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->supportedStringOutputTypes();
  *(XsStringOutputTypeArray **)&jresult = new XsStringOutputTypeArray((const XsStringOutputTypeArray &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1dataLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->dataLength();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1syncSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSyncSettingArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->syncSettings();
  *(XsSyncSettingArray **)&jresult = new XsSyncSettingArray((const XsSyncSettingArray &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setSyncSettings(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSyncSettingArray *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsSyncSettingArray **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsSyncSettingArray const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setSyncSettings((XsSyncSettingArray const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isSyncMaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isSyncMaster();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isSyncSlave(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isSyncSlave();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1supportedSyncSettings_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSyncSettingArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->supportedSyncSettings();
  *(XsSyncSettingArray **)&jresult = new XsSyncSettingArray((const XsSyncSettingArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1supportedSyncSettings_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDeviceId *arg1 = 0 ;
  XsSyncSettingArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDeviceId **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = XsDevice::supportedSyncSettings((XsDeviceId const &)*arg1);
  *(XsSyncSettingArray **)&jresult = new XsSyncSettingArray((const XsSyncSettingArray &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1gotoMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->gotoMeasurement();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1gotoConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->gotoConfig();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1restoreFactoryDefaults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->restoreFactoryDefaults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1reset_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->reset();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1reset_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->reset(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1reopenPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->reopenPort(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1reopenPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->reopenPort(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1writeDeviceSettingsToFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->writeDeviceSettingsToFile();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1flushInputBuffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->flushInputBuffers();
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1syncRole(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSyncRole result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsSyncRole)((XsDevice const *)arg1)->syncRole();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1loadLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->loadLogFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1abortLoadLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->abortLoadLogFile();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1logFileName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->logFileName();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1resetOrientation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsResetMethod arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsResetMethod)jarg2; 
  result = (bool)(arg1)->resetOrientation(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1resetLogFileReadPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->resetLogFileReadPosition();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1logFileSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsFilePos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsFilePos)((XsDevice const *)arg1)->logFileSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1logFileReadPosition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsFilePos result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsFilePos)((XsDevice const *)arg1)->logFileReadPosition();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1updateCachedDeviceInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->updateCachedDeviceInformation();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1enableProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsProtocolType arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsProtocolType)jarg2; 
  result = (bool)(arg1)->enableProtocol(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1disableProtocol(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsProtocolType arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsProtocolType)jarg2; 
  result = (bool)(arg1)->disableProtocol(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isProtocolEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsProtocolType arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsProtocolType)jarg2; 
  result = (bool)((XsDevice const *)arg1)->isProtocolEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (uint32_t)(arg1)->deviceBufferSize();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setDeviceBufferSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (uint32_t)jarg2; 
  result = (bool)(arg1)->setDeviceBufferSize(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1connectivityState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsConnectivityState result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsConnectivityState)((XsDevice const *)arg1)->connectivityState();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1waitForAllDevicesInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->waitForAllDevicesInitialized();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1children(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  SwigValueWrapper< std::vector< XsDevice * > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->children();
  *(std::vector< XsDevice * > **)&jresult = new std::vector< XsDevice * >((const std::vector< XsDevice * > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1childCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->childCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1enableRadio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->enableRadio(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1disableRadio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->disableRadio();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1radioChannel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->radioChannel();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isRadioEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isRadioEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1makeOperational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->makeOperational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isOperational(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isOperational();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isInSyncStationMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->isInSyncStationMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setSyncStationMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setSyncStationMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1stealthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->stealthMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setStealthMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setStealthMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1discardRetransmissions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->discardRetransmissions(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleMasterIndication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->handleMasterIndication((XsMessage const &)*arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1abortFlushing(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->abortFlushing();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setDeviceAccepted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setDeviceAccepted((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setDeviceRejected(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setDeviceRejected((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setAccessControlMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsAccessControlMode arg2 ;
  XsDeviceIdArray *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsAccessControlMode)jarg2; 
  arg3 = *(XsDeviceIdArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceIdArray const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setAccessControlMode(arg2,(XsDeviceIdArray const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1accessControlMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsAccessControlMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsAccessControlMode)((XsDevice const *)arg1)->accessControlMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1currentAccessControlList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceIdArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->currentAccessControlList();
  *(XsDeviceIdArray **)&jresult = new XsDeviceIdArray((const XsDeviceIdArray &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1setDeviceParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceParameter *arg2 = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceParameter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceParameter const & reference is null");
    return 0;
  } 
  result = (XsResultValue)(arg1)->setDeviceParameter((XsDeviceParameter const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1deviceParameter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDeviceParameter *arg2 = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDeviceParameter **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceParameter & reference is null");
    return 0;
  } 
  result = (XsResultValue)((XsDevice const *)arg1)->deviceParameter(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1gnssPlatform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsGnssPlatform result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsGnssPlatform)((XsDevice const *)arg1)->gnssPlatform();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setGnssPlatform(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsGnssPlatform arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsGnssPlatform)jarg2; 
  result = (bool)(arg1)->setGnssPlatform(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1acceptConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->acceptConnection();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1rejectConnection(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->rejectConnection();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1wirelessPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->wirelessPriority();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setWirelessPriority(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setWirelessPriority(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1rejectReason(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsRejectReason result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsRejectReason)((XsDevice const *)arg1)->rejectReason();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1requestBatteryLevel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->requestBatteryLevel();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1batteryLevelTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsTimeStamp result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (arg1)->batteryLevelTime();
  *(XsTimeStamp **)&jresult = new XsTimeStamp((const XsTimeStamp &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setTransportMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setTransportMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1transportMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->transportMode();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_minimalJNI_XsDevice_1lastKnownRssi(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int16_t)((XsDevice const *)arg1)->lastKnownRssi();
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1setPacketErrorRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPacketErrorRate(arg2);
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1packetErrorRate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->packetErrorRate();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isBlueToothEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isBlueToothEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setBlueToothEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBlueToothEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isBusPowerEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isBusPowerEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setBusPowerEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setBusPowerEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1powerDown(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->powerDown();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1errorMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsErrorMode result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (XsErrorMode)((XsDevice const *)arg1)->errorMode();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setErrorMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsErrorMode arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsErrorMode)jarg2; 
  result = (bool)(arg1)->setErrorMode(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setHeadingOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setHeadingOffset(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDevice_1headingOffset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (double)((XsDevice const *)arg1)->headingOffset();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setLocationId(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1locationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (int)((XsDevice const *)arg1)->locationId();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1getDeviceFromLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t arg2 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (XsDevice *)(arg1)->getDeviceFromLocationId(arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1objectAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->objectAlignment();
  *(XsMatrix **)&jresult = new XsMatrix((const XsMatrix &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setObjectAlignment(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMatrix *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMatrix **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setObjectAlignment((XsMatrix const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDevice_1gravityMagnitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (double)((XsDevice const *)arg1)->gravityMagnitude();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setGravityMagnitude(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  double arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (double)jarg2; 
  result = (bool)(arg1)->setGravityMagnitude(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1initialPositionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->initialPositionLLA();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setInitialPositionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setInitialPositionLLA((XsVector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1utcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsTimeInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->utcTime();
  *(XsTimeInfo **)&jresult = new XsTimeInfo((const XsTimeInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setUtcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsTimeInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsTimeInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsTimeInfo const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setUtcTime((XsTimeInfo const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1reinitialize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->reinitialize();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1xdaFilterProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsFilterProfile result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->xdaFilterProfile();
  *(XsFilterProfile **)&jresult = new XsFilterProfile((const XsFilterProfile &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setXdaFilterProfile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setXdaFilterProfile(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setXdaFilterProfile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setXdaFilterProfile((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1onboardFilterProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsFilterProfile result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->onboardFilterProfile();
  *(XsFilterProfile **)&jresult = new XsFilterProfile((const XsFilterProfile &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setOnboardFilterProfile_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->setOnboardFilterProfile(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setOnboardFilterProfile_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setOnboardFilterProfile((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1replaceFilterProfile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsFilterProfile *arg2 = 0 ;
  XsFilterProfile *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsFilterProfile **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFilterProfile const & reference is null");
    return 0;
  } 
  arg3 = *(XsFilterProfile **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsFilterProfile const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->replaceFilterProfile((XsFilterProfile const &)*arg2,(XsFilterProfile const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1availableOnboardFilterProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsFilterProfileArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->availableOnboardFilterProfiles();
  *(XsFilterProfileArray **)&jresult = new XsFilterProfileArray((const XsFilterProfileArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1availableXdaFilterProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsFilterProfileArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->availableXdaFilterProfiles();
  *(XsFilterProfileArray **)&jresult = new XsFilterProfileArray((const XsFilterProfileArray &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDevice_1accelerometerRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (double)((XsDevice const *)arg1)->accelerometerRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_minimalJNI_XsDevice_1gyroscopeRange(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (double)((XsDevice const *)arg1)->gyroscopeRange();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setNoRotation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (bool)(arg1)->setNoRotation(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1startRepresentativeMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->startRepresentativeMotion();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1representativeMotionState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->representativeMotionState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1stopRepresentativeMotion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsIccRepMotionResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (arg1)->stopRepresentativeMotion();
  *(XsIccRepMotionResult **)&jresult = new XsIccRepMotionResult((const XsIccRepMotionResult &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1storeIccResults(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->storeIccResults();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1rs485TransmissionDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (uint16_t)((XsDevice const *)arg1)->rs485TransmissionDelay();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setRs485TransmissionDelay(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint16_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (bool)(arg1)->setRs485TransmissionDelay(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1runSelfTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSelfTestResult result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (arg1)->runSelfTest();
  *(XsSelfTestResult **)&jresult = new XsSelfTestResult((const XsSelfTestResult &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1requestData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->requestData();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1storeFilterState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->storeFilterState();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1getDataPacketByIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSize arg2 ;
  XsSize *argp2 ;
  XsDataPacket result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  argp2 = *(XsSize **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null XsSize");
    return 0;
  }
  arg2 = *argp2; 
  result = ((XsDevice const *)arg1)->getDataPacketByIndex(arg2);
  *(XsDataPacket **)&jresult = new XsDataPacket((const XsDataPacket &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1getDataPacketCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsSize result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->getDataPacketCount();
  *(XsSize **)&jresult = new XsSize((const XsSize &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1lastAvailableLiveData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataPacket result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->lastAvailableLiveData();
  *(XsDataPacket **)&jresult = new XsDataPacket((const XsDataPacket &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1takeFirstDataPacketInQueue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDataPacket result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (arg1)->takeFirstDataPacketInQueue();
  *(XsDataPacket **)&jresult = new XsDataPacket((const XsDataPacket &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isInitialBiasUpdateEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isInitialBiasUpdateEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setInitialBiasUpdateEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setInitialBiasUpdateEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isFixedGravityEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isFixedGravityEnabled();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setFixedGravityEnabled(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setFixedGravityEnabled(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1createConfigFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString *arg2 = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsResultValue)(arg1)->createConfigFile((XsString const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsDevice_1applyConfigFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsString *arg2 = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsResultValue)(arg1)->applyConfigFile((XsString const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setAlignmentRotationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsAlignmentFrame arg2 ;
  XsMatrix *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsAlignmentFrame)jarg2; 
  arg3 = *(XsMatrix **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMatrix const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setAlignmentRotationMatrix(arg2,(XsMatrix const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1alignmentRotationMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsAlignmentFrame arg2 ;
  XsMatrix result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsAlignmentFrame)jarg2; 
  result = ((XsDevice const *)arg1)->alignmentRotationMatrix(arg2);
  *(XsMatrix **)&jresult = new XsMatrix((const XsMatrix &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setAlignmentRotationQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsAlignmentFrame arg2 ;
  XsQuaternion *arg3 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsAlignmentFrame)jarg2; 
  arg3 = *(XsQuaternion **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsQuaternion const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setAlignmentRotationQuaternion(arg2,(XsQuaternion const &)*arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1alignmentRotationQuaternion(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsAlignmentFrame arg2 ;
  XsQuaternion result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsAlignmentFrame)jarg2; 
  result = ((XsDevice const *)arg1)->alignmentRotationQuaternion(arg2);
  *(XsQuaternion **)&jresult = new XsQuaternion((const XsQuaternion &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1mutex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  xsens::GuardedMutex *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (xsens::GuardedMutex *)((XsDevice const *)arg1)->mutex();
  *(xsens::GuardedMutex **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1deviceIsDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  result = (bool)((XsDevice const *)arg1)->deviceIsDocked(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1isLoadLogFileInProgress(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)((XsDevice const *)arg1)->isLoadLogFileInProgress();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1waitForLoadLogFileDone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  ((XsDevice const *)arg1)->waitForLoadLogFileDone();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1messageLooksSane(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return 0;
  } 
  result = (bool)((XsDevice const *)arg1)->messageLooksSane((XsMessage const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1prepareForTermination(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->prepareForTermination();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1setGnssLeverArm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setGnssLeverArm((XsVector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1gnssLeverArm(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsVector result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = ((XsDevice const *)arg1)->gnssLeverArm();
  *(XsVector **)&jresult = new XsVector((const XsVector &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1requestUtcTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->requestUtcTime();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1handleUnavailableData(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  int64_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (int64_t)jarg2; 
  (arg1)->handleUnavailableData(arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1writeEmtsPage(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  int arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(uint8_t **)&jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->writeEmtsPage((uint8_t const *)arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1setSkipEmtsReadOnInit(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setSkipEmtsReadOnInit(arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsDevice_1readEmtsAndDeviceConfiguration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (bool)(arg1)->readEmtsAndDeviceConfiguration();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1supportedStatusFlags(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  uint32_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (uint32_t)((XsDevice const *)arg1)->supportedStatusFlags();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1readMetaDataFromLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsByteArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  result = (arg1)->readMetaDataFromLogFile();
  *(XsByteArray **)&jresult = new XsByteArray((const XsByteArray &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1onMessageSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->onMessageSent((XsMessage const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1onMessageReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsMessage *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(XsMessage **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsMessage const & reference is null");
    return ;
  } 
  (arg1)->onMessageReceived((XsMessage const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1onMessageDetected2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  XsProtocolType arg2 ;
  XsByteArray *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = (XsProtocolType)jarg2; 
  arg3 = *(XsByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsByteArray const & reference is null");
    return ;
  } 
  (arg1)->onMessageDetected2(arg2,(XsByteArray const &)*arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1onSessionRestarted(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->onSessionRestarted();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1onConnectionLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->onConnectionLost();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1onEofReached(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->onEofReached();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsDevice_1onWirelessConnectionLost(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsDevice *arg1 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  (arg1)->onWirelessConnectionLost();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1deviceRecordingBufferItemCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jlong jresult = 0 ;
  XsDevice *arg1 = (XsDevice *) 0 ;
  int64_t *arg2 = 0 ;
  int64_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsDevice **)&jarg1; 
  arg2 = *(int64_t **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "int64_t & reference is null");
    return 0;
  } 
  result = (int64_t)((XsDevice const *)arg1)->deviceRecordingBufferItemCount(*arg2);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsControl(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsControl *)new XsControl();
  *(XsControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsControl(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsControl **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1flushInputBuffers(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  (arg1)->flushInputBuffers();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1resultText(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  XsResultValue arg1 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsResultValue)jarg1; 
  result = XsControl::resultText(arg1);
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1clearHardwareError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  (arg1)->clearHardwareError();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  (arg1)->close();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  XsBaudRate arg3 ;
  uint32_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = (XsBaudRate)jarg3; 
  arg4 = (uint32_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->openPort((XsString const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  XsBaudRate arg3 ;
  uint32_t arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = (XsBaudRate)jarg3; 
  arg4 = (uint32_t)jarg4; 
  result = (bool)(arg1)->openPort((XsString const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPort_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  XsBaudRate arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = (XsBaudRate)jarg3; 
  result = (bool)(arg1)->openPort((XsString const &)*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPort_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsPortInfo *arg2 = 0 ;
  uint32_t arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo & reference is null");
    return 0;
  } 
  arg3 = (uint32_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->openPort(*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPort_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsPortInfo *arg2 = 0 ;
  uint32_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo & reference is null");
    return 0;
  } 
  arg3 = (uint32_t)jarg3; 
  result = (bool)(arg1)->openPort(*arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPort_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsPortInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->openPort(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPortWithCredentials_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jlong jarg5) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsPortInfo *arg2 = 0 ;
  XsString *arg3 = 0 ;
  XsString *arg4 = 0 ;
  uint32_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo & reference is null");
    return 0;
  } 
  arg3 = *(XsString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg4 = *(XsString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg5 = (uint32_t)jarg5; 
  result = (bool)(arg1)->openPortWithCredentials(*arg2,(XsString const &)*arg3,(XsString const &)*arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openPortWithCredentials_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsPortInfo *arg2 = 0 ;
  XsString *arg3 = 0 ;
  XsString *arg4 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo & reference is null");
    return 0;
  } 
  arg3 = *(XsString **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg4 = *(XsString **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->openPortWithCredentials(*arg2,(XsString const &)*arg3,(XsString const &)*arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openCustomPort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  bool arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32_t)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (bool)(arg1)->openCustomPort(arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openCustomPort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  int arg2 ;
  uint32_t arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (uint32_t)jarg3; 
  result = (bool)(arg1)->openCustomPort(arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openImarPort_1internal_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4, jlong jarg5) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  XsBaudRate arg3 ;
  int arg4 ;
  uint32_t arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = (XsBaudRate)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (uint32_t)jarg5; 
  result = (bool)(arg1)->openImarPort_internal((XsString const &)*arg2,arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openImarPort_1internal_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jint jarg4) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  XsBaudRate arg3 ;
  int arg4 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  arg3 = (XsBaudRate)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->openImarPort_internal((XsString const &)*arg2,arg3,arg4);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1closePort_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return ;
  } 
  (arg1)->closePort((XsString const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1closePort_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsControl *arg1 = (XsControl *) 0 ;
  XsDeviceId *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return ;
  } 
  (arg1)->closePort((XsDeviceId const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1closePort_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsControl *arg1 = (XsControl *) 0 ;
  XsPortInfo *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsPortInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo const & reference is null");
    return ;
  } 
  (arg1)->closePort((XsPortInfo const &)*arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1closeCustomPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsControl *arg1 = (XsControl *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->closeCustomPort(arg2);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1closePort_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  XsControl *arg1 = (XsControl *) 0 ;
  XsDevice *arg2 = (XsDevice *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsDevice **)&jarg2; 
  (arg1)->closePort(arg2);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1customPortInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  int arg2 ;
  XsPortInfo result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (int)jarg2; 
  result = ((XsControl const *)arg1)->customPortInfo(arg2);
  *(XsPortInfo **)&jresult = new XsPortInfo((const XsPortInfo &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1openLogFile(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->openLogFile((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1lastResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (XsResultValue)((XsControl const *)arg1)->lastResult();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1lastResultText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = ((XsControl const *)arg1)->lastResultText();
  *(XsString **)&jresult = new XsString((const XsString &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1lastHardwareError(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (XsResultValue)((XsControl const *)arg1)->lastHardwareError();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1lastHardwareErrorDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = ((XsControl const *)arg1)->lastHardwareErrorDeviceId();
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1deviceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (int)((XsControl const *)arg1)->deviceCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1mainDeviceCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (int)((XsControl const *)arg1)->mainDeviceCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1mainDeviceIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  SwigValueWrapper< std::vector< XsDeviceId > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = ((XsControl const *)arg1)->mainDeviceIds();
  *(std::vector< XsDeviceId > **)&jresult = new std::vector< XsDeviceId >((const std::vector< XsDeviceId > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1mtCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (int)((XsControl const *)arg1)->mtCount();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1mtDeviceIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  SwigValueWrapper< std::vector< XsDeviceId > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = ((XsControl const *)arg1)->mtDeviceIds();
  *(std::vector< XsDeviceId > **)&jresult = new std::vector< XsDeviceId >((const std::vector< XsDeviceId > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1deviceIds(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  SwigValueWrapper< std::vector< XsDeviceId > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = ((XsControl const *)arg1)->deviceIds();
  *(std::vector< XsDeviceId > **)&jresult = new std::vector< XsDeviceId >((const std::vector< XsDeviceId > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1getDeviceFromLocationId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  uint16_t arg2 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (uint16_t)jarg2; 
  result = (XsDevice *)((XsControl const *)arg1)->getDeviceFromLocationId(arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1dockDeviceId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsDeviceId *arg2 = 0 ;
  XsDeviceId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = ((XsControl const *)arg1)->dockDeviceId((XsDeviceId const &)*arg2);
  *(XsDeviceId **)&jresult = new XsDeviceId((const XsDeviceId &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1isDeviceWireless(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsControl const *)arg1)->isDeviceWireless((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1isDeviceDocked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsDeviceId *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (bool)((XsControl const *)arg1)->isDeviceDocked((XsDeviceId const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1loadFilterProfiles(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->loadFilterProfiles((XsString const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1enabledOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (XsOption)((XsControl const *)arg1)->enabledOptions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1disabledOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsOption result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (XsOption)((XsControl const *)arg1)->disabledOptions();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1setOptions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  XsControl *arg1 = (XsControl *) 0 ;
  XsOption arg2 ;
  XsOption arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (XsOption)jarg2; 
  arg3 = (XsOption)jarg3; 
  (arg1)->setOptions(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1setOptionsForce(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  XsControl *arg1 = (XsControl *) 0 ;
  XsOption arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (XsOption)jarg2; 
  (arg1)->setOptionsForce(arg2);
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1setInitialPositionLLA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsVector *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsVector **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsVector const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->setInitialPositionLLA((XsVector const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1device(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsDeviceId *arg2 = 0 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsDeviceId **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsDeviceId const & reference is null");
    return 0;
  } 
  result = (XsDevice *)((XsControl const *)arg1)->device((XsDeviceId const &)*arg2);
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1mainDevices(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsDevicePtrArray result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = ((XsControl const *)arg1)->mainDevices();
  *(XsDevicePtrArray **)&jresult = new XsDevicePtrArray((const XsDevicePtrArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1broadcast(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsDevice *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  result = (XsDevice *)((XsControl const *)arg1)->broadcast();
  *(XsDevice **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1transmissionReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  XsControl *arg1 = (XsControl *) 0 ;
  int arg2 ;
  XsByteArray *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(XsByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsByteArray const & reference is null");
    return ;
  } 
  (arg1)->transmissionReceived(arg2,(XsByteArray const &)*arg3);
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1construct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsControl *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsControl *)XsControl::construct();
  *(XsControl **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1destruct(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  (arg1)->destruct();
}


SWIGEXPORT jboolean JNICALL Java_minimalJNI_XsControl_1finalizeOpenPort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jboolean jarg5) {
  jboolean jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  Communicator *arg2 = (Communicator *) 0 ;
  XsPortInfo *arg3 = 0 ;
  uint32_t arg4 ;
  bool arg5 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(Communicator **)&jarg2; 
  arg3 = *(XsPortInfo **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsPortInfo & reference is null");
    return 0;
  } 
  arg4 = (uint32_t)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->finalizeOpenPort(arg2,*arg3,arg4,arg5);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1gotoConfig(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  (arg1)->gotoConfig();
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1gotoMeasurement(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  (arg1)->gotoMeasurement();
}


SWIGEXPORT jint JNICALL Java_minimalJNI_XsControl_1startRestoreCommunication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  XsControl *arg1 = (XsControl *) 0 ;
  XsString *arg2 = 0 ;
  XsResultValue result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(XsControl **)&jarg1; 
  arg2 = *(XsString **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "XsString const & reference is null");
    return 0;
  } 
  result = (XsResultValue)(arg1)->startRestoreCommunication((XsString const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_XsControl_1stopRestoreCommunication(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  XsControl *arg1 = (XsControl *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(XsControl **)&jarg1; 
  (arg1)->stopRestoreCommunication();
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScanner_1scanPorts_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  XsBaudRate arg1 ;
  int arg2 ;
  bool arg3 ;
  bool arg4 ;
  XsPortInfoArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsBaudRate)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  arg4 = jarg4 ? true : false; 
  result = XsScanner::scanPorts(arg1,arg2,arg3,arg4);
  *(XsPortInfoArray **)&jresult = new XsPortInfoArray((const XsPortInfoArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScanner_1scanPorts_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  XsBaudRate arg1 ;
  int arg2 ;
  bool arg3 ;
  XsPortInfoArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsBaudRate)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = XsScanner::scanPorts(arg1,arg2,arg3);
  *(XsPortInfoArray **)&jresult = new XsPortInfoArray((const XsPortInfoArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScanner_1scanPorts_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  XsBaudRate arg1 ;
  int arg2 ;
  XsPortInfoArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsBaudRate)jarg1; 
  arg2 = (int)jarg2; 
  result = XsScanner::scanPorts(arg1,arg2);
  *(XsPortInfoArray **)&jresult = new XsPortInfoArray((const XsPortInfoArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScanner_1scanPorts_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  XsBaudRate arg1 ;
  XsPortInfoArray result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (XsBaudRate)jarg1; 
  result = XsScanner::scanPorts(arg1);
  *(XsPortInfoArray **)&jresult = new XsPortInfoArray((const XsPortInfoArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsScanner_1scanPorts_1_1SWIG_14(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsPortInfoArray result;
  
  (void)jenv;
  (void)jcls;
  result = XsScanner::scanPorts();
  *(XsPortInfoArray **)&jresult = new XsPortInfoArray((const XsPortInfoArray &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_new_1XsScanner(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  XsScanner *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (XsScanner *)new XsScanner();
  *(XsScanner **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_minimalJNI_delete_1XsScanner(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  XsScanner *arg1 = (XsScanner *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(XsScanner **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_minimalJNI_XsVector3_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XsVector **)&baseptr = *(XsVector3 **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_XsPortInfoArrayClass_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XsArrayImpl< XsPortInfo,g_xsPortInfoArrayDescriptor,XsPortInfoArray > **)&baseptr = *(XsPortInfoArray **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_CallbackManagerXda_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XsCallback **)&baseptr = *(CallbackManagerXda **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_Communicator_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CallbackManagerXda **)&baseptr = *(Communicator **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_DataLogger_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CallbackManagerXda **)&baseptr = *(DataLogger **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_MidReplyObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ReplyObject **)&baseptr = *(MidReplyObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_MidAndDataReplyObject_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(ReplyObject **)&baseptr = *(MidAndDataReplyObject **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_CallbackHandler_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(XsCallback **)&baseptr = *(CallbackHandler **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_XsDevice_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CallbackManagerXda **)&baseptr = *(XsDevice **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_minimalJNI_XsControl_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(CallbackManagerXda **)&baseptr = *(XsControl **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

