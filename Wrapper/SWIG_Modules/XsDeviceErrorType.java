/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public final class XsDeviceErrorType {
  public final static XsDeviceErrorType XERR_Unknown = new XsDeviceErrorType("XERR_Unknown", minimalJNI.XERR_Unknown_get());
  public final static XsDeviceErrorType XERR_ImcuTimeout = new XsDeviceErrorType("XERR_ImcuTimeout", minimalJNI.XERR_ImcuTimeout_get());
  public final static XsDeviceErrorType XERR_ImcuSettingsInvalid = new XsDeviceErrorType("XERR_ImcuSettingsInvalid", minimalJNI.XERR_ImcuSettingsInvalid_get());
  public final static XsDeviceErrorType XERR_ImcuSettingsFailure = new XsDeviceErrorType("XERR_ImcuSettingsFailure", minimalJNI.XERR_ImcuSettingsFailure_get());
  public final static XsDeviceErrorType XERR_ImcuEmtsWriteFailure = new XsDeviceErrorType("XERR_ImcuEmtsWriteFailure", minimalJNI.XERR_ImcuEmtsWriteFailure_get());
  public final static XsDeviceErrorType XERR_ImcuEmtsReadFailure = new XsDeviceErrorType("XERR_ImcuEmtsReadFailure", minimalJNI.XERR_ImcuEmtsReadFailure_get());
  public final static XsDeviceErrorType XERR_DspCrashed = new XsDeviceErrorType("XERR_DspCrashed", minimalJNI.XERR_DspCrashed_get());
  public final static XsDeviceErrorType XERR_DspBootingTimeout = new XsDeviceErrorType("XERR_DspBootingTimeout", minimalJNI.XERR_DspBootingTimeout_get());
  public final static XsDeviceErrorType XERR_DspSettingsInvalid = new XsDeviceErrorType("XERR_DspSettingsInvalid", minimalJNI.XERR_DspSettingsInvalid_get());

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static XsDeviceErrorType swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + XsDeviceErrorType.class + " with value " + swigValue);
  }

  private XsDeviceErrorType(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private XsDeviceErrorType(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private XsDeviceErrorType(String swigName, XsDeviceErrorType swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static XsDeviceErrorType[] swigValues = { XERR_Unknown, XERR_ImcuTimeout, XERR_ImcuSettingsInvalid, XERR_ImcuSettingsFailure, XERR_ImcuEmtsWriteFailure, XERR_ImcuEmtsReadFailure, XERR_DspCrashed, XERR_DspBootingTimeout, XERR_DspSettingsInvalid };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

