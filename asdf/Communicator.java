/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package asdf;

public class Communicator extends CallbackManagerXda {
  private transient long swigCPtr;

  protected Communicator(long cPtr, boolean cMemoryOwn) {
    super(minimalJNI.Communicator_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Communicator obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        throw new UnsupportedOperationException("C++ destructor does not have public access");
      }
      swigCPtr = 0;
    }
    super.delete();
  }

  public void destroy() {
    minimalJNI.Communicator_destroy(swigCPtr, this);
  }

  static public class Deleter {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Deleter(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Deleter obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          minimalJNI.delete_Communicator_Deleter(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    public void opRoundBrackets(Communicator c) {
      minimalJNI.Communicator_Deleter_opRoundBrackets(swigCPtr, this, Communicator.getCPtr(c), c);
    }
  
    public Deleter() {
      this(minimalJNI.new_Communicator_Deleter(), true);
    }
  
  }

  public boolean doTransaction(XsMessageClass message) {
    return minimalJNI.Communicator_doTransaction__SWIG_0(swigCPtr, this, XsMessageClass.getCPtr(message), message);
  }

  public boolean doTransaction(XsMessageClass message, long timeout) {
    return minimalJNI.Communicator_doTransaction__SWIG_1(swigCPtr, this, XsMessageClass.getCPtr(message), message, timeout);
  }

  public boolean doTransaction(XsMessageClass message, XsMessageClass rcv) {
    return minimalJNI.Communicator_doTransaction__SWIG_2(swigCPtr, this, XsMessageClass.getCPtr(message), message, XsMessageClass.getCPtr(rcv), rcv);
  }

  public boolean doTransaction(XsMessageClass message, XsMessageClass rcv, long timeout) {
    return minimalJNI.Communicator_doTransaction__SWIG_3(swigCPtr, this, XsMessageClass.getCPtr(message), message, XsMessageClass.getCPtr(rcv), rcv, timeout);
  }

  public void setDefaultTimeout(long timeout) {
    minimalJNI.Communicator_setDefaultTimeout(swigCPtr, this, timeout);
  }

  public long defaultTimeout() {
    return minimalJNI.Communicator_defaultTimeout(swigCPtr, this);
  }

  public XsResultValue lastResult() {
    return XsResultValue.swigToEnum(minimalJNI.Communicator_lastResult(swigCPtr, this));
  }

  public XsStringClass lastResultText() {
    return new XsStringClass(minimalJNI.Communicator_lastResultText(swigCPtr, this), true);
  }

  public void handleMessage(XsMessageClass message) {
    minimalJNI.Communicator_handleMessage(swigCPtr, this, XsMessageClass.getCPtr(message), message);
  }

  public SWIGTYPE_p_XsSize childDeviceCount() {
    return new SWIGTYPE_p_XsSize(minimalJNI.Communicator_childDeviceCount(swigCPtr, this), true);
  }

  public XsDeviceIdClass masterDeviceId() {
    return new XsDeviceIdClass(minimalJNI.Communicator_masterDeviceId(swigCPtr, this), true);
  }

  public SWIGTYPE_p_std__shared_ptrT_ReplyObject_t addReplyObject(short mid) {
    return new SWIGTYPE_p_std__shared_ptrT_ReplyObject_t(minimalJNI.Communicator_addReplyObject__SWIG_0(swigCPtr, this, mid), true);
  }

  public SWIGTYPE_p_std__shared_ptrT_ReplyObject_t addReplyObject(short mid, SWIGTYPE_p_XsSize offset, SWIGTYPE_p_XsSize size, SWIGTYPE_p_unsigned_char data) {
    return new SWIGTYPE_p_std__shared_ptrT_ReplyObject_t(minimalJNI.Communicator_addReplyObject__SWIG_1(swigCPtr, this, mid, SWIGTYPE_p_XsSize.getCPtr(offset), SWIGTYPE_p_XsSize.getCPtr(size), SWIGTYPE_p_unsigned_char.getCPtr(data)), true);
  }

  public SWIGTYPE_p_std__shared_ptrT_ReplyObject_t addReplyObject(ReplyObject obj) {
    return new SWIGTYPE_p_std__shared_ptrT_ReplyObject_t(minimalJNI.Communicator_addReplyObject__SWIG_2(swigCPtr, this, ReplyObject.getCPtr(obj), obj), true);
  }

  public XsResultValue gotoConfig(boolean detectRs485) {
    return XsResultValue.swigToEnum(minimalJNI.Communicator_gotoConfig__SWIG_0(swigCPtr, this, detectRs485));
  }

  public XsResultValue gotoConfig() {
    return XsResultValue.swigToEnum(minimalJNI.Communicator_gotoConfig__SWIG_1(swigCPtr, this));
  }

  public XsResultValue gotoMeasurement() {
    return XsResultValue.swigToEnum(minimalJNI.Communicator_gotoMeasurement(swigCPtr, this));
  }

  public XsResultValue getDeviceId() {
    return XsResultValue.swigToEnum(minimalJNI.Communicator_getDeviceId(swigCPtr, this));
  }

  public void setGotoConfigTimeout(long timeout) {
    minimalJNI.Communicator_setGotoConfigTimeout(swigCPtr, this, timeout);
  }

  public boolean writeMessage(XsMessageClass message) {
    return minimalJNI.Communicator_writeMessage(swigCPtr, this, XsMessageClass.getCPtr(message), message);
  }

  public void flushPort() {
    minimalJNI.Communicator_flushPort(swigCPtr, this);
  }

  public void closePort() {
    minimalJNI.Communicator_closePort(swigCPtr, this);
  }

  public void scheduleClosePort() {
    minimalJNI.Communicator_scheduleClosePort(swigCPtr, this);
  }

  public boolean isPortOpen() {
    return minimalJNI.Communicator_isPortOpen(swigCPtr, this);
  }

  public XsPortInfoClass portInfo() {
    return new XsPortInfoClass(minimalJNI.Communicator_portInfo(swigCPtr, this), true);
  }

  public boolean openPort(XsPortInfoClass portInfo, OpenPortStage stage, boolean detectRs485) {
    return minimalJNI.Communicator_openPort__SWIG_0(swigCPtr, this, XsPortInfoClass.getCPtr(portInfo), portInfo, stage.swigValue(), detectRs485);
  }

  public boolean openPort(XsPortInfoClass portInfo, OpenPortStage stage) {
    return minimalJNI.Communicator_openPort__SWIG_1(swigCPtr, this, XsPortInfoClass.getCPtr(portInfo), portInfo, stage.swigValue());
  }

  public boolean openPort(XsPortInfoClass portInfo) {
    return minimalJNI.Communicator_openPort__SWIG_2(swigCPtr, this, XsPortInfoClass.getCPtr(portInfo), portInfo);
  }

  public boolean reopenPort(OpenPortStage stage, boolean skipDeviceIdCheck) {
    return minimalJNI.Communicator_reopenPort__SWIG_0(swigCPtr, this, stage.swigValue(), skipDeviceIdCheck);
  }

  public boolean reopenPort(OpenPortStage stage) {
    return minimalJNI.Communicator_reopenPort__SWIG_1(swigCPtr, this, stage.swigValue());
  }

  public boolean reopenPort() {
    return minimalJNI.Communicator_reopenPort__SWIG_2(swigCPtr, this);
  }

  public boolean isDockedAt(Communicator other) {
    return minimalJNI.Communicator_isDockedAt(swigCPtr, this, Communicator.getCPtr(other), other);
  }

  public void setKeepAlive(boolean enable) {
    minimalJNI.Communicator_setKeepAlive(swigCPtr, this, enable);
  }

  public void closeLogFile() {
    minimalJNI.Communicator_closeLogFile(swigCPtr, this);
  }

  public XsMessageClass readMessage(short msgId) {
    return new XsMessageClass(minimalJNI.Communicator_readMessage__SWIG_0(swigCPtr, this, msgId), true);
  }

  public XsMessageClass readMessage() {
    return new XsMessageClass(minimalJNI.Communicator_readMessage__SWIG_1(swigCPtr, this), true);
  }

  public XsMessageClass readMessageFromStartOfFile(short msgId, int maxMsgs) {
    return new XsMessageClass(minimalJNI.Communicator_readMessageFromStartOfFile__SWIG_0(swigCPtr, this, msgId, maxMsgs), true);
  }

  public XsMessageClass readMessageFromStartOfFile(short msgId) {
    return new XsMessageClass(minimalJNI.Communicator_readMessageFromStartOfFile__SWIG_1(swigCPtr, this, msgId), true);
  }

  public SWIGTYPE_p_std__dequeT_XsMessage_t readMessagesFromStartOfFile(short msgId, int maxMsgs) {
    return new SWIGTYPE_p_std__dequeT_XsMessage_t(minimalJNI.Communicator_readMessagesFromStartOfFile__SWIG_0(swigCPtr, this, msgId, maxMsgs), true);
  }

  public SWIGTYPE_p_std__dequeT_XsMessage_t readMessagesFromStartOfFile(short msgId) {
    return new SWIGTYPE_p_std__dequeT_XsMessage_t(minimalJNI.Communicator_readMessagesFromStartOfFile__SWIG_1(swigCPtr, this, msgId), true);
  }

  public void loadLogFile(XsDevice device) {
    minimalJNI.Communicator_loadLogFile(swigCPtr, this, XsDevice.getCPtr(device), device);
  }

  public void abortLoadLogFile() {
    minimalJNI.Communicator_abortLoadLogFile(swigCPtr, this);
  }

  public boolean openLogFile(XsStringClass filename) {
    return minimalJNI.Communicator_openLogFile(swigCPtr, this, XsStringClass.getCPtr(filename), filename);
  }

  public XsStringClass logFileName() {
    return new XsStringClass(minimalJNI.Communicator_logFileName(swigCPtr, this), true);
  }

  public long logFileSize() {
    return minimalJNI.Communicator_logFileSize(swigCPtr, this);
  }

  public XsTimeStampClass logFileDate() {
    return new XsTimeStampClass(minimalJNI.Communicator_logFileDate(swigCPtr, this), true);
  }

  public long logFileReadPosition() {
    return minimalJNI.Communicator_logFileReadPosition(swigCPtr, this);
  }

  public void resetLogFileReadPosition() {
    minimalJNI.Communicator_resetLogFileReadPosition(swigCPtr, this);
  }

  public boolean isReadingFromFile() {
    return minimalJNI.Communicator_isReadingFromFile(swigCPtr, this);
  }

  public void waitForLastTaskCompletion() {
    minimalJNI.Communicator_waitForLastTaskCompletion(swigCPtr, this);
  }

  public boolean isLoadLogFileInProgress() {
    return minimalJNI.Communicator_isLoadLogFileInProgress(swigCPtr, this);
  }

  public boolean allowReprocessing() {
    return minimalJNI.Communicator_allowReprocessing(swigCPtr, this);
  }

  public static int configurationMessageSearchLimit() {
    return minimalJNI.Communicator_configurationMessageSearchLimit();
  }

  public void setCredentials(XsStringClass id, XsStringClass key) {
    minimalJNI.Communicator_setCredentials(swigCPtr, this, XsStringClass.getCPtr(id), id, XsStringClass.getCPtr(key), key);
  }

  public boolean sanityCheck(XsMessageClass msg) {
    return minimalJNI.Communicator_sanityCheck(swigCPtr, this, XsMessageClass.getCPtr(msg), msg);
  }

  public void addProtocolHandler(IProtocolHandler handler) {
    minimalJNI.Communicator_addProtocolHandler(swigCPtr, this, IProtocolHandler.getCPtr(handler), handler);
  }

  public void removeProtocolHandler(XsProtocolType type) {
    minimalJNI.Communicator_removeProtocolHandler(swigCPtr, this, type.swigValue());
  }

  public boolean hasProtocol(XsProtocolType type) {
    return minimalJNI.Communicator_hasProtocol(swigCPtr, this, type.swigValue());
  }

  public void setMasterDevice(XsDevice masterDevice) {
    minimalJNI.Communicator_setMasterDevice(swigCPtr, this, XsDevice.getCPtr(masterDevice), masterDevice);
  }

}
